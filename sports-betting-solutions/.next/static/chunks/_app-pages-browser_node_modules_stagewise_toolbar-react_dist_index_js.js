/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["_app-pages-browser_node_modules_stagewise_toolbar-react_dist_index_js"],{

/***/ "(app-pages-browser)/./node_modules/next/dist/build/polyfills/process.js":
/*!***********************************************************!*\
  !*** ./node_modules/next/dist/build/polyfills/process.js ***!
  \***********************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nvar _global_process, _global_process1;\nmodule.exports = ((_global_process = __webpack_require__.g.process) == null ? void 0 : _global_process.env) && typeof ((_global_process1 = __webpack_require__.g.process) == null ? void 0 : _global_process1.env) === \"object\" ? __webpack_require__.g.process : __webpack_require__(/*! next/dist/compiled/process */ \"(app-pages-browser)/./node_modules/next/dist/compiled/process/browser.js\");\n\n//# sourceMappingURL=process.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvYnVpbGQvcG9seWZpbGxzL3Byb2Nlc3MuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBLHFDQUFxQyxxQkFBTSxpRkFBaUYscUJBQU0sa0VBQWtFLHFCQUFNLFdBQVcsbUJBQU8sQ0FBQyw0R0FBNEI7O0FBRXpQIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvYnVpbGQvcG9seWZpbGxzL3Byb2Nlc3MuanM/NjdiNyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfZ2xvYmFsX3Byb2Nlc3MsIF9nbG9iYWxfcHJvY2VzczE7XG5tb2R1bGUuZXhwb3J0cyA9ICgoX2dsb2JhbF9wcm9jZXNzID0gZ2xvYmFsLnByb2Nlc3MpID09IG51bGwgPyB2b2lkIDAgOiBfZ2xvYmFsX3Byb2Nlc3MuZW52KSAmJiB0eXBlb2YgKChfZ2xvYmFsX3Byb2Nlc3MxID0gZ2xvYmFsLnByb2Nlc3MpID09IG51bGwgPyB2b2lkIDAgOiBfZ2xvYmFsX3Byb2Nlc3MxLmVudikgPT09IFwib2JqZWN0XCIgPyBnbG9iYWwucHJvY2VzcyA6IHJlcXVpcmUoXCJuZXh0L2Rpc3QvY29tcGlsZWQvcHJvY2Vzc1wiKTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cHJvY2Vzcy5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/next/dist/build/polyfills/process.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/next/dist/compiled/process/browser.js":
/*!************************************************************!*\
  !*** ./node_modules/next/dist/compiled/process/browser.js ***!
  \************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("var __dirname = \"/\";\n(function(){var e={229:function(e){var t=e.exports={};var r;var n;function defaultSetTimout(){throw new Error(\"setTimeout has not been defined\")}function defaultClearTimeout(){throw new Error(\"clearTimeout has not been defined\")}(function(){try{if(typeof setTimeout===\"function\"){r=setTimeout}else{r=defaultSetTimout}}catch(e){r=defaultSetTimout}try{if(typeof clearTimeout===\"function\"){n=clearTimeout}else{n=defaultClearTimeout}}catch(e){n=defaultClearTimeout}})();function runTimeout(e){if(r===setTimeout){return setTimeout(e,0)}if((r===defaultSetTimout||!r)&&setTimeout){r=setTimeout;return setTimeout(e,0)}try{return r(e,0)}catch(t){try{return r.call(null,e,0)}catch(t){return r.call(this,e,0)}}}function runClearTimeout(e){if(n===clearTimeout){return clearTimeout(e)}if((n===defaultClearTimeout||!n)&&clearTimeout){n=clearTimeout;return clearTimeout(e)}try{return n(e)}catch(t){try{return n.call(null,e)}catch(t){return n.call(this,e)}}}var i=[];var o=false;var u;var a=-1;function cleanUpNextTick(){if(!o||!u){return}o=false;if(u.length){i=u.concat(i)}else{a=-1}if(i.length){drainQueue()}}function drainQueue(){if(o){return}var e=runTimeout(cleanUpNextTick);o=true;var t=i.length;while(t){u=i;i=[];while(++a<t){if(u){u[a].run()}}a=-1;t=i.length}u=null;o=false;runClearTimeout(e)}t.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1){for(var r=1;r<arguments.length;r++){t[r-1]=arguments[r]}}i.push(new Item(e,t));if(i.length===1&&!o){runTimeout(drainQueue)}};function Item(e,t){this.fun=e;this.array=t}Item.prototype.run=function(){this.fun.apply(null,this.array)};t.title=\"browser\";t.browser=true;t.env={};t.argv=[];t.version=\"\";t.versions={};function noop(){}t.on=noop;t.addListener=noop;t.once=noop;t.off=noop;t.removeListener=noop;t.removeAllListeners=noop;t.emit=noop;t.prependListener=noop;t.prependOnceListener=noop;t.listeners=function(e){return[]};t.binding=function(e){throw new Error(\"process.binding is not supported\")};t.cwd=function(){return\"/\"};t.chdir=function(e){throw new Error(\"process.chdir is not supported\")};t.umask=function(){return 0}}};var t={};function __nccwpck_require__(r){var n=t[r];if(n!==undefined){return n.exports}var i=t[r]={exports:{}};var o=true;try{e[r](i,i.exports,__nccwpck_require__);o=false}finally{if(o)delete t[r]}return i.exports}if(typeof __nccwpck_require__!==\"undefined\")__nccwpck_require__.ab=__dirname+\"/\";var r=__nccwpck_require__(229);module.exports=r})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvY29tcGlsZWQvcHJvY2Vzcy9icm93c2VyLmpzIiwibWFwcGluZ3MiOiI7QUFBQSxZQUFZLE9BQU8sZ0JBQWdCLG1CQUFtQixNQUFNLE1BQU0sNEJBQTRCLG1EQUFtRCwrQkFBK0IscURBQXFELFlBQVksSUFBSSxtQ0FBbUMsYUFBYSxLQUFLLG9CQUFvQixTQUFTLG1CQUFtQixJQUFJLHFDQUFxQyxlQUFlLEtBQUssdUJBQXVCLFNBQVMsdUJBQXVCLElBQUksdUJBQXVCLG1CQUFtQix1QkFBdUIsMkNBQTJDLGFBQWEsdUJBQXVCLElBQUksY0FBYyxTQUFTLElBQUksd0JBQXdCLFNBQVMsMEJBQTBCLDRCQUE0QixxQkFBcUIsdUJBQXVCLGdEQUFnRCxlQUFlLHVCQUF1QixJQUFJLFlBQVksU0FBUyxJQUFJLHNCQUFzQixTQUFTLHdCQUF3QixTQUFTLFlBQVksTUFBTSxTQUFTLDJCQUEyQixXQUFXLE9BQU8sUUFBUSxhQUFhLGNBQWMsS0FBSyxLQUFLLGFBQWEsY0FBYyxzQkFBc0IsTUFBTSxPQUFPLGtDQUFrQyxPQUFPLGVBQWUsU0FBUyxJQUFJLEtBQUssYUFBYSxNQUFNLFlBQVksS0FBSyxXQUFXLE9BQU8sUUFBUSxtQkFBbUIsdUJBQXVCLG9DQUFvQyx1QkFBdUIsWUFBWSxtQkFBbUIsS0FBSyxxQkFBcUIsc0JBQXNCLHFCQUFxQix5QkFBeUIsbUJBQW1CLFdBQVcsYUFBYSw4QkFBOEIsaUNBQWlDLGtCQUFrQixlQUFlLFNBQVMsVUFBVSxhQUFhLGNBQWMsaUJBQWlCLFVBQVUsbUJBQW1CLFlBQVksV0FBVyxzQkFBc0IsMEJBQTBCLFlBQVksdUJBQXVCLDJCQUEyQix3QkFBd0IsVUFBVSxzQkFBc0IscURBQXFELGlCQUFpQixXQUFXLG9CQUFvQixtREFBbUQsbUJBQW1CLFlBQVksU0FBUyxnQ0FBZ0MsV0FBVyxrQkFBa0IsaUJBQWlCLFlBQVksWUFBWSxXQUFXLElBQUksc0NBQXNDLFFBQVEsUUFBUSxpQkFBaUIsaUJBQWlCLG1FQUFtRSxTQUFTLEtBQUssK0JBQStCLGlCQUFpQiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NvbXBpbGVkL3Byb2Nlc3MvYnJvd3Nlci5qcz9hNjQ1Il0sInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbigpe3ZhciBlPXsyMjk6ZnVuY3Rpb24oZSl7dmFyIHQ9ZS5leHBvcnRzPXt9O3ZhciByO3ZhciBuO2Z1bmN0aW9uIGRlZmF1bHRTZXRUaW1vdXQoKXt0aHJvdyBuZXcgRXJyb3IoXCJzZXRUaW1lb3V0IGhhcyBub3QgYmVlbiBkZWZpbmVkXCIpfWZ1bmN0aW9uIGRlZmF1bHRDbGVhclRpbWVvdXQoKXt0aHJvdyBuZXcgRXJyb3IoXCJjbGVhclRpbWVvdXQgaGFzIG5vdCBiZWVuIGRlZmluZWRcIil9KGZ1bmN0aW9uKCl7dHJ5e2lmKHR5cGVvZiBzZXRUaW1lb3V0PT09XCJmdW5jdGlvblwiKXtyPXNldFRpbWVvdXR9ZWxzZXtyPWRlZmF1bHRTZXRUaW1vdXR9fWNhdGNoKGUpe3I9ZGVmYXVsdFNldFRpbW91dH10cnl7aWYodHlwZW9mIGNsZWFyVGltZW91dD09PVwiZnVuY3Rpb25cIil7bj1jbGVhclRpbWVvdXR9ZWxzZXtuPWRlZmF1bHRDbGVhclRpbWVvdXR9fWNhdGNoKGUpe249ZGVmYXVsdENsZWFyVGltZW91dH19KSgpO2Z1bmN0aW9uIHJ1blRpbWVvdXQoZSl7aWYocj09PXNldFRpbWVvdXQpe3JldHVybiBzZXRUaW1lb3V0KGUsMCl9aWYoKHI9PT1kZWZhdWx0U2V0VGltb3V0fHwhcikmJnNldFRpbWVvdXQpe3I9c2V0VGltZW91dDtyZXR1cm4gc2V0VGltZW91dChlLDApfXRyeXtyZXR1cm4gcihlLDApfWNhdGNoKHQpe3RyeXtyZXR1cm4gci5jYWxsKG51bGwsZSwwKX1jYXRjaCh0KXtyZXR1cm4gci5jYWxsKHRoaXMsZSwwKX19fWZ1bmN0aW9uIHJ1bkNsZWFyVGltZW91dChlKXtpZihuPT09Y2xlYXJUaW1lb3V0KXtyZXR1cm4gY2xlYXJUaW1lb3V0KGUpfWlmKChuPT09ZGVmYXVsdENsZWFyVGltZW91dHx8IW4pJiZjbGVhclRpbWVvdXQpe249Y2xlYXJUaW1lb3V0O3JldHVybiBjbGVhclRpbWVvdXQoZSl9dHJ5e3JldHVybiBuKGUpfWNhdGNoKHQpe3RyeXtyZXR1cm4gbi5jYWxsKG51bGwsZSl9Y2F0Y2godCl7cmV0dXJuIG4uY2FsbCh0aGlzLGUpfX19dmFyIGk9W107dmFyIG89ZmFsc2U7dmFyIHU7dmFyIGE9LTE7ZnVuY3Rpb24gY2xlYW5VcE5leHRUaWNrKCl7aWYoIW98fCF1KXtyZXR1cm59bz1mYWxzZTtpZih1Lmxlbmd0aCl7aT11LmNvbmNhdChpKX1lbHNle2E9LTF9aWYoaS5sZW5ndGgpe2RyYWluUXVldWUoKX19ZnVuY3Rpb24gZHJhaW5RdWV1ZSgpe2lmKG8pe3JldHVybn12YXIgZT1ydW5UaW1lb3V0KGNsZWFuVXBOZXh0VGljayk7bz10cnVlO3ZhciB0PWkubGVuZ3RoO3doaWxlKHQpe3U9aTtpPVtdO3doaWxlKCsrYTx0KXtpZih1KXt1W2FdLnJ1bigpfX1hPS0xO3Q9aS5sZW5ndGh9dT1udWxsO289ZmFsc2U7cnVuQ2xlYXJUaW1lb3V0KGUpfXQubmV4dFRpY2s9ZnVuY3Rpb24oZSl7dmFyIHQ9bmV3IEFycmF5KGFyZ3VtZW50cy5sZW5ndGgtMSk7aWYoYXJndW1lbnRzLmxlbmd0aD4xKXtmb3IodmFyIHI9MTtyPGFyZ3VtZW50cy5sZW5ndGg7cisrKXt0W3ItMV09YXJndW1lbnRzW3JdfX1pLnB1c2gobmV3IEl0ZW0oZSx0KSk7aWYoaS5sZW5ndGg9PT0xJiYhbyl7cnVuVGltZW91dChkcmFpblF1ZXVlKX19O2Z1bmN0aW9uIEl0ZW0oZSx0KXt0aGlzLmZ1bj1lO3RoaXMuYXJyYXk9dH1JdGVtLnByb3RvdHlwZS5ydW49ZnVuY3Rpb24oKXt0aGlzLmZ1bi5hcHBseShudWxsLHRoaXMuYXJyYXkpfTt0LnRpdGxlPVwiYnJvd3NlclwiO3QuYnJvd3Nlcj10cnVlO3QuZW52PXt9O3QuYXJndj1bXTt0LnZlcnNpb249XCJcIjt0LnZlcnNpb25zPXt9O2Z1bmN0aW9uIG5vb3AoKXt9dC5vbj1ub29wO3QuYWRkTGlzdGVuZXI9bm9vcDt0Lm9uY2U9bm9vcDt0Lm9mZj1ub29wO3QucmVtb3ZlTGlzdGVuZXI9bm9vcDt0LnJlbW92ZUFsbExpc3RlbmVycz1ub29wO3QuZW1pdD1ub29wO3QucHJlcGVuZExpc3RlbmVyPW5vb3A7dC5wcmVwZW5kT25jZUxpc3RlbmVyPW5vb3A7dC5saXN0ZW5lcnM9ZnVuY3Rpb24oZSl7cmV0dXJuW119O3QuYmluZGluZz1mdW5jdGlvbihlKXt0aHJvdyBuZXcgRXJyb3IoXCJwcm9jZXNzLmJpbmRpbmcgaXMgbm90IHN1cHBvcnRlZFwiKX07dC5jd2Q9ZnVuY3Rpb24oKXtyZXR1cm5cIi9cIn07dC5jaGRpcj1mdW5jdGlvbihlKXt0aHJvdyBuZXcgRXJyb3IoXCJwcm9jZXNzLmNoZGlyIGlzIG5vdCBzdXBwb3J0ZWRcIil9O3QudW1hc2s9ZnVuY3Rpb24oKXtyZXR1cm4gMH19fTt2YXIgdD17fTtmdW5jdGlvbiBfX25jY3dwY2tfcmVxdWlyZV9fKHIpe3ZhciBuPXRbcl07aWYobiE9PXVuZGVmaW5lZCl7cmV0dXJuIG4uZXhwb3J0c312YXIgaT10W3JdPXtleHBvcnRzOnt9fTt2YXIgbz10cnVlO3RyeXtlW3JdKGksaS5leHBvcnRzLF9fbmNjd3Bja19yZXF1aXJlX18pO289ZmFsc2V9ZmluYWxseXtpZihvKWRlbGV0ZSB0W3JdfXJldHVybiBpLmV4cG9ydHN9aWYodHlwZW9mIF9fbmNjd3Bja19yZXF1aXJlX18hPT1cInVuZGVmaW5lZFwiKV9fbmNjd3Bja19yZXF1aXJlX18uYWI9X19kaXJuYW1lK1wiL1wiO3ZhciByPV9fbmNjd3Bja19yZXF1aXJlX18oMjI5KTttb2R1bGUuZXhwb3J0cz1yfSkoKTsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/next/dist/compiled/process/browser.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@stagewise/toolbar-react/dist/index.js":
/*!*************************************************************!*\
  !*** ./node_modules/@stagewise/toolbar-react/dist/index.js ***!
  \*************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   StagewiseToolbar: function() { return /* binding */ StagewiseToolbar; }\n/* harmony export */ });\n/* harmony import */ var _stagewise_toolbar__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @stagewise/toolbar */ \"(app-pages-browser)/./node_modules/@stagewise/toolbar/dist/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n\n\nfunction StagewiseToolbar({ config }) {\n  const isLoaded = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(false);\n  (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(() => {\n    if (isLoaded.current) return;\n    isLoaded.current = true;\n    (0,_stagewise_toolbar__WEBPACK_IMPORTED_MODULE_0__.initToolbar)(config);\n  }, [config]);\n  return null;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9Ac3RhZ2V3aXNlL3Rvb2xiYXItcmVhY3QvZGlzdC9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBaUQ7QUFDUDtBQUMxQyw0QkFBNEIsUUFBUTtBQUNwQyxtQkFBbUIsNkNBQU07QUFDekIsRUFBRSxnREFBUztBQUNYO0FBQ0E7QUFDQSxJQUFJLCtEQUFXO0FBQ2YsR0FBRztBQUNIO0FBQ0E7QUFHRSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQHN0YWdld2lzZS90b29sYmFyLXJlYWN0L2Rpc3QvaW5kZXguanM/NzdjMiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBpbml0VG9vbGJhciB9IGZyb20gXCJAc3RhZ2V3aXNlL3Rvb2xiYXJcIjtcbmltcG9ydCB7IHVzZVJlZiwgdXNlRWZmZWN0IH0gZnJvbSBcInJlYWN0XCI7XG5mdW5jdGlvbiBTdGFnZXdpc2VUb29sYmFyKHsgY29uZmlnIH0pIHtcbiAgY29uc3QgaXNMb2FkZWQgPSB1c2VSZWYoZmFsc2UpO1xuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmIChpc0xvYWRlZC5jdXJyZW50KSByZXR1cm47XG4gICAgaXNMb2FkZWQuY3VycmVudCA9IHRydWU7XG4gICAgaW5pdFRvb2xiYXIoY29uZmlnKTtcbiAgfSwgW2NvbmZpZ10pO1xuICByZXR1cm4gbnVsbDtcbn1cbmV4cG9ydCB7XG4gIFN0YWdld2lzZVRvb2xiYXJcbn07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@stagewise/toolbar-react/dist/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@stagewise/toolbar/dist/index.js":
/*!*******************************************************!*\
  !*** ./node_modules/@stagewise/toolbar/dist/index.js ***!
  \*******************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   initToolbar: function() { return /* binding */ initToolbar; }\n/* harmony export */ });\n/* provided dependency */ var process = __webpack_require__(/*! process */ \"(app-pages-browser)/./node_modules/next/dist/build/polyfills/process.js\");\nvar n$4, l$4, u$a, i$8, r$5, o$9, e$5, f$9, c$7, s$9, a$b, h$6, p$4 = {}, y$7 = [], v$3 = /acit|ex(?:s|g|n|p|$)|rph|grid|ows|mnc|ntw|ine[ch]|zoo|^ord|itera/i, w$5 = Array.isArray;\nfunction d$5(n2, l2) {\n  for (var u2 in l2) n2[u2] = l2[u2];\n  return n2;\n}\nfunction g$4(n2) {\n  n2 && n2.parentNode && n2.parentNode.removeChild(n2);\n}\nfunction _$4(l2, u2, t2) {\n  var i2, r2, o3, e2 = {};\n  for (o3 in u2) \"key\" == o3 ? i2 = u2[o3] : \"ref\" == o3 ? r2 = u2[o3] : e2[o3] = u2[o3];\n  if (arguments.length > 2 && (e2.children = arguments.length > 3 ? n$4.call(arguments, 2) : t2), \"function\" == typeof l2 && null != l2.defaultProps) for (o3 in l2.defaultProps) null == e2[o3] && (e2[o3] = l2.defaultProps[o3]);\n  return m$6(l2, e2, i2, r2, null);\n}\nfunction m$6(n2, t2, i2, r2, o3) {\n  var e2 = { type: n2, props: t2, key: i2, ref: r2, __k: null, __: null, __b: 0, __e: null, __c: null, constructor: void 0, __v: null == o3 ? ++u$a : o3, __i: -1, __u: 0 };\n  return null == o3 && null != l$4.vnode && l$4.vnode(e2), e2;\n}\nfunction b$5() {\n  return { current: null };\n}\nfunction k$3(n2) {\n  return n2.children;\n}\nfunction x$5(n2, l2) {\n  this.props = n2, this.context = l2;\n}\nfunction S$5(n2, l2) {\n  if (null == l2) return n2.__ ? S$5(n2.__, n2.__i + 1) : null;\n  for (var u2; l2 < n2.__k.length; l2++) if (null != (u2 = n2.__k[l2]) && null != u2.__e) return u2.__e;\n  return \"function\" == typeof n2.type ? S$5(n2) : null;\n}\nfunction C$5(n2) {\n  var l2, u2;\n  if (null != (n2 = n2.__) && null != n2.__c) {\n    for (n2.__e = n2.__c.base = null, l2 = 0; l2 < n2.__k.length; l2++) if (null != (u2 = n2.__k[l2]) && null != u2.__e) {\n      n2.__e = n2.__c.base = u2.__e;\n      break;\n    }\n    return C$5(n2);\n  }\n}\nfunction M$4(n2) {\n  (!n2.__d && (n2.__d = true) && i$8.push(n2) && !$$2.__r++ || r$5 != l$4.debounceRendering) && ((r$5 = l$4.debounceRendering) || o$9)($$2);\n}\nfunction $$2() {\n  for (var n2, u2, t2, r2, o3, f2, c2, s2 = 1; i$8.length; ) i$8.length > s2 && i$8.sort(e$5), n2 = i$8.shift(), s2 = i$8.length, n2.__d && (t2 = void 0, o3 = (r2 = (u2 = n2).__v).__e, f2 = [], c2 = [], u2.__P && ((t2 = d$5({}, r2)).__v = r2.__v + 1, l$4.vnode && l$4.vnode(t2), O$3(u2.__P, t2, r2, u2.__n, u2.__P.namespaceURI, 32 & r2.__u ? [o3] : null, f2, null == o3 ? S$5(r2) : o3, !!(32 & r2.__u), c2), t2.__v = r2.__v, t2.__.__k[t2.__i] = t2, z$3(f2, t2, c2), t2.__e != o3 && C$5(t2)));\n  $$2.__r = 0;\n}\nfunction I$4(n2, l2, u2, t2, i2, r2, o3, e2, f2, c2, s2) {\n  var a3, h2, v2, w2, d2, g2, _2 = t2 && t2.__k || y$7, m2 = l2.length;\n  for (f2 = P$6(u2, l2, _2, f2, m2), a3 = 0; a3 < m2; a3++) null != (v2 = u2.__k[a3]) && (h2 = -1 == v2.__i ? p$4 : _2[v2.__i] || p$4, v2.__i = a3, g2 = O$3(n2, v2, h2, i2, r2, o3, e2, f2, c2, s2), w2 = v2.__e, v2.ref && h2.ref != v2.ref && (h2.ref && q$4(h2.ref, null, v2), s2.push(v2.ref, v2.__c || w2, v2)), null == d2 && null != w2 && (d2 = w2), 4 & v2.__u || h2.__k === v2.__k ? f2 = A$4(v2, f2, n2) : \"function\" == typeof v2.type && void 0 !== g2 ? f2 = g2 : w2 && (f2 = w2.nextSibling), v2.__u &= -7);\n  return u2.__e = d2, f2;\n}\nfunction P$6(n2, l2, u2, t2, i2) {\n  var r2, o3, e2, f2, c2, s2 = u2.length, a3 = s2, h2 = 0;\n  for (n2.__k = new Array(i2), r2 = 0; r2 < i2; r2++) null != (o3 = l2[r2]) && \"boolean\" != typeof o3 && \"function\" != typeof o3 ? (f2 = r2 + h2, (o3 = n2.__k[r2] = \"string\" == typeof o3 || \"number\" == typeof o3 || \"bigint\" == typeof o3 || o3.constructor == String ? m$6(null, o3, null, null, null) : w$5(o3) ? m$6(k$3, { children: o3 }, null, null, null) : null == o3.constructor && o3.__b > 0 ? m$6(o3.type, o3.props, o3.key, o3.ref ? o3.ref : null, o3.__v) : o3).__ = n2, o3.__b = n2.__b + 1, e2 = null, -1 != (c2 = o3.__i = L$4(o3, u2, f2, a3)) && (a3--, (e2 = u2[c2]) && (e2.__u |= 2)), null == e2 || null == e2.__v ? (-1 == c2 && (i2 > s2 ? h2-- : i2 < s2 && h2++), \"function\" != typeof o3.type && (o3.__u |= 4)) : c2 != f2 && (c2 == f2 - 1 ? h2-- : c2 == f2 + 1 ? h2++ : (c2 > f2 ? h2-- : h2++, o3.__u |= 4))) : n2.__k[r2] = null;\n  if (a3) for (r2 = 0; r2 < s2; r2++) null != (e2 = u2[r2]) && 0 == (2 & e2.__u) && (e2.__e == t2 && (t2 = S$5(e2)), B$3(e2, e2));\n  return t2;\n}\nfunction A$4(n2, l2, u2) {\n  var t2, i2;\n  if (\"function\" == typeof n2.type) {\n    for (t2 = n2.__k, i2 = 0; t2 && i2 < t2.length; i2++) t2[i2] && (t2[i2].__ = n2, l2 = A$4(t2[i2], l2, u2));\n    return l2;\n  }\n  n2.__e != l2 && (l2 && n2.type && !u2.contains(l2) && (l2 = S$5(n2)), u2.insertBefore(n2.__e, l2 || null), l2 = n2.__e);\n  do {\n    l2 = l2 && l2.nextSibling;\n  } while (null != l2 && 8 == l2.nodeType);\n  return l2;\n}\nfunction H$6(n2, l2) {\n  return l2 = l2 || [], null == n2 || \"boolean\" == typeof n2 || (w$5(n2) ? n2.some(function(n3) {\n    H$6(n3, l2);\n  }) : l2.push(n2)), l2;\n}\nfunction L$4(n2, l2, u2, t2) {\n  var i2, r2, o3 = n2.key, e2 = n2.type, f2 = l2[u2];\n  if (null === f2 && null == n2.key || f2 && o3 == f2.key && e2 == f2.type && 0 == (2 & f2.__u)) return u2;\n  if (t2 > (null != f2 && 0 == (2 & f2.__u) ? 1 : 0)) for (i2 = u2 - 1, r2 = u2 + 1; i2 >= 0 || r2 < l2.length; ) {\n    if (i2 >= 0) {\n      if ((f2 = l2[i2]) && 0 == (2 & f2.__u) && o3 == f2.key && e2 == f2.type) return i2;\n      i2--;\n    }\n    if (r2 < l2.length) {\n      if ((f2 = l2[r2]) && 0 == (2 & f2.__u) && o3 == f2.key && e2 == f2.type) return r2;\n      r2++;\n    }\n  }\n  return -1;\n}\nfunction T$6(n2, l2, u2) {\n  \"-\" == l2[0] ? n2.setProperty(l2, null == u2 ? \"\" : u2) : n2[l2] = null == u2 ? \"\" : \"number\" != typeof u2 || v$3.test(l2) ? u2 : u2 + \"px\";\n}\nfunction j$5(n2, l2, u2, t2, i2) {\n  var r2;\n  n: if (\"style\" == l2) if (\"string\" == typeof u2) n2.style.cssText = u2;\n  else {\n    if (\"string\" == typeof t2 && (n2.style.cssText = t2 = \"\"), t2) for (l2 in t2) u2 && l2 in u2 || T$6(n2.style, l2, \"\");\n    if (u2) for (l2 in u2) t2 && u2[l2] == t2[l2] || T$6(n2.style, l2, u2[l2]);\n  }\n  else if (\"o\" == l2[0] && \"n\" == l2[1]) r2 = l2 != (l2 = l2.replace(f$9, \"$1\")), l2 = l2.toLowerCase() in n2 || \"onFocusOut\" == l2 || \"onFocusIn\" == l2 ? l2.toLowerCase().slice(2) : l2.slice(2), n2.l || (n2.l = {}), n2.l[l2 + r2] = u2, u2 ? t2 ? u2.u = t2.u : (u2.u = c$7, n2.addEventListener(l2, r2 ? a$b : s$9, r2)) : n2.removeEventListener(l2, r2 ? a$b : s$9, r2);\n  else {\n    if (\"http://www.w3.org/2000/svg\" == i2) l2 = l2.replace(/xlink(H|:h)/, \"h\").replace(/sName$/, \"s\");\n    else if (\"width\" != l2 && \"height\" != l2 && \"href\" != l2 && \"list\" != l2 && \"form\" != l2 && \"tabIndex\" != l2 && \"download\" != l2 && \"rowSpan\" != l2 && \"colSpan\" != l2 && \"role\" != l2 && \"popover\" != l2 && l2 in n2) try {\n      n2[l2] = null == u2 ? \"\" : u2;\n      break n;\n    } catch (n3) {\n    }\n    \"function\" == typeof u2 || (null == u2 || false === u2 && \"-\" != l2[4] ? n2.removeAttribute(l2) : n2.setAttribute(l2, \"popover\" == l2 && 1 == u2 ? \"\" : u2));\n  }\n}\nfunction F$6(n2) {\n  return function(u2) {\n    if (this.l) {\n      var t2 = this.l[u2.type + n2];\n      if (null == u2.t) u2.t = c$7++;\n      else if (u2.t < t2.u) return;\n      return t2(l$4.event ? l$4.event(u2) : u2);\n    }\n  };\n}\nfunction O$3(n2, u2, t2, i2, r2, o3, e2, f2, c2, s2) {\n  var a3, h2, p2, y2, v2, _2, m2, b2, S2, C2, M2, $2, P2, A2, H2, L2, T2, j2 = u2.type;\n  if (null != u2.constructor) return null;\n  128 & t2.__u && (c2 = !!(32 & t2.__u), o3 = [f2 = u2.__e = t2.__e]), (a3 = l$4.__b) && a3(u2);\n  n: if (\"function\" == typeof j2) try {\n    if (b2 = u2.props, S2 = \"prototype\" in j2 && j2.prototype.render, C2 = (a3 = j2.contextType) && i2[a3.__c], M2 = a3 ? C2 ? C2.props.value : a3.__ : i2, t2.__c ? m2 = (h2 = u2.__c = t2.__c).__ = h2.__E : (S2 ? u2.__c = h2 = new j2(b2, M2) : (u2.__c = h2 = new x$5(b2, M2), h2.constructor = j2, h2.render = D$3), C2 && C2.sub(h2), h2.props = b2, h2.state || (h2.state = {}), h2.context = M2, h2.__n = i2, p2 = h2.__d = true, h2.__h = [], h2._sb = []), S2 && null == h2.__s && (h2.__s = h2.state), S2 && null != j2.getDerivedStateFromProps && (h2.__s == h2.state && (h2.__s = d$5({}, h2.__s)), d$5(h2.__s, j2.getDerivedStateFromProps(b2, h2.__s))), y2 = h2.props, v2 = h2.state, h2.__v = u2, p2) S2 && null == j2.getDerivedStateFromProps && null != h2.componentWillMount && h2.componentWillMount(), S2 && null != h2.componentDidMount && h2.__h.push(h2.componentDidMount);\n    else {\n      if (S2 && null == j2.getDerivedStateFromProps && b2 !== y2 && null != h2.componentWillReceiveProps && h2.componentWillReceiveProps(b2, M2), !h2.__e && null != h2.shouldComponentUpdate && false === h2.shouldComponentUpdate(b2, h2.__s, M2) || u2.__v == t2.__v) {\n        for (u2.__v != t2.__v && (h2.props = b2, h2.state = h2.__s, h2.__d = false), u2.__e = t2.__e, u2.__k = t2.__k, u2.__k.some(function(n3) {\n          n3 && (n3.__ = u2);\n        }), $2 = 0; $2 < h2._sb.length; $2++) h2.__h.push(h2._sb[$2]);\n        h2._sb = [], h2.__h.length && e2.push(h2);\n        break n;\n      }\n      null != h2.componentWillUpdate && h2.componentWillUpdate(b2, h2.__s, M2), S2 && null != h2.componentDidUpdate && h2.__h.push(function() {\n        h2.componentDidUpdate(y2, v2, _2);\n      });\n    }\n    if (h2.context = M2, h2.props = b2, h2.__P = n2, h2.__e = false, P2 = l$4.__r, A2 = 0, S2) {\n      for (h2.state = h2.__s, h2.__d = false, P2 && P2(u2), a3 = h2.render(h2.props, h2.state, h2.context), H2 = 0; H2 < h2._sb.length; H2++) h2.__h.push(h2._sb[H2]);\n      h2._sb = [];\n    } else do {\n      h2.__d = false, P2 && P2(u2), a3 = h2.render(h2.props, h2.state, h2.context), h2.state = h2.__s;\n    } while (h2.__d && ++A2 < 25);\n    h2.state = h2.__s, null != h2.getChildContext && (i2 = d$5(d$5({}, i2), h2.getChildContext())), S2 && !p2 && null != h2.getSnapshotBeforeUpdate && (_2 = h2.getSnapshotBeforeUpdate(y2, v2)), L2 = a3, null != a3 && a3.type === k$3 && null == a3.key && (L2 = N$2(a3.props.children)), f2 = I$4(n2, w$5(L2) ? L2 : [L2], u2, t2, i2, r2, o3, e2, f2, c2, s2), h2.base = u2.__e, u2.__u &= -161, h2.__h.length && e2.push(h2), m2 && (h2.__E = h2.__ = null);\n  } catch (n3) {\n    if (u2.__v = null, c2 || null != o3) if (n3.then) {\n      for (u2.__u |= c2 ? 160 : 128; f2 && 8 == f2.nodeType && f2.nextSibling; ) f2 = f2.nextSibling;\n      o3[o3.indexOf(f2)] = null, u2.__e = f2;\n    } else for (T2 = o3.length; T2--; ) g$4(o3[T2]);\n    else u2.__e = t2.__e, u2.__k = t2.__k;\n    l$4.__e(n3, u2, t2);\n  }\n  else null == o3 && u2.__v == t2.__v ? (u2.__k = t2.__k, u2.__e = t2.__e) : f2 = u2.__e = V$2(t2.__e, u2, t2, i2, r2, o3, e2, c2, s2);\n  return (a3 = l$4.diffed) && a3(u2), 128 & u2.__u ? void 0 : f2;\n}\nfunction z$3(n2, u2, t2) {\n  for (var i2 = 0; i2 < t2.length; i2++) q$4(t2[i2], t2[++i2], t2[++i2]);\n  l$4.__c && l$4.__c(u2, n2), n2.some(function(u3) {\n    try {\n      n2 = u3.__h, u3.__h = [], n2.some(function(n3) {\n        n3.call(u3);\n      });\n    } catch (n3) {\n      l$4.__e(n3, u3.__v);\n    }\n  });\n}\nfunction N$2(n2) {\n  return \"object\" != typeof n2 || null == n2 || n2.__b && n2.__b > 0 ? n2 : w$5(n2) ? n2.map(N$2) : d$5({}, n2);\n}\nfunction V$2(u2, t2, i2, r2, o3, e2, f2, c2, s2) {\n  var a3, h2, y2, v2, d2, _2, m2, b2 = i2.props, k2 = t2.props, x2 = t2.type;\n  if (\"svg\" == x2 ? o3 = \"http://www.w3.org/2000/svg\" : \"math\" == x2 ? o3 = \"http://www.w3.org/1998/Math/MathML\" : o3 || (o3 = \"http://www.w3.org/1999/xhtml\"), null != e2) {\n    for (a3 = 0; a3 < e2.length; a3++) if ((d2 = e2[a3]) && \"setAttribute\" in d2 == !!x2 && (x2 ? d2.localName == x2 : 3 == d2.nodeType)) {\n      u2 = d2, e2[a3] = null;\n      break;\n    }\n  }\n  if (null == u2) {\n    if (null == x2) return document.createTextNode(k2);\n    u2 = document.createElementNS(o3, x2, k2.is && k2), c2 && (l$4.__m && l$4.__m(t2, e2), c2 = false), e2 = null;\n  }\n  if (null == x2) b2 === k2 || c2 && u2.data == k2 || (u2.data = k2);\n  else {\n    if (e2 = e2 && n$4.call(u2.childNodes), b2 = i2.props || p$4, !c2 && null != e2) for (b2 = {}, a3 = 0; a3 < u2.attributes.length; a3++) b2[(d2 = u2.attributes[a3]).name] = d2.value;\n    for (a3 in b2) if (d2 = b2[a3], \"children\" == a3) ;\n    else if (\"dangerouslySetInnerHTML\" == a3) y2 = d2;\n    else if (!(a3 in k2)) {\n      if (\"value\" == a3 && \"defaultValue\" in k2 || \"checked\" == a3 && \"defaultChecked\" in k2) continue;\n      j$5(u2, a3, null, d2, o3);\n    }\n    for (a3 in k2) d2 = k2[a3], \"children\" == a3 ? v2 = d2 : \"dangerouslySetInnerHTML\" == a3 ? h2 = d2 : \"value\" == a3 ? _2 = d2 : \"checked\" == a3 ? m2 = d2 : c2 && \"function\" != typeof d2 || b2[a3] === d2 || j$5(u2, a3, d2, b2[a3], o3);\n    if (h2) c2 || y2 && (h2.__html == y2.__html || h2.__html == u2.innerHTML) || (u2.innerHTML = h2.__html), t2.__k = [];\n    else if (y2 && (u2.innerHTML = \"\"), I$4(\"template\" == t2.type ? u2.content : u2, w$5(v2) ? v2 : [v2], t2, i2, r2, \"foreignObject\" == x2 ? \"http://www.w3.org/1999/xhtml\" : o3, e2, f2, e2 ? e2[0] : i2.__k && S$5(i2, 0), c2, s2), null != e2) for (a3 = e2.length; a3--; ) g$4(e2[a3]);\n    c2 || (a3 = \"value\", \"progress\" == x2 && null == _2 ? u2.removeAttribute(\"value\") : null != _2 && (_2 !== u2[a3] || \"progress\" == x2 && !_2 || \"option\" == x2 && _2 != b2[a3]) && j$5(u2, a3, _2, b2[a3], o3), a3 = \"checked\", null != m2 && m2 != u2[a3] && j$5(u2, a3, m2, b2[a3], o3));\n  }\n  return u2;\n}\nfunction q$4(n2, u2, t2) {\n  try {\n    if (\"function\" == typeof n2) {\n      var i2 = \"function\" == typeof n2.__u;\n      i2 && n2.__u(), i2 && null == u2 || (n2.__u = n2(u2));\n    } else n2.current = u2;\n  } catch (n3) {\n    l$4.__e(n3, t2);\n  }\n}\nfunction B$3(n2, u2, t2) {\n  var i2, r2;\n  if (l$4.unmount && l$4.unmount(n2), (i2 = n2.ref) && (i2.current && i2.current != n2.__e || q$4(i2, null, u2)), null != (i2 = n2.__c)) {\n    if (i2.componentWillUnmount) try {\n      i2.componentWillUnmount();\n    } catch (n3) {\n      l$4.__e(n3, u2);\n    }\n    i2.base = i2.__P = null;\n  }\n  if (i2 = n2.__k) for (r2 = 0; r2 < i2.length; r2++) i2[r2] && B$3(i2[r2], u2, t2 || \"function\" != typeof n2.type);\n  t2 || g$4(n2.__e), n2.__c = n2.__ = n2.__e = void 0;\n}\nfunction D$3(n2, l2, u2) {\n  return this.constructor(n2, u2);\n}\nfunction E$3(u2, t2, i2) {\n  var r2, o3, e2, f2;\n  t2 == document && (t2 = document.documentElement), l$4.__ && l$4.__(u2, t2), o3 = (r2 = \"function\" == typeof i2) ? null : i2 && i2.__k || t2.__k, e2 = [], f2 = [], O$3(t2, u2 = (!r2 && i2 || t2).__k = _$4(k$3, null, [u2]), o3 || p$4, p$4, t2.namespaceURI, !r2 && i2 ? [i2] : o3 ? null : t2.firstChild ? n$4.call(t2.childNodes) : null, e2, !r2 && i2 ? i2 : o3 ? o3.__e : t2.firstChild, r2, f2), z$3(e2, u2, f2);\n}\nfunction G$3(n2, l2) {\n  E$3(n2, l2, G$3);\n}\nfunction J$4(l2, u2, t2) {\n  var i2, r2, o3, e2, f2 = d$5({}, l2.props);\n  for (o3 in l2.type && l2.type.defaultProps && (e2 = l2.type.defaultProps), u2) \"key\" == o3 ? i2 = u2[o3] : \"ref\" == o3 ? r2 = u2[o3] : f2[o3] = null == u2[o3] && null != e2 ? e2[o3] : u2[o3];\n  return arguments.length > 2 && (f2.children = arguments.length > 3 ? n$4.call(arguments, 2) : t2), m$6(l2.type, f2, i2 || l2.key, r2 || l2.ref, null);\n}\nfunction K$3(n2) {\n  function l2(n3) {\n    var u2, t2;\n    return this.getChildContext || (u2 = /* @__PURE__ */ new Set(), (t2 = {})[l2.__c] = this, this.getChildContext = function() {\n      return t2;\n    }, this.componentWillUnmount = function() {\n      u2 = null;\n    }, this.shouldComponentUpdate = function(n4) {\n      this.props.value != n4.value && u2.forEach(function(n5) {\n        n5.__e = true, M$4(n5);\n      });\n    }, this.sub = function(n4) {\n      u2.add(n4);\n      var l3 = n4.componentWillUnmount;\n      n4.componentWillUnmount = function() {\n        u2 && u2.delete(n4), l3 && l3.call(n4);\n      };\n    }), n3.children;\n  }\n  return l2.__c = \"__cC\" + h$6++, l2.__ = n2, l2.Provider = l2.__l = (l2.Consumer = function(n3, l3) {\n    return n3.children(l3);\n  }).contextType = l2, l2;\n}\nn$4 = y$7.slice, l$4 = { __e: function(n2, l2, u2, t2) {\n  for (var i2, r2, o3; l2 = l2.__; ) if ((i2 = l2.__c) && !i2.__) try {\n    if ((r2 = i2.constructor) && null != r2.getDerivedStateFromError && (i2.setState(r2.getDerivedStateFromError(n2)), o3 = i2.__d), null != i2.componentDidCatch && (i2.componentDidCatch(n2, t2 || {}), o3 = i2.__d), o3) return i2.__E = i2;\n  } catch (l3) {\n    n2 = l3;\n  }\n  throw n2;\n} }, u$a = 0, x$5.prototype.setState = function(n2, l2) {\n  var u2;\n  u2 = null != this.__s && this.__s != this.state ? this.__s : this.__s = d$5({}, this.state), \"function\" == typeof n2 && (n2 = n2(d$5({}, u2), this.props)), n2 && d$5(u2, n2), null != n2 && this.__v && (l2 && this._sb.push(l2), M$4(this));\n}, x$5.prototype.forceUpdate = function(n2) {\n  this.__v && (this.__e = true, n2 && this.__h.push(n2), M$4(this));\n}, x$5.prototype.render = k$3, i$8 = [], o$9 = \"function\" == typeof Promise ? Promise.prototype.then.bind(Promise.resolve()) : setTimeout, e$5 = function(n2, l2) {\n  return n2.__v.__b - l2.__v.__b;\n}, $$2.__r = 0, f$9 = /(PointerCapture)$|Capture$/i, c$7 = 0, s$9 = F$6(false), a$b = F$6(true), h$6 = 0;\nconst appStyle = '/*! tailwindcss v4.1.5 | MIT License | https://tailwindcss.com */\\n@layer properties{@supports ((-webkit-hyphens:none) and (not (margin-trim:inline))) or ((-moz-orient:inline) and (not (color:rgb(from red r g b)))){stagewise-companion-anchor *,stagewise-companion-anchor :before,stagewise-companion-anchor :after,stagewise-companion-anchor ::backdrop{--tw-rotate-x:initial;--tw-rotate-y:initial;--tw-rotate-z:initial;--tw-skew-x:initial;--tw-skew-y:initial;--tw-border-style:solid;--tw-gradient-position:initial;--tw-gradient-from:#0000;--tw-gradient-via:#0000;--tw-gradient-to:#0000;--tw-gradient-stops:initial;--tw-gradient-via-stops:initial;--tw-gradient-from-position:0%;--tw-gradient-via-position:50%;--tw-gradient-to-position:100%;--tw-font-weight:initial;--tw-shadow:0 0 #0000;--tw-shadow-color:initial;--tw-shadow-alpha:100%;--tw-inset-shadow:0 0 #0000;--tw-inset-shadow-color:initial;--tw-inset-shadow-alpha:100%;--tw-ring-color:initial;--tw-ring-shadow:0 0 #0000;--tw-inset-ring-color:initial;--tw-inset-ring-shadow:0 0 #0000;--tw-ring-inset:initial;--tw-ring-offset-width:0px;--tw-ring-offset-color:#fff;--tw-ring-offset-shadow:0 0 #0000;--tw-blur:initial;--tw-brightness:initial;--tw-contrast:initial;--tw-grayscale:initial;--tw-hue-rotate:initial;--tw-invert:initial;--tw-opacity:initial;--tw-saturate:initial;--tw-sepia:initial;--tw-drop-shadow:initial;--tw-drop-shadow-color:initial;--tw-drop-shadow-alpha:100%;--tw-drop-shadow-size:initial;--tw-backdrop-blur:initial;--tw-backdrop-brightness:initial;--tw-backdrop-contrast:initial;--tw-backdrop-grayscale:initial;--tw-backdrop-hue-rotate:initial;--tw-backdrop-invert:initial;--tw-backdrop-opacity:initial;--tw-backdrop-saturate:initial;--tw-backdrop-sepia:initial;--tw-duration:initial}}}@layer theme{stagewise-companion-anchor,stagewise-companion-anchor{--font-sans:ui-sans-serif,system-ui,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\",\"Segoe UI Symbol\",\"Noto Color Emoji\";--font-mono:ui-monospace,SFMono-Regular,Menlo,Monaco,Consolas,\"Liberation Mono\",\"Courier New\",monospace;--color-red-600:oklch(57.7% .245 27.325);--color-green-600:oklch(62.7% .194 149.214);--color-teal-500:oklch(70.4% .14 182.503);--color-blue-500:oklch(62.3% .214 259.815);--color-blue-600:oklch(54.6% .245 262.881);--color-indigo-700:oklch(45.7% .24 277.023);--color-indigo-950:oklch(25.7% .09 281.288);--color-rose-600:oklch(58.6% .253 17.585);--color-zinc-50:oklch(98.5% 0 0);--color-zinc-100:oklch(96.7% .001 286.375);--color-zinc-500:oklch(55.2% .016 285.938);--color-zinc-600:oklch(44.2% .017 285.786);--color-zinc-700:oklch(37% .013 285.805);--color-zinc-900:oklch(21% .006 285.885);--color-zinc-950:oklch(14.1% .005 285.823);--color-black:#000;--color-white:#fff;--spacing:.25rem;--container-sm:24rem;--text-xs:.75rem;--text-xs--line-height:calc(1/.75);--text-sm:.875rem;--text-sm--line-height:calc(1.25/.875);--text-base:1rem;--text-base--line-height:calc(1.5/1);--font-weight-normal:400;--font-weight-semibold:600;--font-weight-bold:700;--radius-md:.375rem;--radius-lg:.5rem;--radius-xl:.75rem;--radius-2xl:1rem;--radius-3xl:1.5rem;--drop-shadow-xs:0 1px 1px #0000000d;--drop-shadow-md:0 3px 3px #0000001f;--drop-shadow-xl:0 9px 7px #0000001a;--animate-pulse:pulse 2s cubic-bezier(.4,0,.6,1)infinite;--blur-xs:4px;--blur-sm:8px;--blur-md:12px;--blur-lg:16px;--default-transition-duration:.15s;--default-transition-timing-function:cubic-bezier(.4,0,.2,1);--default-font-family:var(--font-sans);--default-mono-font-family:var(--font-mono);--color-background:var(--color-white);--color-foreground:var(--color-zinc-950);--color-muted-foreground:var(--color-zinc-700);--color-border:var(--color-zinc-500)}}@layer base{stagewise-companion-anchor *,stagewise-companion-anchor :after,stagewise-companion-anchor :before,stagewise-companion-anchor ::backdrop{box-sizing:border-box;border:0 solid;margin:0;padding:0}stagewise-companion-anchor ::file-selector-button{box-sizing:border-box;border:0 solid;margin:0;padding:0}:where(stagewise-companion-anchor),stagewise-companion-anchor{-webkit-text-size-adjust:100%;-moz-tab-size:4;-o-tab-size:4;tab-size:4;line-height:1.5;font-family:var(--default-font-family,ui-sans-serif,system-ui,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\",\"Segoe UI Symbol\",\"Noto Color Emoji\");font-feature-settings:var(--default-font-feature-settings,normal);font-variation-settings:var(--default-font-variation-settings,normal);-webkit-tap-highlight-color:transparent}stagewise-companion-anchor hr{height:0;color:inherit;border-top-width:1px}stagewise-companion-anchor abbr:where([title]){-webkit-text-decoration:underline dotted;text-decoration:underline dotted}stagewise-companion-anchor h1,stagewise-companion-anchor h2,stagewise-companion-anchor h3,stagewise-companion-anchor h4,stagewise-companion-anchor h5,stagewise-companion-anchor h6{font-size:inherit;font-weight:inherit}stagewise-companion-anchor a{color:inherit;-webkit-text-decoration:inherit;-webkit-text-decoration:inherit;-webkit-text-decoration:inherit;text-decoration:inherit}stagewise-companion-anchor b,stagewise-companion-anchor strong{font-weight:bolder}stagewise-companion-anchor code,stagewise-companion-anchor kbd,stagewise-companion-anchor samp,stagewise-companion-anchor pre{font-family:var(--default-mono-font-family,ui-monospace,SFMono-Regular,Menlo,Monaco,Consolas,\"Liberation Mono\",\"Courier New\",monospace);font-feature-settings:var(--default-mono-font-feature-settings,normal);font-variation-settings:var(--default-mono-font-variation-settings,normal);font-size:1em}stagewise-companion-anchor small{font-size:80%}stagewise-companion-anchor sub,stagewise-companion-anchor sup{vertical-align:baseline;font-size:75%;line-height:0;position:relative}stagewise-companion-anchor sub{bottom:-.25em}stagewise-companion-anchor sup{top:-.5em}stagewise-companion-anchor table{text-indent:0;border-color:inherit;border-collapse:collapse}stagewise-companion-anchor :-moz-focusring{outline:auto}stagewise-companion-anchor progress{vertical-align:baseline}stagewise-companion-anchor summary{display:list-item}stagewise-companion-anchor ol,stagewise-companion-anchor ul,stagewise-companion-anchor menu{list-style:none}stagewise-companion-anchor img,stagewise-companion-anchor svg,stagewise-companion-anchor video,stagewise-companion-anchor canvas,stagewise-companion-anchor audio,stagewise-companion-anchor iframe,stagewise-companion-anchor embed,stagewise-companion-anchor object{vertical-align:middle;display:block}stagewise-companion-anchor img,stagewise-companion-anchor video{max-width:100%;height:auto}stagewise-companion-anchor button,stagewise-companion-anchor input,stagewise-companion-anchor select,stagewise-companion-anchor optgroup,stagewise-companion-anchor textarea{font:inherit;font-feature-settings:inherit;font-variation-settings:inherit;letter-spacing:inherit;color:inherit;opacity:1;background-color:#0000;border-radius:0}stagewise-companion-anchor ::file-selector-button{font:inherit;font-feature-settings:inherit;font-variation-settings:inherit;letter-spacing:inherit;color:inherit;opacity:1;background-color:#0000;border-radius:0}stagewise-companion-anchor :where(select:is([multiple],[size])) optgroup{font-weight:bolder}stagewise-companion-anchor :where(select:is([multiple],[size])) optgroup option{padding-inline-start:20px}stagewise-companion-anchor ::file-selector-button{margin-inline-end:4px}stagewise-companion-anchor ::-moz-placeholder{opacity:1}stagewise-companion-anchor ::placeholder{opacity:1}@supports (not (-webkit-appearance:-apple-pay-button)) or (contain-intrinsic-size:1px){stagewise-companion-anchor ::-moz-placeholder{color:currentColor}stagewise-companion-anchor ::placeholder{color:currentColor}@supports (color:color-mix(in lab, red, red)){stagewise-companion-anchor ::-moz-placeholder{color:color-mix(in oklab,currentcolor 50%,transparent)}stagewise-companion-anchor ::placeholder{color:color-mix(in oklab,currentcolor 50%,transparent)}}}stagewise-companion-anchor textarea{resize:vertical}stagewise-companion-anchor ::-webkit-search-decoration{-webkit-appearance:none}stagewise-companion-anchor ::-webkit-date-and-time-value{min-height:1lh;text-align:inherit}stagewise-companion-anchor ::-webkit-datetime-edit{display:inline-flex}stagewise-companion-anchor ::-webkit-datetime-edit-fields-wrapper{padding:0}stagewise-companion-anchor ::-webkit-datetime-edit{padding-block:0}stagewise-companion-anchor ::-webkit-datetime-edit-year-field{padding-block:0}stagewise-companion-anchor ::-webkit-datetime-edit-month-field{padding-block:0}stagewise-companion-anchor ::-webkit-datetime-edit-day-field{padding-block:0}stagewise-companion-anchor ::-webkit-datetime-edit-hour-field{padding-block:0}stagewise-companion-anchor ::-webkit-datetime-edit-minute-field{padding-block:0}stagewise-companion-anchor ::-webkit-datetime-edit-second-field{padding-block:0}stagewise-companion-anchor ::-webkit-datetime-edit-millisecond-field{padding-block:0}stagewise-companion-anchor ::-webkit-datetime-edit-meridiem-field{padding-block:0}stagewise-companion-anchor :-moz-ui-invalid{box-shadow:none}stagewise-companion-anchor button,stagewise-companion-anchor input:where([type=button],[type=reset],[type=submit]){-webkit-appearance:button;-moz-appearance:button;appearance:button}stagewise-companion-anchor ::file-selector-button{-webkit-appearance:button;-moz-appearance:button;appearance:button}stagewise-companion-anchor ::-webkit-inner-spin-button{height:auto}stagewise-companion-anchor ::-webkit-outer-spin-button{height:auto}stagewise-companion-anchor [hidden]:where(:not([hidden=until-found])){display:none!important}stagewise-companion-anchor stagewise-companion-anchor *{min-width:0;min-height:0;position:relative}}@layer components;@layer utilities{stagewise-companion-anchor .pointer-events-auto{pointer-events:auto!important}stagewise-companion-anchor .pointer-events-none{pointer-events:none!important}stagewise-companion-anchor .visible{visibility:visible!important}stagewise-companion-anchor .absolute{position:absolute!important}stagewise-companion-anchor .fixed{position:fixed!important}stagewise-companion-anchor .relative{position:relative!important}stagewise-companion-anchor .inset-0{inset:calc(var(--spacing)*0)!important}stagewise-companion-anchor .inset-4{inset:calc(var(--spacing)*4)!important}stagewise-companion-anchor .top-0{top:calc(var(--spacing)*0)!important}stagewise-companion-anchor .top-1\\\\/2{top:50%!important}stagewise-companion-anchor .top-\\\\[-20\\\\%\\\\]{top:-20%!important}stagewise-companion-anchor .top-\\\\[25\\\\%\\\\]{top:25%!important}stagewise-companion-anchor .-right-1{right:calc(var(--spacing)*-1)!important}stagewise-companion-anchor .right-0{right:calc(var(--spacing)*0)!important}stagewise-companion-anchor .right-1\\\\/2{right:50%!important}stagewise-companion-anchor .right-2{right:calc(var(--spacing)*2)!important}stagewise-companion-anchor .-bottom-0\\\\.5{bottom:calc(var(--spacing)*-.5)!important}stagewise-companion-anchor .bottom-1\\\\/2{bottom:50%!important}stagewise-companion-anchor .bottom-3{bottom:calc(var(--spacing)*3)!important}stagewise-companion-anchor .left-0{left:calc(var(--spacing)*0)!important}stagewise-companion-anchor .left-1\\\\/2{left:50%!important}stagewise-companion-anchor .left-3{left:calc(var(--spacing)*3)!important}stagewise-companion-anchor .left-\\\\[-10\\\\%\\\\]{left:-10%!important}stagewise-companion-anchor .left-\\\\[25\\\\%\\\\]{left:25%!important}stagewise-companion-anchor .z-50{z-index:50!important}stagewise-companion-anchor .container{width:100%!important}@media (min-width:40rem){stagewise-companion-anchor .container{max-width:40rem!important}}@media (min-width:48rem){stagewise-companion-anchor .container{max-width:48rem!important}}@media (min-width:64rem){stagewise-companion-anchor .container{max-width:64rem!important}}@media (min-width:80rem){stagewise-companion-anchor .container{max-width:80rem!important}}@media (min-width:96rem){stagewise-companion-anchor .container{max-width:96rem!important}}stagewise-companion-anchor .block{display:block!important}stagewise-companion-anchor .contents{display:contents!important}stagewise-companion-anchor .flex{display:flex!important}stagewise-companion-anchor .hidden{display:none!important}stagewise-companion-anchor .inline{display:inline!important}stagewise-companion-anchor .aspect-square{aspect-ratio:1!important}stagewise-companion-anchor .size-0{width:calc(var(--spacing)*0)!important;height:calc(var(--spacing)*0)!important}stagewise-companion-anchor .size-1\\\\.5{width:calc(var(--spacing)*1.5)!important;height:calc(var(--spacing)*1.5)!important}stagewise-companion-anchor .size-2\\\\/3{width:66.6667%!important;height:66.6667%!important}stagewise-companion-anchor .size-3{width:calc(var(--spacing)*3)!important;height:calc(var(--spacing)*3)!important}stagewise-companion-anchor .size-4{width:calc(var(--spacing)*4)!important;height:calc(var(--spacing)*4)!important}stagewise-companion-anchor .size-5{width:calc(var(--spacing)*5)!important;height:calc(var(--spacing)*5)!important}stagewise-companion-anchor .size-6{width:calc(var(--spacing)*6)!important;height:calc(var(--spacing)*6)!important}stagewise-companion-anchor .size-8{width:calc(var(--spacing)*8)!important;height:calc(var(--spacing)*8)!important}stagewise-companion-anchor .size-9\\\\/12{width:75%!important;height:75%!important}stagewise-companion-anchor .size-12{width:calc(var(--spacing)*12)!important;height:calc(var(--spacing)*12)!important}stagewise-companion-anchor .size-\\\\[120\\\\%\\\\]{width:120%!important;height:120%!important}stagewise-companion-anchor .size-full{width:100%!important;height:100%!important}stagewise-companion-anchor .h-4{height:calc(var(--spacing)*4)!important}stagewise-companion-anchor .h-5{height:calc(var(--spacing)*5)!important}stagewise-companion-anchor .h-6{height:calc(var(--spacing)*6)!important}stagewise-companion-anchor .h-8{height:calc(var(--spacing)*8)!important}stagewise-companion-anchor .h-\\\\[4\\\\.5em\\\\]{height:4.5em!important}stagewise-companion-anchor .h-\\\\[50\\\\%\\\\]{height:50%!important}stagewise-companion-anchor .h-\\\\[120\\\\%\\\\]{height:120%!important}stagewise-companion-anchor .h-auto{height:auto!important}stagewise-companion-anchor .h-fit{height:-moz-fit-content!important;height:fit-content!important}stagewise-companion-anchor .h-full{height:100%!important}stagewise-companion-anchor .h-screen{height:100vh!important}stagewise-companion-anchor .max-h-\\\\[50vh\\\\]{max-height:50vh!important}stagewise-companion-anchor .max-h-full{max-height:100%!important}stagewise-companion-anchor .w-0{width:calc(var(--spacing)*0)!important}stagewise-companion-anchor .w-6{width:calc(var(--spacing)*6)!important}stagewise-companion-anchor .w-80{width:calc(var(--spacing)*80)!important}stagewise-companion-anchor .w-96{width:calc(var(--spacing)*96)!important}stagewise-companion-anchor .w-\\\\[50\\\\%\\\\]{width:50%!important}stagewise-companion-anchor .w-fit{width:-moz-fit-content!important;width:fit-content!important}stagewise-companion-anchor .w-full{width:100%!important}stagewise-companion-anchor .w-max{width:-moz-max-content!important;width:max-content!important}stagewise-companion-anchor .w-screen{width:100vw!important}stagewise-companion-anchor .max-w-8{max-width:calc(var(--spacing)*8)!important}stagewise-companion-anchor .max-w-48{max-width:calc(var(--spacing)*48)!important}stagewise-companion-anchor .max-w-90{max-width:calc(var(--spacing)*90)!important}stagewise-companion-anchor .max-w-\\\\[80\\\\%\\\\]{max-width:80%!important}stagewise-companion-anchor .max-w-\\\\[80vw\\\\]{max-width:80vw!important}stagewise-companion-anchor .max-w-sm{max-width:var(--container-sm)!important}stagewise-companion-anchor .min-w-4{min-width:calc(var(--spacing)*4)!important}stagewise-companion-anchor .min-w-24{min-width:calc(var(--spacing)*24)!important}stagewise-companion-anchor .flex-1{flex:1!important}stagewise-companion-anchor .flex-shrink-0,stagewise-companion-anchor .shrink-0{flex-shrink:0!important}stagewise-companion-anchor .origin-center{transform-origin:50%!important}stagewise-companion-anchor .transform{transform:var(--tw-rotate-x,)var(--tw-rotate-y,)var(--tw-rotate-z,)var(--tw-skew-x,)var(--tw-skew-y,)!important}stagewise-companion-anchor .animate-pulse{animation:var(--animate-pulse)!important}stagewise-companion-anchor .cursor-grab{cursor:grab!important}stagewise-companion-anchor .cursor-pointer{cursor:pointer!important}stagewise-companion-anchor .resize{resize:both!important}stagewise-companion-anchor .resize-none{resize:none!important}stagewise-companion-anchor .snap-start{scroll-snap-align:start!important}stagewise-companion-anchor .flex-col{flex-direction:column!important}stagewise-companion-anchor .flex-row{flex-direction:row!important}stagewise-companion-anchor .items-center{align-items:center!important}stagewise-companion-anchor .items-end{align-items:flex-end!important}stagewise-companion-anchor .items-start{align-items:flex-start!important}stagewise-companion-anchor .items-stretch{align-items:stretch!important}stagewise-companion-anchor .justify-between{justify-content:space-between!important}stagewise-companion-anchor .justify-center{justify-content:center!important}stagewise-companion-anchor .justify-end{justify-content:flex-end!important}stagewise-companion-anchor .justify-start{justify-content:flex-start!important}stagewise-companion-anchor .gap-1{gap:calc(var(--spacing)*1)!important}stagewise-companion-anchor .gap-2{gap:calc(var(--spacing)*2)!important}stagewise-companion-anchor .gap-3{gap:calc(var(--spacing)*3)!important}stagewise-companion-anchor .truncate{text-overflow:ellipsis!important;white-space:nowrap!important;overflow:hidden!important}stagewise-companion-anchor .overflow-hidden{overflow:hidden!important}stagewise-companion-anchor .overflow-visible{overflow:visible!important}stagewise-companion-anchor .overflow-x-auto{overflow-x:auto!important}stagewise-companion-anchor .overflow-x-hidden{overflow-x:hidden!important}stagewise-companion-anchor .overflow-y-auto{overflow-y:auto!important}stagewise-companion-anchor .overflow-y-visible{overflow-y:visible!important}stagewise-companion-anchor .rounded{border-radius:.25rem!important}stagewise-companion-anchor .rounded-2xl{border-radius:var(--radius-2xl)!important}stagewise-companion-anchor .rounded-3xl{border-radius:var(--radius-3xl)!important}stagewise-companion-anchor .rounded-full{border-radius:3.40282e38px!important}stagewise-companion-anchor .rounded-lg{border-radius:var(--radius-lg)!important}stagewise-companion-anchor .rounded-md{border-radius:var(--radius-md)!important}stagewise-companion-anchor .rounded-xl{border-radius:var(--radius-xl)!important}stagewise-companion-anchor .rounded-t-3xl{border-top-left-radius:var(--radius-3xl)!important;border-top-right-radius:var(--radius-3xl)!important}stagewise-companion-anchor .border{border-style:var(--tw-border-style)!important;border-width:1px!important}stagewise-companion-anchor .border-2{border-style:var(--tw-border-style)!important;border-width:2px!important}stagewise-companion-anchor .border-x{border-inline-style:var(--tw-border-style)!important;border-inline-width:1px!important}stagewise-companion-anchor .border-t{border-top-style:var(--tw-border-style)!important;border-top-width:1px!important}stagewise-companion-anchor .border-r{border-right-style:var(--tw-border-style)!important;border-right-width:1px!important}stagewise-companion-anchor .border-solid{--tw-border-style:solid!important;border-style:solid!important}stagewise-companion-anchor .border-blue-600\\\\/80{border-color:#155dfccc!important}@supports (color:color-mix(in lab, red, red)){stagewise-companion-anchor .border-blue-600\\\\/80{border-color:color-mix(in oklab,var(--color-blue-600)80%,transparent)!important}}stagewise-companion-anchor .border-border\\\\/10{border-color:#71717b1a!important}@supports (color:color-mix(in lab, red, red)){stagewise-companion-anchor .border-border\\\\/10{border-color:color-mix(in oklab,var(--color-border)10%,transparent)!important}}stagewise-companion-anchor .border-border\\\\/20{border-color:#71717b33!important}@supports (color:color-mix(in lab, red, red)){stagewise-companion-anchor .border-border\\\\/20{border-color:color-mix(in oklab,var(--color-border)20%,transparent)!important}}stagewise-companion-anchor .border-border\\\\/30{border-color:#71717b4d!important}@supports (color:color-mix(in lab, red, red)){stagewise-companion-anchor .border-border\\\\/30{border-color:color-mix(in oklab,var(--color-border)30%,transparent)!important}}stagewise-companion-anchor .border-green-600\\\\/80{border-color:#00a544cc!important}@supports (color:color-mix(in lab, red, red)){stagewise-companion-anchor .border-green-600\\\\/80{border-color:color-mix(in oklab,var(--color-green-600)80%,transparent)!important}}stagewise-companion-anchor .border-r-border\\\\/30{border-right-color:#71717b4d!important}@supports (color:color-mix(in lab, red, red)){stagewise-companion-anchor .border-r-border\\\\/30{border-right-color:color-mix(in oklab,var(--color-border)30%,transparent)!important}}stagewise-companion-anchor .border-l-transparent{border-left-color:#0000!important}stagewise-companion-anchor .bg-background\\\\/40{background-color:#fff6!important}@supports (color:color-mix(in lab, red, red)){stagewise-companion-anchor .bg-background\\\\/40{background-color:color-mix(in oklab,var(--color-background)40%,transparent)!important}}stagewise-companion-anchor .bg-background\\\\/60{background-color:#fff9!important}@supports (color:color-mix(in lab, red, red)){stagewise-companion-anchor .bg-background\\\\/60{background-color:color-mix(in oklab,var(--color-background)60%,transparent)!important}}stagewise-companion-anchor .bg-blue-600{background-color:var(--color-blue-600)!important}stagewise-companion-anchor .bg-blue-600\\\\/20{background-color:#155dfc33!important}@supports (color:color-mix(in lab, red, red)){stagewise-companion-anchor .bg-blue-600\\\\/20{background-color:color-mix(in oklab,var(--color-blue-600)20%,transparent)!important}}stagewise-companion-anchor .bg-green-600\\\\/5{background-color:#00a5440d!important}@supports (color:color-mix(in lab, red, red)){stagewise-companion-anchor .bg-green-600\\\\/5{background-color:color-mix(in oklab,var(--color-green-600)5%,transparent)!important}}stagewise-companion-anchor .bg-rose-600{background-color:var(--color-rose-600)!important}stagewise-companion-anchor .bg-transparent{background-color:#0000!important}stagewise-companion-anchor .bg-white\\\\/60{background-color:#fff9!important}@supports (color:color-mix(in lab, red, red)){stagewise-companion-anchor .bg-white\\\\/60{background-color:color-mix(in oklab,var(--color-white)60%,transparent)!important}}stagewise-companion-anchor .bg-zinc-50\\\\/80{background-color:#fafafacc!important}@supports (color:color-mix(in lab, red, red)){stagewise-companion-anchor .bg-zinc-50\\\\/80{background-color:color-mix(in oklab,var(--color-zinc-50)80%,transparent)!important}}stagewise-companion-anchor .bg-zinc-500{background-color:var(--color-zinc-500)!important}stagewise-companion-anchor .bg-zinc-500\\\\/10{background-color:#71717b1a!important}@supports (color:color-mix(in lab, red, red)){stagewise-companion-anchor .bg-zinc-500\\\\/10{background-color:color-mix(in oklab,var(--color-zinc-500)10%,transparent)!important}}stagewise-companion-anchor .bg-zinc-600{background-color:var(--color-zinc-600)!important}stagewise-companion-anchor .bg-zinc-950\\\\/5{background-color:#09090b0d!important}@supports (color:color-mix(in lab, red, red)){stagewise-companion-anchor .bg-zinc-950\\\\/5{background-color:color-mix(in oklab,var(--color-zinc-950)5%,transparent)!important}}stagewise-companion-anchor .bg-gradient-to-tr{--tw-gradient-position:to top right in oklab!important;background-image:linear-gradient(var(--tw-gradient-stops))!important}stagewise-companion-anchor .bg-\\\\[radial-gradient\\\\(circle\\\\,rgba\\\\(55\\\\,48\\\\,163\\\\,0\\\\)_55\\\\%\\\\,rgba\\\\(55\\\\,48\\\\,163\\\\,0\\\\.35\\\\)_73\\\\%\\\\)\\\\]{background-image:radial-gradient(circle,#3730a300 55%,#3730a359 73%)!important}stagewise-companion-anchor .bg-\\\\[radial-gradient\\\\(circle\\\\,rgba\\\\(219\\\\,39\\\\,119\\\\,0\\\\.2\\\\)_0\\\\%\\\\,rgba\\\\(219\\\\,39\\\\,119\\\\,0\\\\)_100\\\\%\\\\)\\\\]{background-image:radial-gradient(circle,#db277733 0%,#db277700 100%)!important}stagewise-companion-anchor .bg-\\\\[radial-gradient\\\\(circle\\\\,rgba\\\\(255\\\\,255\\\\,255\\\\,0\\\\)_60\\\\%\\\\,rgba\\\\(255\\\\,255\\\\,255\\\\,0\\\\.2\\\\)_70\\\\%\\\\)\\\\]{background-image:radial-gradient(circle,#fff0 60%,#fff3 70%)!important}stagewise-companion-anchor .from-indigo-700{--tw-gradient-from:var(--color-indigo-700)!important;--tw-gradient-stops:var(--tw-gradient-via-stops,var(--tw-gradient-position),var(--tw-gradient-from)var(--tw-gradient-from-position),var(--tw-gradient-to)var(--tw-gradient-to-position))!important}stagewise-companion-anchor .via-blue-500{--tw-gradient-via:var(--color-blue-500)!important;--tw-gradient-via-stops:var(--tw-gradient-position),var(--tw-gradient-from)var(--tw-gradient-from-position),var(--tw-gradient-via)var(--tw-gradient-via-position),var(--tw-gradient-to)var(--tw-gradient-to-position)!important;--tw-gradient-stops:var(--tw-gradient-via-stops)!important}stagewise-companion-anchor .to-teal-500{--tw-gradient-to:var(--color-teal-500)!important;--tw-gradient-stops:var(--tw-gradient-via-stops,var(--tw-gradient-position),var(--tw-gradient-from)var(--tw-gradient-from-position),var(--tw-gradient-to)var(--tw-gradient-to-position))!important}stagewise-companion-anchor .fill-current{fill:currentColor!important}stagewise-companion-anchor .fill-white{fill:var(--color-white)!important}stagewise-companion-anchor .fill-zinc-500\\\\/50{fill:#71717b80!important}@supports (color:color-mix(in lab, red, red)){stagewise-companion-anchor .fill-zinc-500\\\\/50{fill:color-mix(in oklab,var(--color-zinc-500)50%,transparent)!important}}stagewise-companion-anchor .fill-zinc-950{fill:var(--color-zinc-950)!important}stagewise-companion-anchor .stroke-black\\\\/30{stroke:#0000004d!important}@supports (color:color-mix(in lab, red, red)){stagewise-companion-anchor .stroke-black\\\\/30{stroke:color-mix(in oklab,var(--color-black)30%,transparent)!important}}stagewise-companion-anchor .stroke-none{stroke:none!important}stagewise-companion-anchor .stroke-1{stroke-width:1px!important}stagewise-companion-anchor .p-0{padding:calc(var(--spacing)*0)!important}stagewise-companion-anchor .p-0\\\\.5{padding:calc(var(--spacing)*.5)!important}stagewise-companion-anchor .p-1{padding:calc(var(--spacing)*1)!important}stagewise-companion-anchor .p-1\\\\.5{padding:calc(var(--spacing)*1.5)!important}stagewise-companion-anchor .p-2{padding:calc(var(--spacing)*2)!important}stagewise-companion-anchor .p-3{padding:calc(var(--spacing)*3)!important}stagewise-companion-anchor .px-0\\\\.5{padding-inline:calc(var(--spacing)*.5)!important}stagewise-companion-anchor .px-1{padding-inline:calc(var(--spacing)*1)!important}stagewise-companion-anchor .px-2{padding-inline:calc(var(--spacing)*2)!important}stagewise-companion-anchor .px-3{padding-inline:calc(var(--spacing)*3)!important}stagewise-companion-anchor .py-0{padding-block:calc(var(--spacing)*0)!important}stagewise-companion-anchor .py-1{padding-block:calc(var(--spacing)*1)!important}stagewise-companion-anchor .pt-2{padding-top:calc(var(--spacing)*2)!important}stagewise-companion-anchor .pr-6{padding-right:calc(var(--spacing)*6)!important}stagewise-companion-anchor .pb-0{padding-bottom:calc(var(--spacing)*0)!important}stagewise-companion-anchor .pb-2{padding-bottom:calc(var(--spacing)*2)!important}stagewise-companion-anchor .pl-2{padding-left:calc(var(--spacing)*2)!important}stagewise-companion-anchor .text-base{font-size:var(--text-base)!important;line-height:var(--tw-leading,var(--text-base--line-height))!important}stagewise-companion-anchor .text-sm{font-size:var(--text-sm)!important;line-height:var(--tw-leading,var(--text-sm--line-height))!important}stagewise-companion-anchor .text-xs{font-size:var(--text-xs)!important;line-height:var(--tw-leading,var(--text-xs--line-height))!important}stagewise-companion-anchor .font-bold{--tw-font-weight:var(--font-weight-bold)!important;font-weight:var(--font-weight-bold)!important}stagewise-companion-anchor .font-normal{--tw-font-weight:var(--font-weight-normal)!important;font-weight:var(--font-weight-normal)!important}stagewise-companion-anchor .font-semibold{--tw-font-weight:var(--font-weight-semibold)!important;font-weight:var(--font-weight-semibold)!important}stagewise-companion-anchor .text-border\\\\/60{color:#71717b99!important}@supports (color:color-mix(in lab, red, red)){stagewise-companion-anchor .text-border\\\\/60{color:color-mix(in oklab,var(--color-border)60%,transparent)!important}}stagewise-companion-anchor .text-foreground{color:var(--color-foreground)!important}stagewise-companion-anchor .text-muted-foreground{color:var(--color-muted-foreground)!important}stagewise-companion-anchor .text-muted-foreground\\\\/30{color:#3f3f464d!important}@supports (color:color-mix(in lab, red, red)){stagewise-companion-anchor .text-muted-foreground\\\\/30{color:color-mix(in oklab,var(--color-muted-foreground)30%,transparent)!important}}stagewise-companion-anchor .text-transparent{color:#0000!important}stagewise-companion-anchor .text-white{color:var(--color-white)!important}stagewise-companion-anchor .text-zinc-50{color:var(--color-zinc-50)!important}stagewise-companion-anchor .text-zinc-950{color:var(--color-zinc-950)!important}stagewise-companion-anchor .text-zinc-950\\\\/50{color:#09090b80!important}@supports (color:color-mix(in lab, red, red)){stagewise-companion-anchor .text-zinc-950\\\\/50{color:color-mix(in oklab,var(--color-zinc-950)50%,transparent)!important}}stagewise-companion-anchor .opacity-20{opacity:.2!important}stagewise-companion-anchor .opacity-50{opacity:.5!important}stagewise-companion-anchor .opacity-80{opacity:.8!important}stagewise-companion-anchor .opacity-100{opacity:1!important}stagewise-companion-anchor .shadow{--tw-shadow:0 1px 3px 0 var(--tw-shadow-color,#0000001a),0 1px 2px -1px var(--tw-shadow-color,#0000001a)!important;box-shadow:var(--tw-inset-shadow),var(--tw-inset-ring-shadow),var(--tw-ring-offset-shadow),var(--tw-ring-shadow),var(--tw-shadow)!important}stagewise-companion-anchor .shadow-inner{--tw-shadow:inset 0 2px 4px 0 var(--tw-shadow-color,#0000000d)!important;box-shadow:var(--tw-inset-shadow),var(--tw-inset-ring-shadow),var(--tw-ring-offset-shadow),var(--tw-ring-shadow),var(--tw-shadow)!important}stagewise-companion-anchor .shadow-lg{--tw-shadow:0 10px 15px -3px var(--tw-shadow-color,#0000001a),0 4px 6px -4px var(--tw-shadow-color,#0000001a)!important;box-shadow:var(--tw-inset-shadow),var(--tw-inset-ring-shadow),var(--tw-ring-offset-shadow),var(--tw-ring-shadow),var(--tw-shadow)!important}stagewise-companion-anchor .shadow-sm{--tw-shadow:0 1px 3px 0 var(--tw-shadow-color,#0000001a),0 1px 2px -1px var(--tw-shadow-color,#0000001a)!important;box-shadow:var(--tw-inset-shadow),var(--tw-inset-ring-shadow),var(--tw-ring-offset-shadow),var(--tw-ring-shadow),var(--tw-shadow)!important}stagewise-companion-anchor .ring-2{--tw-ring-shadow:var(--tw-ring-inset,)0 0 0 calc(2px + var(--tw-ring-offset-width))var(--tw-ring-color,currentcolor)!important;box-shadow:var(--tw-inset-shadow),var(--tw-inset-ring-shadow),var(--tw-ring-offset-shadow),var(--tw-ring-shadow),var(--tw-shadow)!important}stagewise-companion-anchor .shadow-black\\\\/50{--tw-shadow-color:#00000080!important}@supports (color:color-mix(in lab, red, red)){stagewise-companion-anchor .shadow-black\\\\/50{--tw-shadow-color:color-mix(in oklab,color-mix(in oklab,var(--color-black)50%,transparent)var(--tw-shadow-alpha),transparent)!important}}stagewise-companion-anchor .shadow-blue-600\\\\/50{--tw-shadow-color:#155dfc80!important}@supports (color:color-mix(in lab, red, red)){stagewise-companion-anchor .shadow-blue-600\\\\/50{--tw-shadow-color:color-mix(in oklab,color-mix(in oklab,var(--color-blue-600)50%,transparent)var(--tw-shadow-alpha),transparent)!important}}stagewise-companion-anchor .ring-blue-600{--tw-ring-color:var(--color-blue-600)!important}stagewise-companion-anchor .blur{--tw-blur:blur(8px)!important;filter:var(--tw-blur,)var(--tw-brightness,)var(--tw-contrast,)var(--tw-grayscale,)var(--tw-hue-rotate,)var(--tw-invert,)var(--tw-saturate,)var(--tw-sepia,)var(--tw-drop-shadow,)!important}stagewise-companion-anchor .drop-shadow-md{--tw-drop-shadow-size:drop-shadow(0 3px 3px var(--tw-drop-shadow-color,#0000001f))!important;--tw-drop-shadow:drop-shadow(var(--drop-shadow-md))!important;filter:var(--tw-blur,)var(--tw-brightness,)var(--tw-contrast,)var(--tw-grayscale,)var(--tw-hue-rotate,)var(--tw-invert,)var(--tw-saturate,)var(--tw-sepia,)var(--tw-drop-shadow,)!important}stagewise-companion-anchor .drop-shadow-xl{--tw-drop-shadow-size:drop-shadow(0 9px 7px var(--tw-drop-shadow-color,#0000001a))!important;--tw-drop-shadow:drop-shadow(var(--drop-shadow-xl))!important;filter:var(--tw-blur,)var(--tw-brightness,)var(--tw-contrast,)var(--tw-grayscale,)var(--tw-hue-rotate,)var(--tw-invert,)var(--tw-saturate,)var(--tw-sepia,)var(--tw-drop-shadow,)!important}stagewise-companion-anchor .drop-shadow-xs{--tw-drop-shadow-size:drop-shadow(0 1px 1px var(--tw-drop-shadow-color,#0000000d))!important;--tw-drop-shadow:drop-shadow(var(--drop-shadow-xs))!important;filter:var(--tw-blur,)var(--tw-brightness,)var(--tw-contrast,)var(--tw-grayscale,)var(--tw-hue-rotate,)var(--tw-invert,)var(--tw-saturate,)var(--tw-sepia,)var(--tw-drop-shadow,)!important}stagewise-companion-anchor .drop-shadow-black{--tw-drop-shadow-color:#000!important;--tw-drop-shadow:var(--tw-drop-shadow-size)!important}@supports (color:color-mix(in lab, red, red)){stagewise-companion-anchor .drop-shadow-black{--tw-drop-shadow-color:color-mix(in oklab,var(--color-black)var(--tw-drop-shadow-alpha),transparent)!important}}stagewise-companion-anchor .drop-shadow-indigo-950{--tw-drop-shadow-color:oklch(25.7% .09 281.288)!important;--tw-drop-shadow:var(--tw-drop-shadow-size)!important}@supports (color:color-mix(in lab, red, red)){stagewise-companion-anchor .drop-shadow-indigo-950{--tw-drop-shadow-color:color-mix(in oklab,var(--color-indigo-950)var(--tw-drop-shadow-alpha),transparent)!important}}stagewise-companion-anchor .filter{filter:var(--tw-blur,)var(--tw-brightness,)var(--tw-contrast,)var(--tw-grayscale,)var(--tw-hue-rotate,)var(--tw-invert,)var(--tw-saturate,)var(--tw-sepia,)var(--tw-drop-shadow,)!important}stagewise-companion-anchor .backdrop-blur-lg{--tw-backdrop-blur:blur(var(--blur-lg))!important;-webkit-backdrop-filter:var(--tw-backdrop-blur,)var(--tw-backdrop-brightness,)var(--tw-backdrop-contrast,)var(--tw-backdrop-grayscale,)var(--tw-backdrop-hue-rotate,)var(--tw-backdrop-invert,)var(--tw-backdrop-opacity,)var(--tw-backdrop-saturate,)var(--tw-backdrop-sepia,)!important;backdrop-filter:var(--tw-backdrop-blur,)var(--tw-backdrop-brightness,)var(--tw-backdrop-contrast,)var(--tw-backdrop-grayscale,)var(--tw-backdrop-hue-rotate,)var(--tw-backdrop-invert,)var(--tw-backdrop-opacity,)var(--tw-backdrop-saturate,)var(--tw-backdrop-sepia,)!important}stagewise-companion-anchor .backdrop-blur-md{--tw-backdrop-blur:blur(var(--blur-md))!important;-webkit-backdrop-filter:var(--tw-backdrop-blur,)var(--tw-backdrop-brightness,)var(--tw-backdrop-contrast,)var(--tw-backdrop-grayscale,)var(--tw-backdrop-hue-rotate,)var(--tw-backdrop-invert,)var(--tw-backdrop-opacity,)var(--tw-backdrop-saturate,)var(--tw-backdrop-sepia,)!important;backdrop-filter:var(--tw-backdrop-blur,)var(--tw-backdrop-brightness,)var(--tw-backdrop-contrast,)var(--tw-backdrop-grayscale,)var(--tw-backdrop-hue-rotate,)var(--tw-backdrop-invert,)var(--tw-backdrop-opacity,)var(--tw-backdrop-saturate,)var(--tw-backdrop-sepia,)!important}stagewise-companion-anchor .backdrop-blur-xs{--tw-backdrop-blur:blur(var(--blur-xs))!important;-webkit-backdrop-filter:var(--tw-backdrop-blur,)var(--tw-backdrop-brightness,)var(--tw-backdrop-contrast,)var(--tw-backdrop-grayscale,)var(--tw-backdrop-hue-rotate,)var(--tw-backdrop-invert,)var(--tw-backdrop-opacity,)var(--tw-backdrop-saturate,)var(--tw-backdrop-sepia,)!important;backdrop-filter:var(--tw-backdrop-blur,)var(--tw-backdrop-brightness,)var(--tw-backdrop-contrast,)var(--tw-backdrop-grayscale,)var(--tw-backdrop-hue-rotate,)var(--tw-backdrop-invert,)var(--tw-backdrop-opacity,)var(--tw-backdrop-saturate,)var(--tw-backdrop-sepia,)!important}stagewise-companion-anchor .backdrop-saturate-150{--tw-backdrop-saturate:saturate(150%)!important;-webkit-backdrop-filter:var(--tw-backdrop-blur,)var(--tw-backdrop-brightness,)var(--tw-backdrop-contrast,)var(--tw-backdrop-grayscale,)var(--tw-backdrop-hue-rotate,)var(--tw-backdrop-invert,)var(--tw-backdrop-opacity,)var(--tw-backdrop-saturate,)var(--tw-backdrop-sepia,)!important;backdrop-filter:var(--tw-backdrop-blur,)var(--tw-backdrop-brightness,)var(--tw-backdrop-contrast,)var(--tw-backdrop-grayscale,)var(--tw-backdrop-hue-rotate,)var(--tw-backdrop-invert,)var(--tw-backdrop-opacity,)var(--tw-backdrop-saturate,)var(--tw-backdrop-sepia,)!important}stagewise-companion-anchor .transition{transition-property:color,background-color,border-color,outline-color,text-decoration-color,fill,stroke,--tw-gradient-from,--tw-gradient-via,--tw-gradient-to,opacity,box-shadow,transform,translate,scale,rotate,filter,-webkit-backdrop-filter,backdrop-filter,display,visibility,content-visibility,overlay,pointer-events!important;transition-timing-function:var(--tw-ease,var(--default-transition-timing-function))!important;transition-duration:var(--tw-duration,var(--default-transition-duration))!important}stagewise-companion-anchor .transition-all{transition-property:all!important;transition-timing-function:var(--tw-ease,var(--default-transition-timing-function))!important;transition-duration:var(--tw-duration,var(--default-transition-duration))!important}stagewise-companion-anchor .transition-colors{transition-property:color,background-color,border-color,outline-color,text-decoration-color,fill,stroke,--tw-gradient-from,--tw-gradient-via,--tw-gradient-to!important;transition-timing-function:var(--tw-ease,var(--default-transition-timing-function))!important;transition-duration:var(--tw-duration,var(--default-transition-duration))!important}stagewise-companion-anchor .duration-0{--tw-duration:0s!important;transition-duration:0s!important}stagewise-companion-anchor .duration-100{--tw-duration:.1s!important;transition-duration:.1s!important}stagewise-companion-anchor .duration-150{--tw-duration:.15s!important;transition-duration:.15s!important}stagewise-companion-anchor .duration-500{--tw-duration:.5s!important;transition-duration:.5s!important}stagewise-companion-anchor .outline-none{--tw-outline-style:none!important;outline-style:none!important}stagewise-companion-anchor .select-none{-webkit-user-select:none!important;-moz-user-select:none!important;user-select:none!important}stagewise-companion-anchor .placeholder\\\\:text-zinc-950\\\\/50::-moz-placeholder{color:#09090b80!important}stagewise-companion-anchor .placeholder\\\\:text-zinc-950\\\\/50::placeholder{color:#09090b80!important}@supports (color:color-mix(in lab, red, red)){stagewise-companion-anchor .placeholder\\\\:text-zinc-950\\\\/50::-moz-placeholder{color:color-mix(in oklab,var(--color-zinc-950)50%,transparent)!important}stagewise-companion-anchor .placeholder\\\\:text-zinc-950\\\\/50::placeholder{color:color-mix(in oklab,var(--color-zinc-950)50%,transparent)!important}}stagewise-companion-anchor .placeholder\\\\:text-zinc-950\\\\/70::-moz-placeholder{color:#09090bb3!important}stagewise-companion-anchor .placeholder\\\\:text-zinc-950\\\\/70::placeholder{color:#09090bb3!important}@supports (color:color-mix(in lab, red, red)){stagewise-companion-anchor .placeholder\\\\:text-zinc-950\\\\/70::-moz-placeholder{color:color-mix(in oklab,var(--color-zinc-950)70%,transparent)!important}stagewise-companion-anchor .placeholder\\\\:text-zinc-950\\\\/70::placeholder{color:color-mix(in oklab,var(--color-zinc-950)70%,transparent)!important}}stagewise-companion-anchor .first\\\\:border-none:first-child{--tw-border-style:none!important;border-style:none!important}stagewise-companion-anchor .first\\\\:pl-0:first-child{padding-left:calc(var(--spacing)*0)!important}stagewise-companion-anchor .last\\\\:border-r-transparent:last-child{border-right-color:#0000!important}stagewise-companion-anchor .last\\\\:pr-0:last-child{padding-right:calc(var(--spacing)*0)!important}@media (hover:hover){stagewise-companion-anchor .hover\\\\:border-red-600\\\\/80:hover{border-color:#e40014cc!important}@supports (color:color-mix(in lab, red, red)){stagewise-companion-anchor .hover\\\\:border-red-600\\\\/80:hover{border-color:color-mix(in oklab,var(--color-red-600)80%,transparent)!important}}stagewise-companion-anchor .hover\\\\:bg-red-600\\\\/20:hover{background-color:#e4001433!important}@supports (color:color-mix(in lab, red, red)){stagewise-companion-anchor .hover\\\\:bg-red-600\\\\/20:hover{background-color:color-mix(in oklab,var(--color-red-600)20%,transparent)!important}}stagewise-companion-anchor .hover\\\\:bg-zinc-950\\\\/5:hover{background-color:#09090b0d!important}@supports (color:color-mix(in lab, red, red)){stagewise-companion-anchor .hover\\\\:bg-zinc-950\\\\/5:hover{background-color:color-mix(in oklab,var(--color-zinc-950)5%,transparent)!important}}stagewise-companion-anchor .hover\\\\:bg-zinc-950\\\\/10:hover{background-color:#09090b1a!important}@supports (color:color-mix(in lab, red, red)){stagewise-companion-anchor .hover\\\\:bg-zinc-950\\\\/10:hover{background-color:color-mix(in oklab,var(--color-zinc-950)10%,transparent)!important}}stagewise-companion-anchor .hover\\\\:text-muted-foreground:hover{color:var(--color-muted-foreground)!important}stagewise-companion-anchor .hover\\\\:text-white:hover{color:var(--color-white)!important}stagewise-companion-anchor .hover\\\\:opacity-100:hover{opacity:1!important}stagewise-companion-anchor .hover\\\\:shadow-lg:hover{--tw-shadow:0 10px 15px -3px var(--tw-shadow-color,#0000001a),0 4px 6px -4px var(--tw-shadow-color,#0000001a)!important;box-shadow:var(--tw-inset-shadow),var(--tw-inset-ring-shadow),var(--tw-ring-offset-shadow),var(--tw-ring-shadow),var(--tw-shadow)!important}stagewise-companion-anchor .hover\\\\:backdrop-blur-sm:hover{--tw-backdrop-blur:blur(var(--blur-sm))!important;-webkit-backdrop-filter:var(--tw-backdrop-blur,)var(--tw-backdrop-brightness,)var(--tw-backdrop-contrast,)var(--tw-backdrop-grayscale,)var(--tw-backdrop-hue-rotate,)var(--tw-backdrop-invert,)var(--tw-backdrop-opacity,)var(--tw-backdrop-saturate,)var(--tw-backdrop-sepia,)!important;backdrop-filter:var(--tw-backdrop-blur,)var(--tw-backdrop-brightness,)var(--tw-backdrop-contrast,)var(--tw-backdrop-grayscale,)var(--tw-backdrop-hue-rotate,)var(--tw-backdrop-invert,)var(--tw-backdrop-opacity,)var(--tw-backdrop-saturate,)var(--tw-backdrop-sepia,)!important}}stagewise-companion-anchor .focus\\\\:cursor-grabbing:focus{cursor:grabbing!important}stagewise-companion-anchor .focus\\\\:text-zinc-900:focus{color:var(--color-zinc-900)!important}stagewise-companion-anchor .focus\\\\:outline-none:focus,stagewise-companion-anchor .data-focus\\\\:outline-none[data-focus]{--tw-outline-style:none!important;outline-style:none!important}}stagewise-companion-anchor stagewise-companion-anchor{all:initial;interpolate-size:allow-keywords;transform:translate(0);color:var(--color-zinc-950)!important;letter-spacing:normal!important;text-rendering:auto!important;font-family:Inter,Noto Color Emoji,-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,SF Compact,SF Pro,Helvetica Neue,sans-serif!important;font-weight:400!important;line-height:normal!important}@supports (font-variation-settings:normal){stagewise-companion-anchor stagewise-companion-anchor{font-optical-sizing:auto!important;font-family:InterVariable,Noto Color Emoji,-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,SF Compact,SF Pro,Helvetica Neue,sans-serif!important}}stagewise-companion-anchor #headlessui-portal-root{z-index:50!important;width:100vw!important;height:100vh!important;position:fixed!important}stagewise-companion-anchor #headlessui-portal-root>*{pointer-events:auto!important}@property --tw-rotate-x{syntax:\"*\";inherits:false}@property --tw-rotate-y{syntax:\"*\";inherits:false}@property --tw-rotate-z{syntax:\"*\";inherits:false}@property --tw-skew-x{syntax:\"*\";inherits:false}@property --tw-skew-y{syntax:\"*\";inherits:false}@property --tw-border-style{syntax:\"*\";inherits:false;initial-value:solid}@property --tw-gradient-position{syntax:\"*\";inherits:false}@property --tw-gradient-from{syntax:\"<color>\";inherits:false;initial-value:#0000}@property --tw-gradient-via{syntax:\"<color>\";inherits:false;initial-value:#0000}@property --tw-gradient-to{syntax:\"<color>\";inherits:false;initial-value:#0000}@property --tw-gradient-stops{syntax:\"*\";inherits:false}@property --tw-gradient-via-stops{syntax:\"*\";inherits:false}@property --tw-gradient-from-position{syntax:\"<length-percentage>\";inherits:false;initial-value:0%}@property --tw-gradient-via-position{syntax:\"<length-percentage>\";inherits:false;initial-value:50%}@property --tw-gradient-to-position{syntax:\"<length-percentage>\";inherits:false;initial-value:100%}@property --tw-font-weight{syntax:\"*\";inherits:false}@property --tw-shadow{syntax:\"*\";inherits:false;initial-value:0 0 #0000}@property --tw-shadow-color{syntax:\"*\";inherits:false}@property --tw-shadow-alpha{syntax:\"<percentage>\";inherits:false;initial-value:100%}@property --tw-inset-shadow{syntax:\"*\";inherits:false;initial-value:0 0 #0000}@property --tw-inset-shadow-color{syntax:\"*\";inherits:false}@property --tw-inset-shadow-alpha{syntax:\"<percentage>\";inherits:false;initial-value:100%}@property --tw-ring-color{syntax:\"*\";inherits:false}@property --tw-ring-shadow{syntax:\"*\";inherits:false;initial-value:0 0 #0000}@property --tw-inset-ring-color{syntax:\"*\";inherits:false}@property --tw-inset-ring-shadow{syntax:\"*\";inherits:false;initial-value:0 0 #0000}@property --tw-ring-inset{syntax:\"*\";inherits:false}@property --tw-ring-offset-width{syntax:\"<length>\";inherits:false;initial-value:0}@property --tw-ring-offset-color{syntax:\"*\";inherits:false;initial-value:#fff}@property --tw-ring-offset-shadow{syntax:\"*\";inherits:false;initial-value:0 0 #0000}@property --tw-blur{syntax:\"*\";inherits:false}@property --tw-brightness{syntax:\"*\";inherits:false}@property --tw-contrast{syntax:\"*\";inherits:false}@property --tw-grayscale{syntax:\"*\";inherits:false}@property --tw-hue-rotate{syntax:\"*\";inherits:false}@property --tw-invert{syntax:\"*\";inherits:false}@property --tw-opacity{syntax:\"*\";inherits:false}@property --tw-saturate{syntax:\"*\";inherits:false}@property --tw-sepia{syntax:\"*\";inherits:false}@property --tw-drop-shadow{syntax:\"*\";inherits:false}@property --tw-drop-shadow-color{syntax:\"*\";inherits:false}@property --tw-drop-shadow-alpha{syntax:\"<percentage>\";inherits:false;initial-value:100%}@property --tw-drop-shadow-size{syntax:\"*\";inherits:false}@property --tw-backdrop-blur{syntax:\"*\";inherits:false}@property --tw-backdrop-brightness{syntax:\"*\";inherits:false}@property --tw-backdrop-contrast{syntax:\"*\";inherits:false}@property --tw-backdrop-grayscale{syntax:\"*\";inherits:false}@property --tw-backdrop-hue-rotate{syntax:\"*\";inherits:false}@property --tw-backdrop-invert{syntax:\"*\";inherits:false}@property --tw-backdrop-opacity{syntax:\"*\";inherits:false}@property --tw-backdrop-saturate{syntax:\"*\";inherits:false}@property --tw-backdrop-sepia{syntax:\"*\";inherits:false}@property --tw-duration{syntax:\"*\";inherits:false}@keyframes pulse{50%{opacity:.5}}\\n';\nvar f$8 = 0;\nfunction u$9(e2, t2, n2, o3, i2, u2) {\n  t2 || (t2 = {});\n  var a3, c2, p2 = t2;\n  if (\"ref\" in p2) for (c2 in p2 = {}, t2) \"ref\" == c2 ? a3 = t2[c2] : p2[c2] = t2[c2];\n  var l2 = { type: e2, props: p2, key: n2, ref: a3, __k: null, __: null, __b: 0, __e: null, __c: null, constructor: void 0, __v: --f$8, __i: -1, __u: 0, __source: i2, __self: u2 };\n  if (\"function\" == typeof e2 && (a3 = e2.defaultProps)) for (c2 in a3) void 0 === p2[c2] && (p2[c2] = a3[c2]);\n  return l$4.vnode && l$4.vnode(l2), l2;\n}\nvar t$5, r$4, u$8, i$7, o$8 = 0, f$7 = [], c$6 = l$4, e$4 = c$6.__b, a$a = c$6.__r, v$2 = c$6.diffed, l$3 = c$6.__c, m$5 = c$6.unmount, s$8 = c$6.__;\nfunction p$3(n2, t2) {\n  c$6.__h && c$6.__h(r$4, n2, o$8 || t2), o$8 = 0;\n  var u2 = r$4.__H || (r$4.__H = { __: [], __h: [] });\n  return n2 >= u2.__.length && u2.__.push({}), u2.__[n2];\n}\nfunction d$4(n2) {\n  return o$8 = 1, h$5(D$2, n2);\n}\nfunction h$5(n2, u2, i2) {\n  var o3 = p$3(t$5++, 2);\n  if (o3.t = n2, !o3.__c && (o3.__ = [i2 ? i2(u2) : D$2(void 0, u2), function(n3) {\n    var t2 = o3.__N ? o3.__N[0] : o3.__[0], r2 = o3.t(t2, n3);\n    t2 !== r2 && (o3.__N = [r2, o3.__[1]], o3.__c.setState({}));\n  }], o3.__c = r$4, !r$4.__f)) {\n    var f2 = function(n3, t2, r2) {\n      if (!o3.__c.__H) return true;\n      var u3 = o3.__c.__H.__.filter(function(n4) {\n        return !!n4.__c;\n      });\n      if (u3.every(function(n4) {\n        return !n4.__N;\n      })) return !c2 || c2.call(this, n3, t2, r2);\n      var i3 = o3.__c.props !== n3;\n      return u3.forEach(function(n4) {\n        if (n4.__N) {\n          var t3 = n4.__[0];\n          n4.__ = n4.__N, n4.__N = void 0, t3 !== n4.__[0] && (i3 = true);\n        }\n      }), c2 && c2.call(this, n3, t2, r2) || i3;\n    };\n    r$4.__f = true;\n    var c2 = r$4.shouldComponentUpdate, e2 = r$4.componentWillUpdate;\n    r$4.componentWillUpdate = function(n3, t2, r2) {\n      if (this.__e) {\n        var u3 = c2;\n        c2 = void 0, f2(n3, t2, r2), c2 = u3;\n      }\n      e2 && e2.call(this, n3, t2, r2);\n    }, r$4.shouldComponentUpdate = f2;\n  }\n  return o3.__N || o3.__;\n}\nfunction y$6(n2, u2) {\n  var i2 = p$3(t$5++, 3);\n  !c$6.__s && C$4(i2.__H, u2) && (i2.__ = n2, i2.u = u2, r$4.__H.__h.push(i2));\n}\nfunction _$3(n2, u2) {\n  var i2 = p$3(t$5++, 4);\n  !c$6.__s && C$4(i2.__H, u2) && (i2.__ = n2, i2.u = u2, r$4.__h.push(i2));\n}\nfunction A$3(n2) {\n  return o$8 = 5, T$5(function() {\n    return { current: n2 };\n  }, []);\n}\nfunction F$5(n2, t2, r2) {\n  o$8 = 6, _$3(function() {\n    if (\"function\" == typeof n2) {\n      var r3 = n2(t2());\n      return function() {\n        n2(null), r3 && \"function\" == typeof r3 && r3();\n      };\n    }\n    if (n2) return n2.current = t2(), function() {\n      return n2.current = null;\n    };\n  }, null == r2 ? r2 : r2.concat(n2));\n}\nfunction T$5(n2, r2) {\n  var u2 = p$3(t$5++, 7);\n  return C$4(u2.__H, r2) && (u2.__ = n2(), u2.__H = r2, u2.__h = n2), u2.__;\n}\nfunction q$3(n2, t2) {\n  return o$8 = 8, T$5(function() {\n    return n2;\n  }, t2);\n}\nfunction x$4(n2) {\n  var u2 = r$4.context[n2.__c], i2 = p$3(t$5++, 9);\n  return i2.c = n2, u2 ? (null == i2.__ && (i2.__ = true, u2.sub(r$4)), u2.props.value) : n2.__;\n}\nfunction P$5(n2, t2) {\n  c$6.useDebugValue && c$6.useDebugValue(t2 ? t2(n2) : n2);\n}\nfunction b$4(n2) {\n  var u2 = p$3(t$5++, 10), i2 = d$4();\n  return u2.__ = n2, r$4.componentDidCatch || (r$4.componentDidCatch = function(n3, t2) {\n    u2.__ && u2.__(n3, t2), i2[1](n3);\n  }), [i2[0], function() {\n    i2[1](void 0);\n  }];\n}\nfunction g$3() {\n  var n2 = p$3(t$5++, 11);\n  if (!n2.__) {\n    for (var u2 = r$4.__v; null !== u2 && !u2.__m && null !== u2.__; ) u2 = u2.__;\n    var i2 = u2.__m || (u2.__m = [0, 0]);\n    n2.__ = \"P\" + i2[0] + \"-\" + i2[1]++;\n  }\n  return n2.__;\n}\nfunction j$4() {\n  for (var n2; n2 = f$7.shift(); ) if (n2.__P && n2.__H) try {\n    n2.__H.__h.forEach(z$2), n2.__H.__h.forEach(B$2), n2.__H.__h = [];\n  } catch (t2) {\n    n2.__H.__h = [], c$6.__e(t2, n2.__v);\n  }\n}\nc$6.__b = function(n2) {\n  r$4 = null, e$4 && e$4(n2);\n}, c$6.__ = function(n2, t2) {\n  n2 && t2.__k && t2.__k.__m && (n2.__m = t2.__k.__m), s$8 && s$8(n2, t2);\n}, c$6.__r = function(n2) {\n  a$a && a$a(n2), t$5 = 0;\n  var i2 = (r$4 = n2.__c).__H;\n  i2 && (u$8 === r$4 ? (i2.__h = [], r$4.__h = [], i2.__.forEach(function(n3) {\n    n3.__N && (n3.__ = n3.__N), n3.u = n3.__N = void 0;\n  })) : (i2.__h.forEach(z$2), i2.__h.forEach(B$2), i2.__h = [], t$5 = 0)), u$8 = r$4;\n}, c$6.diffed = function(n2) {\n  v$2 && v$2(n2);\n  var t2 = n2.__c;\n  t2 && t2.__H && (t2.__H.__h.length && (1 !== f$7.push(t2) && i$7 === c$6.requestAnimationFrame || ((i$7 = c$6.requestAnimationFrame) || w$4)(j$4)), t2.__H.__.forEach(function(n3) {\n    n3.u && (n3.__H = n3.u), n3.u = void 0;\n  })), u$8 = r$4 = null;\n}, c$6.__c = function(n2, t2) {\n  t2.some(function(n3) {\n    try {\n      n3.__h.forEach(z$2), n3.__h = n3.__h.filter(function(n4) {\n        return !n4.__ || B$2(n4);\n      });\n    } catch (r2) {\n      t2.some(function(n4) {\n        n4.__h && (n4.__h = []);\n      }), t2 = [], c$6.__e(r2, n3.__v);\n    }\n  }), l$3 && l$3(n2, t2);\n}, c$6.unmount = function(n2) {\n  m$5 && m$5(n2);\n  var t2, r2 = n2.__c;\n  r2 && r2.__H && (r2.__H.__.forEach(function(n3) {\n    try {\n      z$2(n3);\n    } catch (n4) {\n      t2 = n4;\n    }\n  }), r2.__H = void 0, t2 && c$6.__e(t2, r2.__v));\n};\nvar k$2 = \"function\" == typeof requestAnimationFrame;\nfunction w$4(n2) {\n  var t2, r2 = function() {\n    clearTimeout(u2), k$2 && cancelAnimationFrame(t2), setTimeout(n2);\n  }, u2 = setTimeout(r2, 100);\n  k$2 && (t2 = requestAnimationFrame(r2));\n}\nfunction z$2(n2) {\n  var t2 = r$4, u2 = n2.__c;\n  \"function\" == typeof u2 && (n2.__c = void 0, u2()), r$4 = t2;\n}\nfunction B$2(n2) {\n  var t2 = r$4;\n  n2.__c = n2.__(), r$4 = t2;\n}\nfunction C$4(n2, t2) {\n  return !n2 || n2.length !== t2.length || t2.some(function(t3, r2) {\n    return t3 !== n2[r2];\n  });\n}\nfunction D$2(n2, t2) {\n  return \"function\" == typeof t2 ? t2(n2) : t2;\n}\nconst PluginContext = K$3([]);\nfunction PluginProvider({\n  children,\n  plugins\n}) {\n  return /* @__PURE__ */ u$9(PluginContext.Provider, { value: plugins, children });\n}\nfunction usePlugins() {\n  const plugin = x$4(PluginContext);\n  if (!plugin) return [];\n  return plugin;\n}\nfunction g$2(n2, t2) {\n  for (var e2 in t2) n2[e2] = t2[e2];\n  return n2;\n}\nfunction E$2(n2, t2) {\n  for (var e2 in n2) if (\"__source\" !== e2 && !(e2 in t2)) return true;\n  for (var r2 in t2) if (\"__source\" !== r2 && n2[r2] !== t2[r2]) return true;\n  return false;\n}\nfunction C$3(n2, t2) {\n  var e2 = t2(), r2 = d$4({ t: { __: e2, u: t2 } }), u2 = r2[0].t, o3 = r2[1];\n  return _$3(function() {\n    u2.__ = e2, u2.u = t2, x$3(u2) && o3({ t: u2 });\n  }, [n2, e2, t2]), y$6(function() {\n    return x$3(u2) && o3({ t: u2 }), n2(function() {\n      x$3(u2) && o3({ t: u2 });\n    });\n  }, [n2]), e2;\n}\nfunction x$3(n2) {\n  var t2, e2, r2 = n2.u, u2 = n2.__;\n  try {\n    var o3 = r2();\n    return !((t2 = u2) === (e2 = o3) && (0 !== t2 || 1 / t2 == 1 / e2) || t2 != t2 && e2 != e2);\n  } catch (n3) {\n    return true;\n  }\n}\nfunction R$3(n2) {\n  n2();\n}\nfunction w$3(n2) {\n  return n2;\n}\nfunction k$1() {\n  return [false, R$3];\n}\nvar I$3 = _$3;\nfunction N$1(n2, t2) {\n  this.props = n2, this.context = t2;\n}\nfunction M$3(n2, e2) {\n  function r2(n3) {\n    var t2 = this.props.ref, r3 = t2 == n3.ref;\n    return !r3 && t2 && (t2.call ? t2(null) : t2.current = null), e2 ? !e2(this.props, n3) || !r3 : E$2(this.props, n3);\n  }\n  function u2(e3) {\n    return this.shouldComponentUpdate = r2, _$4(n2, e3);\n  }\n  return u2.displayName = \"Memo(\" + (n2.displayName || n2.name) + \")\", u2.prototype.isReactComponent = true, u2.__f = true, u2;\n}\n(N$1.prototype = new x$5()).isPureReactComponent = true, N$1.prototype.shouldComponentUpdate = function(n2, t2) {\n  return E$2(this.props, n2) || E$2(this.state, t2);\n};\nvar T$4 = l$4.__b;\nl$4.__b = function(n2) {\n  n2.type && n2.type.__f && n2.ref && (n2.props.ref = n2.ref, n2.ref = null), T$4 && T$4(n2);\n};\nvar A$2 = \"undefined\" != typeof Symbol && Symbol.for && Symbol.for(\"react.forward_ref\") || 3911;\nfunction D$1(n2) {\n  function t2(t3) {\n    var e2 = g$2({}, t3);\n    return delete e2.ref, n2(e2, t3.ref || null);\n  }\n  return t2.$$typeof = A$2, t2.render = t2, t2.prototype.isReactComponent = t2.__f = true, t2.displayName = \"ForwardRef(\" + (n2.displayName || n2.name) + \")\", t2;\n}\nvar L$3 = function(n2, t2) {\n  return null == n2 ? null : H$6(H$6(n2).map(t2));\n}, O$2 = { map: L$3, forEach: L$3, count: function(n2) {\n  return n2 ? H$6(n2).length : 0;\n}, only: function(n2) {\n  var t2 = H$6(n2);\n  if (1 !== t2.length) throw \"Children.only\";\n  return t2[0];\n}, toArray: H$6 }, F$4 = l$4.__e;\nl$4.__e = function(n2, t2, e2, r2) {\n  if (n2.then) {\n    for (var u2, o3 = t2; o3 = o3.__; ) if ((u2 = o3.__c) && u2.__c) return null == t2.__e && (t2.__e = e2.__e, t2.__k = e2.__k), u2.__c(n2, t2);\n  }\n  F$4(n2, t2, e2, r2);\n};\nvar U$3 = l$4.unmount;\nfunction V$1(n2, t2, e2) {\n  return n2 && (n2.__c && n2.__c.__H && (n2.__c.__H.__.forEach(function(n3) {\n    \"function\" == typeof n3.__c && n3.__c();\n  }), n2.__c.__H = null), null != (n2 = g$2({}, n2)).__c && (n2.__c.__P === e2 && (n2.__c.__P = t2), n2.__c.__e = true, n2.__c = null), n2.__k = n2.__k && n2.__k.map(function(n3) {\n    return V$1(n3, t2, e2);\n  })), n2;\n}\nfunction W(n2, t2, e2) {\n  return n2 && e2 && (n2.__v = null, n2.__k = n2.__k && n2.__k.map(function(n3) {\n    return W(n3, t2, e2);\n  }), n2.__c && n2.__c.__P === t2 && (n2.__e && e2.appendChild(n2.__e), n2.__c.__e = true, n2.__c.__P = e2)), n2;\n}\nfunction P$4() {\n  this.__u = 0, this.o = null, this.__b = null;\n}\nfunction j$3(n2) {\n  var t2 = n2.__.__c;\n  return t2 && t2.__a && t2.__a(n2);\n}\nfunction z$1(n2) {\n  var e2, r2, u2;\n  function o3(o4) {\n    if (e2 || (e2 = n2()).then(function(n3) {\n      r2 = n3.default || n3;\n    }, function(n3) {\n      u2 = n3;\n    }), u2) throw u2;\n    if (!r2) throw e2;\n    return _$4(r2, o4);\n  }\n  return o3.displayName = \"Lazy\", o3.__f = true, o3;\n}\nfunction B$1() {\n  this.i = null, this.l = null;\n}\nl$4.unmount = function(n2) {\n  var t2 = n2.__c;\n  t2 && t2.__R && t2.__R(), t2 && 32 & n2.__u && (n2.type = null), U$3 && U$3(n2);\n}, (P$4.prototype = new x$5()).__c = function(n2, t2) {\n  var e2 = t2.__c, r2 = this;\n  null == r2.o && (r2.o = []), r2.o.push(e2);\n  var u2 = j$3(r2.__v), o3 = false, i2 = function() {\n    o3 || (o3 = true, e2.__R = null, u2 ? u2(l2) : l2());\n  };\n  e2.__R = i2;\n  var l2 = function() {\n    if (!--r2.__u) {\n      if (r2.state.__a) {\n        var n3 = r2.state.__a;\n        r2.__v.__k[0] = W(n3, n3.__c.__P, n3.__c.__O);\n      }\n      var t3;\n      for (r2.setState({ __a: r2.__b = null }); t3 = r2.o.pop(); ) t3.forceUpdate();\n    }\n  };\n  r2.__u++ || 32 & t2.__u || r2.setState({ __a: r2.__b = r2.__v.__k[0] }), n2.then(i2, i2);\n}, P$4.prototype.componentWillUnmount = function() {\n  this.o = [];\n}, P$4.prototype.render = function(n2, e2) {\n  if (this.__b) {\n    if (this.__v.__k) {\n      var r2 = document.createElement(\"div\"), o3 = this.__v.__k[0].__c;\n      this.__v.__k[0] = V$1(this.__b, r2, o3.__O = o3.__P);\n    }\n    this.__b = null;\n  }\n  var i2 = e2.__a && _$4(k$3, null, n2.fallback);\n  return i2 && (i2.__u &= -33), [_$4(k$3, null, e2.__a ? null : n2.children), i2];\n};\nvar H$5 = function(n2, t2, e2) {\n  if (++e2[1] === e2[0] && n2.l.delete(t2), n2.props.revealOrder && (\"t\" !== n2.props.revealOrder[0] || !n2.l.size)) for (e2 = n2.i; e2; ) {\n    for (; e2.length > 3; ) e2.pop()();\n    if (e2[1] < e2[0]) break;\n    n2.i = e2 = e2[2];\n  }\n};\nfunction Z(n2) {\n  return this.getChildContext = function() {\n    return n2.context;\n  }, n2.children;\n}\nfunction Y(n2) {\n  var e2 = this, r2 = n2.h;\n  if (e2.componentWillUnmount = function() {\n    E$3(null, e2.v), e2.v = null, e2.h = null;\n  }, e2.h && e2.h !== r2 && e2.componentWillUnmount(), !e2.v) {\n    for (var u2 = e2.__v; null !== u2 && !u2.__m && null !== u2.__; ) u2 = u2.__;\n    e2.h = r2, e2.v = { nodeType: 1, parentNode: r2, childNodes: [], __k: { __m: u2.__m }, contains: function() {\n      return true;\n    }, appendChild: function(n3) {\n      this.childNodes.push(n3), e2.h.appendChild(n3);\n    }, insertBefore: function(n3, t2) {\n      this.childNodes.push(n3), e2.h.insertBefore(n3, t2);\n    }, removeChild: function(n3) {\n      this.childNodes.splice(this.childNodes.indexOf(n3) >>> 1, 1), e2.h.removeChild(n3);\n    } };\n  }\n  E$3(_$4(Z, { context: e2.context }, n2.__v), e2.v);\n}\nfunction $$1(n2, e2) {\n  var r2 = _$4(Y, { __v: n2, h: e2 });\n  return r2.containerInfo = e2, r2;\n}\n(B$1.prototype = new x$5()).__a = function(n2) {\n  var t2 = this, e2 = j$3(t2.__v), r2 = t2.l.get(n2);\n  return r2[0]++, function(u2) {\n    var o3 = function() {\n      t2.props.revealOrder ? (r2.push(u2), H$5(t2, n2, r2)) : u2();\n    };\n    e2 ? e2(o3) : o3();\n  };\n}, B$1.prototype.render = function(n2) {\n  this.i = null, this.l = /* @__PURE__ */ new Map();\n  var t2 = H$6(n2.children);\n  n2.revealOrder && \"b\" === n2.revealOrder[0] && t2.reverse();\n  for (var e2 = t2.length; e2--; ) this.l.set(t2[e2], this.i = [1, 0, this.i]);\n  return n2.children;\n}, B$1.prototype.componentDidUpdate = B$1.prototype.componentDidMount = function() {\n  var n2 = this;\n  this.l.forEach(function(t2, e2) {\n    H$5(n2, e2, t2);\n  });\n};\nvar q$2 = \"undefined\" != typeof Symbol && Symbol.for && Symbol.for(\"react.element\") || 60103, G$2 = /^(?:accent|alignment|arabic|baseline|cap|clip(?!PathU)|color|dominant|fill|flood|font|glyph(?!R)|horiz|image(!S)|letter|lighting|marker(?!H|W|U)|overline|paint|pointer|shape|stop|strikethrough|stroke|text(?!L)|transform|underline|unicode|units|v|vector|vert|word|writing|x(?!C))[A-Z]/, J$3 = /^on(Ani|Tra|Tou|BeforeInp|Compo)/, K$2 = /[A-Z0-9]/g, Q = \"undefined\" != typeof document, X$1 = function(n2) {\n  return (\"undefined\" != typeof Symbol && \"symbol\" == typeof Symbol() ? /fil|che|rad/ : /fil|che|ra/).test(n2);\n};\nfunction nn(n2, t2, e2) {\n  return null == t2.__k && (t2.textContent = \"\"), E$3(n2, t2), \"function\" == typeof e2 && e2(), n2 ? n2.__c : null;\n}\nfunction tn(n2, t2, e2) {\n  return G$3(n2, t2), \"function\" == typeof e2 && e2(), n2 ? n2.__c : null;\n}\nx$5.prototype.isReactComponent = {}, [\"componentWillMount\", \"componentWillReceiveProps\", \"componentWillUpdate\"].forEach(function(t2) {\n  Object.defineProperty(x$5.prototype, t2, { configurable: true, get: function() {\n    return this[\"UNSAFE_\" + t2];\n  }, set: function(n2) {\n    Object.defineProperty(this, t2, { configurable: true, writable: true, value: n2 });\n  } });\n});\nvar en = l$4.event;\nfunction rn() {\n}\nfunction un() {\n  return this.cancelBubble;\n}\nfunction on() {\n  return this.defaultPrevented;\n}\nl$4.event = function(n2) {\n  return en && (n2 = en(n2)), n2.persist = rn, n2.isPropagationStopped = un, n2.isDefaultPrevented = on, n2.nativeEvent = n2;\n};\nvar ln, cn$1 = { enumerable: false, configurable: true, get: function() {\n  return this.class;\n} }, fn = l$4.vnode;\nl$4.vnode = function(n2) {\n  \"string\" == typeof n2.type && function(n3) {\n    var t2 = n3.props, e2 = n3.type, u2 = {}, o3 = -1 === e2.indexOf(\"-\");\n    for (var i2 in t2) {\n      var l2 = t2[i2];\n      if (!(\"value\" === i2 && \"defaultValue\" in t2 && null == l2 || Q && \"children\" === i2 && \"noscript\" === e2 || \"class\" === i2 || \"className\" === i2)) {\n        var c2 = i2.toLowerCase();\n        \"defaultValue\" === i2 && \"value\" in t2 && null == t2.value ? i2 = \"value\" : \"download\" === i2 && true === l2 ? l2 = \"\" : \"translate\" === c2 && \"no\" === l2 ? l2 = false : \"o\" === c2[0] && \"n\" === c2[1] ? \"ondoubleclick\" === c2 ? i2 = \"ondblclick\" : \"onchange\" !== c2 || \"input\" !== e2 && \"textarea\" !== e2 || X$1(t2.type) ? \"onfocus\" === c2 ? i2 = \"onfocusin\" : \"onblur\" === c2 ? i2 = \"onfocusout\" : J$3.test(i2) && (i2 = c2) : c2 = i2 = \"oninput\" : o3 && G$2.test(i2) ? i2 = i2.replace(K$2, \"-$&\").toLowerCase() : null === l2 && (l2 = void 0), \"oninput\" === c2 && u2[i2 = c2] && (i2 = \"oninputCapture\"), u2[i2] = l2;\n      }\n    }\n    \"select\" == e2 && u2.multiple && Array.isArray(u2.value) && (u2.value = H$6(t2.children).forEach(function(n4) {\n      n4.props.selected = -1 != u2.value.indexOf(n4.props.value);\n    })), \"select\" == e2 && null != u2.defaultValue && (u2.value = H$6(t2.children).forEach(function(n4) {\n      n4.props.selected = u2.multiple ? -1 != u2.defaultValue.indexOf(n4.props.value) : u2.defaultValue == n4.props.value;\n    })), t2.class && !t2.className ? (u2.class = t2.class, Object.defineProperty(u2, \"className\", cn$1)) : (t2.className && !t2.class || t2.class && t2.className) && (u2.class = u2.className = t2.className), n3.props = u2;\n  }(n2), n2.$$typeof = q$2, fn && fn(n2);\n};\nvar an = l$4.__r;\nl$4.__r = function(n2) {\n  an && an(n2), ln = n2.__c;\n};\nvar sn = l$4.diffed;\nl$4.diffed = function(n2) {\n  sn && sn(n2);\n  var t2 = n2.props, e2 = n2.__e;\n  null != e2 && \"textarea\" === n2.type && \"value\" in t2 && t2.value !== e2.value && (e2.value = null == t2.value ? \"\" : t2.value), ln = null;\n};\nvar hn = { ReactCurrentDispatcher: { current: { readContext: function(n2) {\n  return ln.__n[n2.__c].props.value;\n}, useCallback: q$3, useContext: x$4, useDebugValue: P$5, useDeferredValue: w$3, useEffect: y$6, useId: g$3, useImperativeHandle: F$5, useInsertionEffect: I$3, useLayoutEffect: _$3, useMemo: T$5, useReducer: h$5, useRef: A$3, useState: d$4, useSyncExternalStore: C$3, useTransition: k$1 } } }, vn = \"18.3.1\";\nfunction dn(n2) {\n  return _$4.bind(null, n2);\n}\nfunction mn(n2) {\n  return !!n2 && n2.$$typeof === q$2;\n}\nfunction pn(n2) {\n  return mn(n2) && n2.type === k$3;\n}\nfunction yn(n2) {\n  return !!n2 && !!n2.displayName && (\"string\" == typeof n2.displayName || n2.displayName instanceof String) && n2.displayName.startsWith(\"Memo(\");\n}\nfunction _n(n2) {\n  return mn(n2) ? J$4.apply(null, arguments) : n2;\n}\nfunction bn(n2) {\n  return !!n2.__k && (E$3(null, n2), true);\n}\nfunction Sn(n2) {\n  return n2 && (n2.base || 1 === n2.nodeType && n2) || null;\n}\nvar gn = function(n2, t2) {\n  return n2(t2);\n}, En = function(n2, t2) {\n  return n2(t2);\n}, Cn = k$3, xn = mn, Rn = { useState: d$4, useId: g$3, useReducer: h$5, useEffect: y$6, useLayoutEffect: _$3, useInsertionEffect: I$3, useTransition: k$1, useDeferredValue: w$3, useSyncExternalStore: C$3, startTransition: R$3, useRef: A$3, useImperativeHandle: F$5, useMemo: T$5, useCallback: q$3, useContext: x$4, useDebugValue: P$5, version: \"18.3.1\", Children: O$2, render: nn, hydrate: tn, unmountComponentAtNode: bn, createPortal: $$1, createElement: _$4, createContext: K$3, createFactory: dn, cloneElement: _n, createRef: b$5, Fragment: k$3, isValidElement: mn, isElement: xn, isFragment: pn, isMemo: yn, findDOMNode: Sn, Component: x$5, PureComponent: N$1, memo: M$3, forwardRef: D$1, flushSync: En, unstable_batchedUpdates: gn, StrictMode: Cn, Suspense: P$4, SuspenseList: B$1, lazy: z$1, __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED: hn };\nconst t$4 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({\n  __proto__: null,\n  Children: O$2,\n  Component: x$5,\n  Fragment: k$3,\n  PureComponent: N$1,\n  StrictMode: Cn,\n  Suspense: P$4,\n  SuspenseList: B$1,\n  __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED: hn,\n  cloneElement: _n,\n  createContext: K$3,\n  createElement: _$4,\n  createFactory: dn,\n  createPortal: $$1,\n  createRef: b$5,\n  default: Rn,\n  findDOMNode: Sn,\n  flushSync: En,\n  forwardRef: D$1,\n  hydrate: tn,\n  isElement: xn,\n  isFragment: pn,\n  isMemo: yn,\n  isValidElement: mn,\n  lazy: z$1,\n  memo: M$3,\n  render: nn,\n  startTransition: R$3,\n  unmountComponentAtNode: bn,\n  unstable_batchedUpdates: gn,\n  useCallback: q$3,\n  useContext: x$4,\n  useDebugValue: P$5,\n  useDeferredValue: w$3,\n  useEffect: y$6,\n  useErrorBoundary: b$4,\n  useId: g$3,\n  useImperativeHandle: F$5,\n  useInsertionEffect: I$3,\n  useLayoutEffect: _$3,\n  useMemo: T$5,\n  useReducer: h$5,\n  useRef: A$3,\n  useState: d$4,\n  useSyncExternalStore: C$3,\n  useTransition: k$1,\n  version: vn\n}, Symbol.toStringTag, { value: \"Module\" }));\nvar __require = /* @__PURE__ */ ((x2) => typeof require !== \"undefined\" ? require : typeof Proxy !== \"undefined\" ? new Proxy(x2, {\n  get: (a3, b2) => (typeof require !== \"undefined\" ? require : a3)[b2]\n}) : x2)(function(x2) {\n  if (typeof require !== \"undefined\") return require.apply(this, arguments);\n  throw Error('Dynamic require of \"' + x2 + '\" is not supported');\n});\nvar DEFAULT_OPTIONS = {\n  maxReconnectAttempts: 5,\n  reconnectDelay: 1e3,\n  requestTimeout: 3e4\n  // Extended timeout for longer operations\n};\nvar WebSocketRpcBridge = class {\n  constructor(options = {}) {\n    this.ws = null;\n    this.pendingRequests = /* @__PURE__ */ new Map();\n    this.reconnectAttempts = 0;\n    this.methods = {};\n    this.isIntentionalClose = false;\n    this.options = { ...DEFAULT_OPTIONS, ...options };\n  }\n  /**\n   * Register RPC method handlers\n   * @param methodHandlers Object containing method handlers\n   */\n  register(methodHandlers) {\n    Object.entries(methodHandlers).forEach(([methodName, handler]) => {\n      this.methods[methodName] = { handler };\n    });\n  }\n  /**\n   * Generic method to call a remote procedure with support for streaming updates\n   * @param method Method name to call\n   * @param payload Request payload\n   * @param onUpdate Optional callback for progress updates\n   * @returns Promise resolving with the response\n   */\n  callMethod(method, payload, onUpdate) {\n    if (!this.ws) {\n      throw new Error(\"WebSocket is not connected\");\n    }\n    const id = crypto.randomUUID();\n    const requestMessage = {\n      id,\n      messageType: \"request\",\n      method,\n      payload\n    };\n    return new Promise((resolve, reject) => {\n      var _a;\n      const timeout = setTimeout(() => {\n        this.pendingRequests.delete(id);\n        reject(new Error(`Request timed out: ${method}`));\n      }, this.options.requestTimeout);\n      this.pendingRequests.set(id, { resolve, reject, timeout, onUpdate });\n      (_a = this.ws) == null ? void 0 : _a.send(JSON.stringify(requestMessage));\n    });\n  }\n  /**\n   * Sets up WebSocket event handlers\n   * @param ws WebSocket instance\n   */\n  setupWebSocketHandlers(ws) {\n    ws.onmessage = (event) => {\n      try {\n        const message = JSON.parse(event.data);\n        this.handleMessage(message);\n      } catch (error2) {\n        console.error(\"Error handling WebSocket message:\", error2);\n      }\n    };\n    ws.onclose = () => {\n      console.log(\"WebSocket disconnected\");\n      this.handleDisconnect();\n    };\n    ws.onerror = (event) => {\n      console.error(\"WebSocket error:\", event);\n    };\n  }\n  /**\n   * Handles incoming WebSocket messages\n   * @param message The message to handle\n   */\n  handleMessage(message) {\n    const { messageType, id } = message;\n    switch (messageType) {\n      case \"request\":\n        this.handleRequest(message);\n        break;\n      case \"response\":\n        this.handleResponse(id, message.payload);\n        break;\n      case \"update\":\n        this.handleUpdate(id, message.payload);\n        break;\n      case \"error\":\n        this.handleError(id, message.error.message);\n        break;\n      default:\n        console.warn(`Unknown message type: ${messageType}`);\n    }\n  }\n  /**\n   * Handle incoming requests by invoking the registered method\n   * @param message Request message\n   */\n  async handleRequest(message) {\n    const { id, method, payload } = message;\n    if (!method) {\n      this.sendError(id, \"Method name is required\");\n      return;\n    }\n    const methodDef = this.methods[method];\n    if (!methodDef) {\n      this.sendError(id, `Method not found: ${method}`);\n      return;\n    }\n    try {\n      const sendUpdate = (update) => {\n        this.sendUpdate(id, method, update);\n      };\n      const result = await methodDef.handler(payload, sendUpdate);\n      this.sendResponse(id, method, result);\n    } catch (error2) {\n      this.sendError(\n        id,\n        error2 instanceof Error ? error2.message : String(error2)\n      );\n    }\n  }\n  /**\n   * Handle response messages by resolving the pending request\n   * @param id Request ID\n   * @param payload Response payload\n   */\n  handleResponse(id, payload) {\n    const pendingRequest = this.pendingRequests.get(id);\n    if (!pendingRequest) {\n      console.warn(`Received response for unknown request ID: ${id}`);\n      return;\n    }\n    clearTimeout(pendingRequest.timeout);\n    this.pendingRequests.delete(id);\n    pendingRequest.resolve(payload);\n  }\n  /**\n   * Handle update messages by calling the update callback\n   * @param id Request ID\n   * @param payload Update payload\n   */\n  handleUpdate(id, payload) {\n    const pendingRequest = this.pendingRequests.get(id);\n    if (!pendingRequest || !pendingRequest.onUpdate) {\n      console.warn(`Received update for unknown request ID: ${id}`);\n      return;\n    }\n    pendingRequest.onUpdate(payload);\n  }\n  /**\n   * Handle error messages by rejecting the pending request\n   * @param id Request ID\n   * @param error Error message\n   */\n  handleError(id, error2) {\n    const pendingRequest = this.pendingRequests.get(id);\n    if (!pendingRequest) {\n      console.warn(`Received error for unknown request ID: ${id}`);\n      return;\n    }\n    clearTimeout(pendingRequest.timeout);\n    this.pendingRequests.delete(id);\n    pendingRequest.reject(new Error(error2));\n  }\n  /**\n   * Send a response message\n   * @param id Request ID\n   * @param method Method name\n   * @param payload Response payload\n   */\n  sendResponse(id, method, payload) {\n    if (!this.ws) {\n      throw new Error(\"WebSocket is not connected\");\n    }\n    const responseMessage = {\n      id,\n      messageType: \"response\",\n      method,\n      payload\n    };\n    this.ws.send(JSON.stringify(responseMessage));\n  }\n  /**\n   * Send an update message for streaming\n   * @param id Request ID\n   * @param method Method name\n   * @param payload Update payload\n   */\n  sendUpdate(id, method, payload) {\n    if (!this.ws) {\n      throw new Error(\"WebSocket is not connected\");\n    }\n    const updateMessage = {\n      id,\n      messageType: \"update\",\n      method,\n      payload\n    };\n    this.ws.send(JSON.stringify(updateMessage));\n  }\n  /**\n   * Send an error message\n   * @param id Request ID\n   * @param errorMessage Error message\n   */\n  sendError(id, errorMessage) {\n    if (!this.ws) {\n      throw new Error(\"WebSocket is not connected\");\n    }\n    const errorResponse = {\n      id,\n      messageType: \"error\",\n      error: {\n        message: errorMessage\n      }\n    };\n    this.ws.send(JSON.stringify(errorResponse));\n  }\n  /**\n   * Handle disconnection by attempting to reconnect\n   */\n  handleDisconnect() {\n    if (this.isIntentionalClose) {\n      console.log(\n        \"WebSocket closed intentionally, not attempting to reconnect\"\n      );\n      this.clearPendingRequests(new Error(\"Connection closed by user\"));\n      return;\n    }\n    if (this.reconnectAttempts < this.options.maxReconnectAttempts) {\n      this.reconnectAttempts++;\n      console.log(\n        `Attempting to reconnect (${this.reconnectAttempts}/${this.options.maxReconnectAttempts})...`\n      );\n      setTimeout(\n        () => this.reconnect(),\n        this.options.reconnectDelay * this.reconnectAttempts\n      );\n    } else {\n      console.error(\"Max reconnection attempts reached\");\n      this.clearPendingRequests(new Error(\"Connection closed\"));\n    }\n  }\n  /**\n   * Clear all pending requests with an error\n   * @param error Error to reject with\n   */\n  clearPendingRequests(error2) {\n    this.pendingRequests.forEach(({ reject }) => {\n      reject(error2);\n    });\n    this.pendingRequests.clear();\n  }\n  /**\n   * Close the WebSocket connection\n   * @returns Promise that resolves when the connection is closed\n   */\n  async close() {\n    this.isIntentionalClose = true;\n    if (this.ws) {\n      this.ws.close();\n      this.ws = null;\n    }\n    this.clearPendingRequests(new Error(\"Connection closed by user\"));\n  }\n};\ntypeof window !== \"undefined\" ? window.WebSocket : __require(\"ws\").WebSocket;\nfunction createBridgeContract(contract2) {\n  return contract2;\n}\nfunction validateWithZod(schema, data, context, silent = false) {\n  const result = schema.safeParse(data);\n  if (!result.success) {\n    const error2 = new Error(\n      `Validation failed for ${context}: ${result.error.message}`\n    );\n    if (silent) {\n      console.error(error2);\n      return data;\n    }\n    throw error2;\n  }\n  return result.data;\n}\nvar WebSocketImpl2 = typeof window !== \"undefined\" ? window.WebSocket : __require(\"ws\").WebSocket;\nvar ZodTypedBridge = class {\n  constructor(bridge, contract2) {\n    this.bridge = bridge;\n    this.contract = contract2;\n    this.call = new Proxy({}, {\n      get: (target, prop) => {\n        return (request, options) => {\n          return this.callMethod(prop, request, options);\n        };\n      }\n    });\n  }\n  async callMethod(method, request, options) {\n    const methodContract = this.contract.consumes[method];\n    if (!methodContract) {\n      throw new Error(`Method ${String(method)} not found in contract`);\n    }\n    const validatedRequest = validateWithZod(\n      methodContract.request,\n      request,\n      `request for method ${String(method)}`\n    );\n    const onUpdate = (options == null ? void 0 : options.onUpdate) && methodContract.update ? (update) => {\n      var _a;\n      if (!methodContract.update) return;\n      try {\n        const validatedUpdate = validateWithZod(\n          methodContract.update,\n          update,\n          `update for method ${String(method)}`,\n          true\n          // silently log validation errors\n        );\n        (_a = options.onUpdate) == null ? void 0 : _a.call(options, validatedUpdate);\n      } catch (error2) {\n        console.error(\"Update validation failed:\", error2);\n      }\n    } : void 0;\n    const response = await this.bridge.callMethod(\n      method,\n      validatedRequest,\n      onUpdate\n    );\n    return validateWithZod(\n      methodContract.response,\n      response,\n      `response for method ${String(method)}`\n    );\n  }\n  register(implementations) {\n    const wrappedImplementations = {};\n    for (const [method, implementation] of Object.entries(implementations)) {\n      const methodContract = this.contract.serves[method];\n      if (!methodContract) {\n        throw new Error(`Method ${method} not found in contract`);\n      }\n      wrappedImplementations[method] = async (request, sendUpdate) => {\n        const validatedRequest = validateWithZod(\n          methodContract.request,\n          request,\n          `request for method ${method}`\n        );\n        const wrappedSendUpdate = methodContract.update && sendUpdate ? (update) => {\n          if (!methodContract.update) return;\n          try {\n            const validatedUpdate = validateWithZod(\n              methodContract.update,\n              update,\n              `update for method ${method}`,\n              true\n              // silently log validation errors\n            );\n            sendUpdate(validatedUpdate);\n          } catch (error2) {\n            console.error(\"Update validation failed:\", error2);\n          }\n        } : void 0;\n        const response = await implementation(validatedRequest, {\n          sendUpdate: wrappedSendUpdate\n        });\n        return validateWithZod(\n          methodContract.response,\n          response,\n          `response for method ${method}`\n        );\n      };\n    }\n    this.bridge.register(wrappedImplementations);\n  }\n  async close() {\n    await this.bridge.close();\n  }\n};\nvar ClientBridge = class extends WebSocketRpcBridge {\n  constructor(url, options) {\n    super(options);\n    this.reconnectTimer = null;\n    this.url = url;\n  }\n  call(method, payload, onUpdate) {\n    return this.callMethod(method, payload, onUpdate);\n  }\n  reconnect() {\n    if (this.reconnectTimer) {\n      clearTimeout(this.reconnectTimer);\n    }\n    this.reconnectTimer = setTimeout(async () => {\n      try {\n        await this.connect();\n      } catch (error2) {\n        this.reconnect();\n      }\n    }, this.options.reconnectDelay);\n  }\n  connect() {\n    return new Promise((resolve, reject) => {\n      try {\n        const ws = new WebSocketImpl2(this.url);\n        ws.onopen = () => {\n          this.ws = ws;\n          this.setupWebSocketHandlers(ws);\n          resolve();\n        };\n        ws.onerror = () => {\n          reject(new Error(\"Failed to connect to WebSocket server\"));\n        };\n      } catch (error2) {\n        reject(error2);\n      }\n    });\n  }\n};\nvar ZodClient = class extends ZodTypedBridge {\n  constructor(url, contract2, options) {\n    super(new ClientBridge(url, options), {\n      serves: contract2.client || {},\n      consumes: contract2.server || {}\n    });\n  }\n  connect() {\n    return this.bridge.connect();\n  }\n};\nfunction createSRPCClientBridge(url, contract2, options) {\n  return new ZodClient(url, contract2, options);\n}\nvar util;\n(function(util2) {\n  util2.assertEqual = (val) => val;\n  function assertIs(_arg) {\n  }\n  util2.assertIs = assertIs;\n  function assertNever(_x) {\n    throw new Error();\n  }\n  util2.assertNever = assertNever;\n  util2.arrayToEnum = (items) => {\n    const obj = {};\n    for (const item of items) {\n      obj[item] = item;\n    }\n    return obj;\n  };\n  util2.getValidEnumValues = (obj) => {\n    const validKeys = util2.objectKeys(obj).filter((k2) => typeof obj[obj[k2]] !== \"number\");\n    const filtered = {};\n    for (const k2 of validKeys) {\n      filtered[k2] = obj[k2];\n    }\n    return util2.objectValues(filtered);\n  };\n  util2.objectValues = (obj) => {\n    return util2.objectKeys(obj).map(function(e2) {\n      return obj[e2];\n    });\n  };\n  util2.objectKeys = typeof Object.keys === \"function\" ? (obj) => Object.keys(obj) : (object) => {\n    const keys = [];\n    for (const key in object) {\n      if (Object.prototype.hasOwnProperty.call(object, key)) {\n        keys.push(key);\n      }\n    }\n    return keys;\n  };\n  util2.find = (arr, checker) => {\n    for (const item of arr) {\n      if (checker(item))\n        return item;\n    }\n    return void 0;\n  };\n  util2.isInteger = typeof Number.isInteger === \"function\" ? (val) => Number.isInteger(val) : (val) => typeof val === \"number\" && isFinite(val) && Math.floor(val) === val;\n  function joinValues(array, separator = \" | \") {\n    return array.map((val) => typeof val === \"string\" ? `'${val}'` : val).join(separator);\n  }\n  util2.joinValues = joinValues;\n  util2.jsonStringifyReplacer = (_2, value) => {\n    if (typeof value === \"bigint\") {\n      return value.toString();\n    }\n    return value;\n  };\n})(util || (util = {}));\nvar objectUtil;\n(function(objectUtil2) {\n  objectUtil2.mergeShapes = (first, second) => {\n    return {\n      ...first,\n      ...second\n      // second overwrites first\n    };\n  };\n})(objectUtil || (objectUtil = {}));\nconst ZodParsedType = util.arrayToEnum([\n  \"string\",\n  \"nan\",\n  \"number\",\n  \"integer\",\n  \"float\",\n  \"boolean\",\n  \"date\",\n  \"bigint\",\n  \"symbol\",\n  \"function\",\n  \"undefined\",\n  \"null\",\n  \"array\",\n  \"object\",\n  \"unknown\",\n  \"promise\",\n  \"void\",\n  \"never\",\n  \"map\",\n  \"set\"\n]);\nconst getParsedType = (data) => {\n  const t2 = typeof data;\n  switch (t2) {\n    case \"undefined\":\n      return ZodParsedType.undefined;\n    case \"string\":\n      return ZodParsedType.string;\n    case \"number\":\n      return isNaN(data) ? ZodParsedType.nan : ZodParsedType.number;\n    case \"boolean\":\n      return ZodParsedType.boolean;\n    case \"function\":\n      return ZodParsedType.function;\n    case \"bigint\":\n      return ZodParsedType.bigint;\n    case \"symbol\":\n      return ZodParsedType.symbol;\n    case \"object\":\n      if (Array.isArray(data)) {\n        return ZodParsedType.array;\n      }\n      if (data === null) {\n        return ZodParsedType.null;\n      }\n      if (data.then && typeof data.then === \"function\" && data.catch && typeof data.catch === \"function\") {\n        return ZodParsedType.promise;\n      }\n      if (typeof Map !== \"undefined\" && data instanceof Map) {\n        return ZodParsedType.map;\n      }\n      if (typeof Set !== \"undefined\" && data instanceof Set) {\n        return ZodParsedType.set;\n      }\n      if (typeof Date !== \"undefined\" && data instanceof Date) {\n        return ZodParsedType.date;\n      }\n      return ZodParsedType.object;\n    default:\n      return ZodParsedType.unknown;\n  }\n};\nconst ZodIssueCode = util.arrayToEnum([\n  \"invalid_type\",\n  \"invalid_literal\",\n  \"custom\",\n  \"invalid_union\",\n  \"invalid_union_discriminator\",\n  \"invalid_enum_value\",\n  \"unrecognized_keys\",\n  \"invalid_arguments\",\n  \"invalid_return_type\",\n  \"invalid_date\",\n  \"invalid_string\",\n  \"too_small\",\n  \"too_big\",\n  \"invalid_intersection_types\",\n  \"not_multiple_of\",\n  \"not_finite\"\n]);\nconst quotelessJson = (obj) => {\n  const json = JSON.stringify(obj, null, 2);\n  return json.replace(/\"([^\"]+)\":/g, \"$1:\");\n};\nclass ZodError extends Error {\n  get errors() {\n    return this.issues;\n  }\n  constructor(issues) {\n    super();\n    this.issues = [];\n    this.addIssue = (sub) => {\n      this.issues = [...this.issues, sub];\n    };\n    this.addIssues = (subs = []) => {\n      this.issues = [...this.issues, ...subs];\n    };\n    const actualProto = new.target.prototype;\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(this, actualProto);\n    } else {\n      this.__proto__ = actualProto;\n    }\n    this.name = \"ZodError\";\n    this.issues = issues;\n  }\n  format(_mapper) {\n    const mapper = _mapper || function(issue) {\n      return issue.message;\n    };\n    const fieldErrors = { _errors: [] };\n    const processError = (error2) => {\n      for (const issue of error2.issues) {\n        if (issue.code === \"invalid_union\") {\n          issue.unionErrors.map(processError);\n        } else if (issue.code === \"invalid_return_type\") {\n          processError(issue.returnTypeError);\n        } else if (issue.code === \"invalid_arguments\") {\n          processError(issue.argumentsError);\n        } else if (issue.path.length === 0) {\n          fieldErrors._errors.push(mapper(issue));\n        } else {\n          let curr = fieldErrors;\n          let i2 = 0;\n          while (i2 < issue.path.length) {\n            const el = issue.path[i2];\n            const terminal = i2 === issue.path.length - 1;\n            if (!terminal) {\n              curr[el] = curr[el] || { _errors: [] };\n            } else {\n              curr[el] = curr[el] || { _errors: [] };\n              curr[el]._errors.push(mapper(issue));\n            }\n            curr = curr[el];\n            i2++;\n          }\n        }\n      }\n    };\n    processError(this);\n    return fieldErrors;\n  }\n  static assert(value) {\n    if (!(value instanceof ZodError)) {\n      throw new Error(`Not a ZodError: ${value}`);\n    }\n  }\n  toString() {\n    return this.message;\n  }\n  get message() {\n    return JSON.stringify(this.issues, util.jsonStringifyReplacer, 2);\n  }\n  get isEmpty() {\n    return this.issues.length === 0;\n  }\n  flatten(mapper = (issue) => issue.message) {\n    const fieldErrors = {};\n    const formErrors = [];\n    for (const sub of this.issues) {\n      if (sub.path.length > 0) {\n        fieldErrors[sub.path[0]] = fieldErrors[sub.path[0]] || [];\n        fieldErrors[sub.path[0]].push(mapper(sub));\n      } else {\n        formErrors.push(mapper(sub));\n      }\n    }\n    return { formErrors, fieldErrors };\n  }\n  get formErrors() {\n    return this.flatten();\n  }\n}\nZodError.create = (issues) => {\n  const error2 = new ZodError(issues);\n  return error2;\n};\nconst errorMap = (issue, _ctx) => {\n  let message;\n  switch (issue.code) {\n    case ZodIssueCode.invalid_type:\n      if (issue.received === ZodParsedType.undefined) {\n        message = \"Required\";\n      } else {\n        message = `Expected ${issue.expected}, received ${issue.received}`;\n      }\n      break;\n    case ZodIssueCode.invalid_literal:\n      message = `Invalid literal value, expected ${JSON.stringify(issue.expected, util.jsonStringifyReplacer)}`;\n      break;\n    case ZodIssueCode.unrecognized_keys:\n      message = `Unrecognized key(s) in object: ${util.joinValues(issue.keys, \", \")}`;\n      break;\n    case ZodIssueCode.invalid_union:\n      message = `Invalid input`;\n      break;\n    case ZodIssueCode.invalid_union_discriminator:\n      message = `Invalid discriminator value. Expected ${util.joinValues(issue.options)}`;\n      break;\n    case ZodIssueCode.invalid_enum_value:\n      message = `Invalid enum value. Expected ${util.joinValues(issue.options)}, received '${issue.received}'`;\n      break;\n    case ZodIssueCode.invalid_arguments:\n      message = `Invalid function arguments`;\n      break;\n    case ZodIssueCode.invalid_return_type:\n      message = `Invalid function return type`;\n      break;\n    case ZodIssueCode.invalid_date:\n      message = `Invalid date`;\n      break;\n    case ZodIssueCode.invalid_string:\n      if (typeof issue.validation === \"object\") {\n        if (\"includes\" in issue.validation) {\n          message = `Invalid input: must include \"${issue.validation.includes}\"`;\n          if (typeof issue.validation.position === \"number\") {\n            message = `${message} at one or more positions greater than or equal to ${issue.validation.position}`;\n          }\n        } else if (\"startsWith\" in issue.validation) {\n          message = `Invalid input: must start with \"${issue.validation.startsWith}\"`;\n        } else if (\"endsWith\" in issue.validation) {\n          message = `Invalid input: must end with \"${issue.validation.endsWith}\"`;\n        } else {\n          util.assertNever(issue.validation);\n        }\n      } else if (issue.validation !== \"regex\") {\n        message = `Invalid ${issue.validation}`;\n      } else {\n        message = \"Invalid\";\n      }\n      break;\n    case ZodIssueCode.too_small:\n      if (issue.type === \"array\")\n        message = `Array must contain ${issue.exact ? \"exactly\" : issue.inclusive ? `at least` : `more than`} ${issue.minimum} element(s)`;\n      else if (issue.type === \"string\")\n        message = `String must contain ${issue.exact ? \"exactly\" : issue.inclusive ? `at least` : `over`} ${issue.minimum} character(s)`;\n      else if (issue.type === \"number\")\n        message = `Number must be ${issue.exact ? `exactly equal to ` : issue.inclusive ? `greater than or equal to ` : `greater than `}${issue.minimum}`;\n      else if (issue.type === \"date\")\n        message = `Date must be ${issue.exact ? `exactly equal to ` : issue.inclusive ? `greater than or equal to ` : `greater than `}${new Date(Number(issue.minimum))}`;\n      else\n        message = \"Invalid input\";\n      break;\n    case ZodIssueCode.too_big:\n      if (issue.type === \"array\")\n        message = `Array must contain ${issue.exact ? `exactly` : issue.inclusive ? `at most` : `less than`} ${issue.maximum} element(s)`;\n      else if (issue.type === \"string\")\n        message = `String must contain ${issue.exact ? `exactly` : issue.inclusive ? `at most` : `under`} ${issue.maximum} character(s)`;\n      else if (issue.type === \"number\")\n        message = `Number must be ${issue.exact ? `exactly` : issue.inclusive ? `less than or equal to` : `less than`} ${issue.maximum}`;\n      else if (issue.type === \"bigint\")\n        message = `BigInt must be ${issue.exact ? `exactly` : issue.inclusive ? `less than or equal to` : `less than`} ${issue.maximum}`;\n      else if (issue.type === \"date\")\n        message = `Date must be ${issue.exact ? `exactly` : issue.inclusive ? `smaller than or equal to` : `smaller than`} ${new Date(Number(issue.maximum))}`;\n      else\n        message = \"Invalid input\";\n      break;\n    case ZodIssueCode.custom:\n      message = `Invalid input`;\n      break;\n    case ZodIssueCode.invalid_intersection_types:\n      message = `Intersection results could not be merged`;\n      break;\n    case ZodIssueCode.not_multiple_of:\n      message = `Number must be a multiple of ${issue.multipleOf}`;\n      break;\n    case ZodIssueCode.not_finite:\n      message = \"Number must be finite\";\n      break;\n    default:\n      message = _ctx.defaultError;\n      util.assertNever(issue);\n  }\n  return { message };\n};\nlet overrideErrorMap = errorMap;\nfunction setErrorMap(map) {\n  overrideErrorMap = map;\n}\nfunction getErrorMap() {\n  return overrideErrorMap;\n}\nconst makeIssue = (params) => {\n  const { data, path, errorMaps, issueData } = params;\n  const fullPath = [...path, ...issueData.path || []];\n  const fullIssue = {\n    ...issueData,\n    path: fullPath\n  };\n  if (issueData.message !== void 0) {\n    return {\n      ...issueData,\n      path: fullPath,\n      message: issueData.message\n    };\n  }\n  let errorMessage = \"\";\n  const maps = errorMaps.filter((m2) => !!m2).slice().reverse();\n  for (const map of maps) {\n    errorMessage = map(fullIssue, { data, defaultError: errorMessage }).message;\n  }\n  return {\n    ...issueData,\n    path: fullPath,\n    message: errorMessage\n  };\n};\nconst EMPTY_PATH = [];\nfunction addIssueToContext(ctx, issueData) {\n  const overrideMap = getErrorMap();\n  const issue = makeIssue({\n    issueData,\n    data: ctx.data,\n    path: ctx.path,\n    errorMaps: [\n      ctx.common.contextualErrorMap,\n      // contextual error map is first priority\n      ctx.schemaErrorMap,\n      // then schema-bound map if available\n      overrideMap,\n      // then global override map\n      overrideMap === errorMap ? void 0 : errorMap\n      // then global default map\n    ].filter((x2) => !!x2)\n  });\n  ctx.common.issues.push(issue);\n}\nclass ParseStatus {\n  constructor() {\n    this.value = \"valid\";\n  }\n  dirty() {\n    if (this.value === \"valid\")\n      this.value = \"dirty\";\n  }\n  abort() {\n    if (this.value !== \"aborted\")\n      this.value = \"aborted\";\n  }\n  static mergeArray(status, results) {\n    const arrayValue = [];\n    for (const s2 of results) {\n      if (s2.status === \"aborted\")\n        return INVALID;\n      if (s2.status === \"dirty\")\n        status.dirty();\n      arrayValue.push(s2.value);\n    }\n    return { status: status.value, value: arrayValue };\n  }\n  static async mergeObjectAsync(status, pairs) {\n    const syncPairs = [];\n    for (const pair of pairs) {\n      const key = await pair.key;\n      const value = await pair.value;\n      syncPairs.push({\n        key,\n        value\n      });\n    }\n    return ParseStatus.mergeObjectSync(status, syncPairs);\n  }\n  static mergeObjectSync(status, pairs) {\n    const finalObject = {};\n    for (const pair of pairs) {\n      const { key, value } = pair;\n      if (key.status === \"aborted\")\n        return INVALID;\n      if (value.status === \"aborted\")\n        return INVALID;\n      if (key.status === \"dirty\")\n        status.dirty();\n      if (value.status === \"dirty\")\n        status.dirty();\n      if (key.value !== \"__proto__\" && (typeof value.value !== \"undefined\" || pair.alwaysSet)) {\n        finalObject[key.value] = value.value;\n      }\n    }\n    return { status: status.value, value: finalObject };\n  }\n}\nconst INVALID = Object.freeze({\n  status: \"aborted\"\n});\nconst DIRTY = (value) => ({ status: \"dirty\", value });\nconst OK = (value) => ({ status: \"valid\", value });\nconst isAborted = (x2) => x2.status === \"aborted\";\nconst isDirty = (x2) => x2.status === \"dirty\";\nconst isValid = (x2) => x2.status === \"valid\";\nconst isAsync = (x2) => typeof Promise !== \"undefined\" && x2 instanceof Promise;\nfunction __classPrivateFieldGet(receiver, state, kind, f2) {\n  if (typeof state === \"function\" ? receiver !== state || true : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n  return state.get(receiver);\n}\nfunction __classPrivateFieldSet(receiver, state, value, kind, f2) {\n  if (typeof state === \"function\" ? receiver !== state || true : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n  return state.set(receiver, value), value;\n}\ntypeof SuppressedError === \"function\" ? SuppressedError : function(error2, suppressed, message) {\n  var e2 = new Error(message);\n  return e2.name = \"SuppressedError\", e2.error = error2, e2.suppressed = suppressed, e2;\n};\nvar errorUtil;\n(function(errorUtil2) {\n  errorUtil2.errToObj = (message) => typeof message === \"string\" ? { message } : message || {};\n  errorUtil2.toString = (message) => typeof message === \"string\" ? message : message === null || message === void 0 ? void 0 : message.message;\n})(errorUtil || (errorUtil = {}));\nvar _ZodEnum_cache, _ZodNativeEnum_cache;\nclass ParseInputLazyPath {\n  constructor(parent, value, path, key) {\n    this._cachedPath = [];\n    this.parent = parent;\n    this.data = value;\n    this._path = path;\n    this._key = key;\n  }\n  get path() {\n    if (!this._cachedPath.length) {\n      if (this._key instanceof Array) {\n        this._cachedPath.push(...this._path, ...this._key);\n      } else {\n        this._cachedPath.push(...this._path, this._key);\n      }\n    }\n    return this._cachedPath;\n  }\n}\nconst handleResult = (ctx, result) => {\n  if (isValid(result)) {\n    return { success: true, data: result.value };\n  } else {\n    if (!ctx.common.issues.length) {\n      throw new Error(\"Validation failed but no issues detected.\");\n    }\n    return {\n      success: false,\n      get error() {\n        if (this._error)\n          return this._error;\n        const error2 = new ZodError(ctx.common.issues);\n        this._error = error2;\n        return this._error;\n      }\n    };\n  }\n};\nfunction processCreateParams(params) {\n  if (!params)\n    return {};\n  const { errorMap: errorMap2, invalid_type_error, required_error, description } = params;\n  if (errorMap2 && (invalid_type_error || required_error)) {\n    throw new Error(`Can't use \"invalid_type_error\" or \"required_error\" in conjunction with custom error map.`);\n  }\n  if (errorMap2)\n    return { errorMap: errorMap2, description };\n  const customMap = (iss, ctx) => {\n    var _a, _b;\n    const { message } = params;\n    if (iss.code === \"invalid_enum_value\") {\n      return { message: message !== null && message !== void 0 ? message : ctx.defaultError };\n    }\n    if (typeof ctx.data === \"undefined\") {\n      return { message: (_a = message !== null && message !== void 0 ? message : required_error) !== null && _a !== void 0 ? _a : ctx.defaultError };\n    }\n    if (iss.code !== \"invalid_type\")\n      return { message: ctx.defaultError };\n    return { message: (_b = message !== null && message !== void 0 ? message : invalid_type_error) !== null && _b !== void 0 ? _b : ctx.defaultError };\n  };\n  return { errorMap: customMap, description };\n}\nclass ZodType {\n  get description() {\n    return this._def.description;\n  }\n  _getType(input) {\n    return getParsedType(input.data);\n  }\n  _getOrReturnCtx(input, ctx) {\n    return ctx || {\n      common: input.parent.common,\n      data: input.data,\n      parsedType: getParsedType(input.data),\n      schemaErrorMap: this._def.errorMap,\n      path: input.path,\n      parent: input.parent\n    };\n  }\n  _processInputParams(input) {\n    return {\n      status: new ParseStatus(),\n      ctx: {\n        common: input.parent.common,\n        data: input.data,\n        parsedType: getParsedType(input.data),\n        schemaErrorMap: this._def.errorMap,\n        path: input.path,\n        parent: input.parent\n      }\n    };\n  }\n  _parseSync(input) {\n    const result = this._parse(input);\n    if (isAsync(result)) {\n      throw new Error(\"Synchronous parse encountered promise.\");\n    }\n    return result;\n  }\n  _parseAsync(input) {\n    const result = this._parse(input);\n    return Promise.resolve(result);\n  }\n  parse(data, params) {\n    const result = this.safeParse(data, params);\n    if (result.success)\n      return result.data;\n    throw result.error;\n  }\n  safeParse(data, params) {\n    var _a;\n    const ctx = {\n      common: {\n        issues: [],\n        async: (_a = params === null || params === void 0 ? void 0 : params.async) !== null && _a !== void 0 ? _a : false,\n        contextualErrorMap: params === null || params === void 0 ? void 0 : params.errorMap\n      },\n      path: (params === null || params === void 0 ? void 0 : params.path) || [],\n      schemaErrorMap: this._def.errorMap,\n      parent: null,\n      data,\n      parsedType: getParsedType(data)\n    };\n    const result = this._parseSync({ data, path: ctx.path, parent: ctx });\n    return handleResult(ctx, result);\n  }\n  \"~validate\"(data) {\n    var _a, _b;\n    const ctx = {\n      common: {\n        issues: [],\n        async: !!this[\"~standard\"].async\n      },\n      path: [],\n      schemaErrorMap: this._def.errorMap,\n      parent: null,\n      data,\n      parsedType: getParsedType(data)\n    };\n    if (!this[\"~standard\"].async) {\n      try {\n        const result = this._parseSync({ data, path: [], parent: ctx });\n        return isValid(result) ? {\n          value: result.value\n        } : {\n          issues: ctx.common.issues\n        };\n      } catch (err) {\n        if ((_b = (_a = err === null || err === void 0 ? void 0 : err.message) === null || _a === void 0 ? void 0 : _a.toLowerCase()) === null || _b === void 0 ? void 0 : _b.includes(\"encountered\")) {\n          this[\"~standard\"].async = true;\n        }\n        ctx.common = {\n          issues: [],\n          async: true\n        };\n      }\n    }\n    return this._parseAsync({ data, path: [], parent: ctx }).then((result) => isValid(result) ? {\n      value: result.value\n    } : {\n      issues: ctx.common.issues\n    });\n  }\n  async parseAsync(data, params) {\n    const result = await this.safeParseAsync(data, params);\n    if (result.success)\n      return result.data;\n    throw result.error;\n  }\n  async safeParseAsync(data, params) {\n    const ctx = {\n      common: {\n        issues: [],\n        contextualErrorMap: params === null || params === void 0 ? void 0 : params.errorMap,\n        async: true\n      },\n      path: (params === null || params === void 0 ? void 0 : params.path) || [],\n      schemaErrorMap: this._def.errorMap,\n      parent: null,\n      data,\n      parsedType: getParsedType(data)\n    };\n    const maybeAsyncResult = this._parse({ data, path: ctx.path, parent: ctx });\n    const result = await (isAsync(maybeAsyncResult) ? maybeAsyncResult : Promise.resolve(maybeAsyncResult));\n    return handleResult(ctx, result);\n  }\n  refine(check, message) {\n    const getIssueProperties = (val) => {\n      if (typeof message === \"string\" || typeof message === \"undefined\") {\n        return { message };\n      } else if (typeof message === \"function\") {\n        return message(val);\n      } else {\n        return message;\n      }\n    };\n    return this._refinement((val, ctx) => {\n      const result = check(val);\n      const setError = () => ctx.addIssue({\n        code: ZodIssueCode.custom,\n        ...getIssueProperties(val)\n      });\n      if (typeof Promise !== \"undefined\" && result instanceof Promise) {\n        return result.then((data) => {\n          if (!data) {\n            setError();\n            return false;\n          } else {\n            return true;\n          }\n        });\n      }\n      if (!result) {\n        setError();\n        return false;\n      } else {\n        return true;\n      }\n    });\n  }\n  refinement(check, refinementData) {\n    return this._refinement((val, ctx) => {\n      if (!check(val)) {\n        ctx.addIssue(typeof refinementData === \"function\" ? refinementData(val, ctx) : refinementData);\n        return false;\n      } else {\n        return true;\n      }\n    });\n  }\n  _refinement(refinement) {\n    return new ZodEffects({\n      schema: this,\n      typeName: ZodFirstPartyTypeKind.ZodEffects,\n      effect: { type: \"refinement\", refinement }\n    });\n  }\n  superRefine(refinement) {\n    return this._refinement(refinement);\n  }\n  constructor(def) {\n    this.spa = this.safeParseAsync;\n    this._def = def;\n    this.parse = this.parse.bind(this);\n    this.safeParse = this.safeParse.bind(this);\n    this.parseAsync = this.parseAsync.bind(this);\n    this.safeParseAsync = this.safeParseAsync.bind(this);\n    this.spa = this.spa.bind(this);\n    this.refine = this.refine.bind(this);\n    this.refinement = this.refinement.bind(this);\n    this.superRefine = this.superRefine.bind(this);\n    this.optional = this.optional.bind(this);\n    this.nullable = this.nullable.bind(this);\n    this.nullish = this.nullish.bind(this);\n    this.array = this.array.bind(this);\n    this.promise = this.promise.bind(this);\n    this.or = this.or.bind(this);\n    this.and = this.and.bind(this);\n    this.transform = this.transform.bind(this);\n    this.brand = this.brand.bind(this);\n    this.default = this.default.bind(this);\n    this.catch = this.catch.bind(this);\n    this.describe = this.describe.bind(this);\n    this.pipe = this.pipe.bind(this);\n    this.readonly = this.readonly.bind(this);\n    this.isNullable = this.isNullable.bind(this);\n    this.isOptional = this.isOptional.bind(this);\n    this[\"~standard\"] = {\n      version: 1,\n      vendor: \"zod\",\n      validate: (data) => this[\"~validate\"](data)\n    };\n  }\n  optional() {\n    return ZodOptional.create(this, this._def);\n  }\n  nullable() {\n    return ZodNullable.create(this, this._def);\n  }\n  nullish() {\n    return this.nullable().optional();\n  }\n  array() {\n    return ZodArray.create(this);\n  }\n  promise() {\n    return ZodPromise.create(this, this._def);\n  }\n  or(option) {\n    return ZodUnion.create([this, option], this._def);\n  }\n  and(incoming) {\n    return ZodIntersection.create(this, incoming, this._def);\n  }\n  transform(transform) {\n    return new ZodEffects({\n      ...processCreateParams(this._def),\n      schema: this,\n      typeName: ZodFirstPartyTypeKind.ZodEffects,\n      effect: { type: \"transform\", transform }\n    });\n  }\n  default(def) {\n    const defaultValueFunc = typeof def === \"function\" ? def : () => def;\n    return new ZodDefault({\n      ...processCreateParams(this._def),\n      innerType: this,\n      defaultValue: defaultValueFunc,\n      typeName: ZodFirstPartyTypeKind.ZodDefault\n    });\n  }\n  brand() {\n    return new ZodBranded({\n      typeName: ZodFirstPartyTypeKind.ZodBranded,\n      type: this,\n      ...processCreateParams(this._def)\n    });\n  }\n  catch(def) {\n    const catchValueFunc = typeof def === \"function\" ? def : () => def;\n    return new ZodCatch({\n      ...processCreateParams(this._def),\n      innerType: this,\n      catchValue: catchValueFunc,\n      typeName: ZodFirstPartyTypeKind.ZodCatch\n    });\n  }\n  describe(description) {\n    const This = this.constructor;\n    return new This({\n      ...this._def,\n      description\n    });\n  }\n  pipe(target) {\n    return ZodPipeline.create(this, target);\n  }\n  readonly() {\n    return ZodReadonly.create(this);\n  }\n  isOptional() {\n    return this.safeParse(void 0).success;\n  }\n  isNullable() {\n    return this.safeParse(null).success;\n  }\n}\nconst cuidRegex = /^c[^\\s-]{8,}$/i;\nconst cuid2Regex = /^[0-9a-z]+$/;\nconst ulidRegex = /^[0-9A-HJKMNP-TV-Z]{26}$/i;\nconst uuidRegex = /^[0-9a-fA-F]{8}\\b-[0-9a-fA-F]{4}\\b-[0-9a-fA-F]{4}\\b-[0-9a-fA-F]{4}\\b-[0-9a-fA-F]{12}$/i;\nconst nanoidRegex = /^[a-z0-9_-]{21}$/i;\nconst jwtRegex = /^[A-Za-z0-9-_]+\\.[A-Za-z0-9-_]+\\.[A-Za-z0-9-_]*$/;\nconst durationRegex = /^[-+]?P(?!$)(?:(?:[-+]?\\d+Y)|(?:[-+]?\\d+[.,]\\d+Y$))?(?:(?:[-+]?\\d+M)|(?:[-+]?\\d+[.,]\\d+M$))?(?:(?:[-+]?\\d+W)|(?:[-+]?\\d+[.,]\\d+W$))?(?:(?:[-+]?\\d+D)|(?:[-+]?\\d+[.,]\\d+D$))?(?:T(?=[\\d+-])(?:(?:[-+]?\\d+H)|(?:[-+]?\\d+[.,]\\d+H$))?(?:(?:[-+]?\\d+M)|(?:[-+]?\\d+[.,]\\d+M$))?(?:[-+]?\\d+(?:[.,]\\d+)?S)?)??$/;\nconst emailRegex = /^(?!\\.)(?!.*\\.\\.)([A-Z0-9_'+\\-\\.]*)[A-Z0-9_+-]@([A-Z0-9][A-Z0-9\\-]*\\.)+[A-Z]{2,}$/i;\nconst _emojiRegex = `^(\\\\p{Extended_Pictographic}|\\\\p{Emoji_Component})+$`;\nlet emojiRegex;\nconst ipv4Regex = /^(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])$/;\nconst ipv4CidrRegex = /^(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\\/(3[0-2]|[12]?[0-9])$/;\nconst ipv6Regex = /^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))$/;\nconst ipv6CidrRegex = /^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))\\/(12[0-8]|1[01][0-9]|[1-9]?[0-9])$/;\nconst base64Regex = /^([0-9a-zA-Z+/]{4})*(([0-9a-zA-Z+/]{2}==)|([0-9a-zA-Z+/]{3}=))?$/;\nconst base64urlRegex = /^([0-9a-zA-Z-_]{4})*(([0-9a-zA-Z-_]{2}(==)?)|([0-9a-zA-Z-_]{3}(=)?))?$/;\nconst dateRegexSource = `((\\\\d\\\\d[2468][048]|\\\\d\\\\d[13579][26]|\\\\d\\\\d0[48]|[02468][048]00|[13579][26]00)-02-29|\\\\d{4}-((0[13578]|1[02])-(0[1-9]|[12]\\\\d|3[01])|(0[469]|11)-(0[1-9]|[12]\\\\d|30)|(02)-(0[1-9]|1\\\\d|2[0-8])))`;\nconst dateRegex = new RegExp(`^${dateRegexSource}$`);\nfunction timeRegexSource(args) {\n  let secondsRegexSource = `[0-5]\\\\d`;\n  if (args.precision) {\n    secondsRegexSource = `${secondsRegexSource}\\\\.\\\\d{${args.precision}}`;\n  } else if (args.precision == null) {\n    secondsRegexSource = `${secondsRegexSource}(\\\\.\\\\d+)?`;\n  }\n  const secondsQuantifier = args.precision ? \"+\" : \"?\";\n  return `([01]\\\\d|2[0-3]):[0-5]\\\\d(:${secondsRegexSource})${secondsQuantifier}`;\n}\nfunction timeRegex(args) {\n  return new RegExp(`^${timeRegexSource(args)}$`);\n}\nfunction datetimeRegex(args) {\n  let regex = `${dateRegexSource}T${timeRegexSource(args)}`;\n  const opts = [];\n  opts.push(args.local ? `Z?` : `Z`);\n  if (args.offset)\n    opts.push(`([+-]\\\\d{2}:?\\\\d{2})`);\n  regex = `${regex}(${opts.join(\"|\")})`;\n  return new RegExp(`^${regex}$`);\n}\nfunction isValidIP(ip, version) {\n  if ((version === \"v4\" || !version) && ipv4Regex.test(ip)) {\n    return true;\n  }\n  if ((version === \"v6\" || !version) && ipv6Regex.test(ip)) {\n    return true;\n  }\n  return false;\n}\nfunction isValidJWT(jwt, alg) {\n  if (!jwtRegex.test(jwt))\n    return false;\n  try {\n    const [header] = jwt.split(\".\");\n    const base64 = header.replace(/-/g, \"+\").replace(/_/g, \"/\").padEnd(header.length + (4 - header.length % 4) % 4, \"=\");\n    const decoded = JSON.parse(atob(base64));\n    if (typeof decoded !== \"object\" || decoded === null)\n      return false;\n    if (!decoded.typ || !decoded.alg)\n      return false;\n    if (alg && decoded.alg !== alg)\n      return false;\n    return true;\n  } catch (_a) {\n    return false;\n  }\n}\nfunction isValidCidr(ip, version) {\n  if ((version === \"v4\" || !version) && ipv4CidrRegex.test(ip)) {\n    return true;\n  }\n  if ((version === \"v6\" || !version) && ipv6CidrRegex.test(ip)) {\n    return true;\n  }\n  return false;\n}\nclass ZodString extends ZodType {\n  _parse(input) {\n    if (this._def.coerce) {\n      input.data = String(input.data);\n    }\n    const parsedType = this._getType(input);\n    if (parsedType !== ZodParsedType.string) {\n      const ctx2 = this._getOrReturnCtx(input);\n      addIssueToContext(ctx2, {\n        code: ZodIssueCode.invalid_type,\n        expected: ZodParsedType.string,\n        received: ctx2.parsedType\n      });\n      return INVALID;\n    }\n    const status = new ParseStatus();\n    let ctx = void 0;\n    for (const check of this._def.checks) {\n      if (check.kind === \"min\") {\n        if (input.data.length < check.value) {\n          ctx = this._getOrReturnCtx(input, ctx);\n          addIssueToContext(ctx, {\n            code: ZodIssueCode.too_small,\n            minimum: check.value,\n            type: \"string\",\n            inclusive: true,\n            exact: false,\n            message: check.message\n          });\n          status.dirty();\n        }\n      } else if (check.kind === \"max\") {\n        if (input.data.length > check.value) {\n          ctx = this._getOrReturnCtx(input, ctx);\n          addIssueToContext(ctx, {\n            code: ZodIssueCode.too_big,\n            maximum: check.value,\n            type: \"string\",\n            inclusive: true,\n            exact: false,\n            message: check.message\n          });\n          status.dirty();\n        }\n      } else if (check.kind === \"length\") {\n        const tooBig = input.data.length > check.value;\n        const tooSmall = input.data.length < check.value;\n        if (tooBig || tooSmall) {\n          ctx = this._getOrReturnCtx(input, ctx);\n          if (tooBig) {\n            addIssueToContext(ctx, {\n              code: ZodIssueCode.too_big,\n              maximum: check.value,\n              type: \"string\",\n              inclusive: true,\n              exact: true,\n              message: check.message\n            });\n          } else if (tooSmall) {\n            addIssueToContext(ctx, {\n              code: ZodIssueCode.too_small,\n              minimum: check.value,\n              type: \"string\",\n              inclusive: true,\n              exact: true,\n              message: check.message\n            });\n          }\n          status.dirty();\n        }\n      } else if (check.kind === \"email\") {\n        if (!emailRegex.test(input.data)) {\n          ctx = this._getOrReturnCtx(input, ctx);\n          addIssueToContext(ctx, {\n            validation: \"email\",\n            code: ZodIssueCode.invalid_string,\n            message: check.message\n          });\n          status.dirty();\n        }\n      } else if (check.kind === \"emoji\") {\n        if (!emojiRegex) {\n          emojiRegex = new RegExp(_emojiRegex, \"u\");\n        }\n        if (!emojiRegex.test(input.data)) {\n          ctx = this._getOrReturnCtx(input, ctx);\n          addIssueToContext(ctx, {\n            validation: \"emoji\",\n            code: ZodIssueCode.invalid_string,\n            message: check.message\n          });\n          status.dirty();\n        }\n      } else if (check.kind === \"uuid\") {\n        if (!uuidRegex.test(input.data)) {\n          ctx = this._getOrReturnCtx(input, ctx);\n          addIssueToContext(ctx, {\n            validation: \"uuid\",\n            code: ZodIssueCode.invalid_string,\n            message: check.message\n          });\n          status.dirty();\n        }\n      } else if (check.kind === \"nanoid\") {\n        if (!nanoidRegex.test(input.data)) {\n          ctx = this._getOrReturnCtx(input, ctx);\n          addIssueToContext(ctx, {\n            validation: \"nanoid\",\n            code: ZodIssueCode.invalid_string,\n            message: check.message\n          });\n          status.dirty();\n        }\n      } else if (check.kind === \"cuid\") {\n        if (!cuidRegex.test(input.data)) {\n          ctx = this._getOrReturnCtx(input, ctx);\n          addIssueToContext(ctx, {\n            validation: \"cuid\",\n            code: ZodIssueCode.invalid_string,\n            message: check.message\n          });\n          status.dirty();\n        }\n      } else if (check.kind === \"cuid2\") {\n        if (!cuid2Regex.test(input.data)) {\n          ctx = this._getOrReturnCtx(input, ctx);\n          addIssueToContext(ctx, {\n            validation: \"cuid2\",\n            code: ZodIssueCode.invalid_string,\n            message: check.message\n          });\n          status.dirty();\n        }\n      } else if (check.kind === \"ulid\") {\n        if (!ulidRegex.test(input.data)) {\n          ctx = this._getOrReturnCtx(input, ctx);\n          addIssueToContext(ctx, {\n            validation: \"ulid\",\n            code: ZodIssueCode.invalid_string,\n            message: check.message\n          });\n          status.dirty();\n        }\n      } else if (check.kind === \"url\") {\n        try {\n          new URL(input.data);\n        } catch (_a) {\n          ctx = this._getOrReturnCtx(input, ctx);\n          addIssueToContext(ctx, {\n            validation: \"url\",\n            code: ZodIssueCode.invalid_string,\n            message: check.message\n          });\n          status.dirty();\n        }\n      } else if (check.kind === \"regex\") {\n        check.regex.lastIndex = 0;\n        const testResult = check.regex.test(input.data);\n        if (!testResult) {\n          ctx = this._getOrReturnCtx(input, ctx);\n          addIssueToContext(ctx, {\n            validation: \"regex\",\n            code: ZodIssueCode.invalid_string,\n            message: check.message\n          });\n          status.dirty();\n        }\n      } else if (check.kind === \"trim\") {\n        input.data = input.data.trim();\n      } else if (check.kind === \"includes\") {\n        if (!input.data.includes(check.value, check.position)) {\n          ctx = this._getOrReturnCtx(input, ctx);\n          addIssueToContext(ctx, {\n            code: ZodIssueCode.invalid_string,\n            validation: { includes: check.value, position: check.position },\n            message: check.message\n          });\n          status.dirty();\n        }\n      } else if (check.kind === \"toLowerCase\") {\n        input.data = input.data.toLowerCase();\n      } else if (check.kind === \"toUpperCase\") {\n        input.data = input.data.toUpperCase();\n      } else if (check.kind === \"startsWith\") {\n        if (!input.data.startsWith(check.value)) {\n          ctx = this._getOrReturnCtx(input, ctx);\n          addIssueToContext(ctx, {\n            code: ZodIssueCode.invalid_string,\n            validation: { startsWith: check.value },\n            message: check.message\n          });\n          status.dirty();\n        }\n      } else if (check.kind === \"endsWith\") {\n        if (!input.data.endsWith(check.value)) {\n          ctx = this._getOrReturnCtx(input, ctx);\n          addIssueToContext(ctx, {\n            code: ZodIssueCode.invalid_string,\n            validation: { endsWith: check.value },\n            message: check.message\n          });\n          status.dirty();\n        }\n      } else if (check.kind === \"datetime\") {\n        const regex = datetimeRegex(check);\n        if (!regex.test(input.data)) {\n          ctx = this._getOrReturnCtx(input, ctx);\n          addIssueToContext(ctx, {\n            code: ZodIssueCode.invalid_string,\n            validation: \"datetime\",\n            message: check.message\n          });\n          status.dirty();\n        }\n      } else if (check.kind === \"date\") {\n        const regex = dateRegex;\n        if (!regex.test(input.data)) {\n          ctx = this._getOrReturnCtx(input, ctx);\n          addIssueToContext(ctx, {\n            code: ZodIssueCode.invalid_string,\n            validation: \"date\",\n            message: check.message\n          });\n          status.dirty();\n        }\n      } else if (check.kind === \"time\") {\n        const regex = timeRegex(check);\n        if (!regex.test(input.data)) {\n          ctx = this._getOrReturnCtx(input, ctx);\n          addIssueToContext(ctx, {\n            code: ZodIssueCode.invalid_string,\n            validation: \"time\",\n            message: check.message\n          });\n          status.dirty();\n        }\n      } else if (check.kind === \"duration\") {\n        if (!durationRegex.test(input.data)) {\n          ctx = this._getOrReturnCtx(input, ctx);\n          addIssueToContext(ctx, {\n            validation: \"duration\",\n            code: ZodIssueCode.invalid_string,\n            message: check.message\n          });\n          status.dirty();\n        }\n      } else if (check.kind === \"ip\") {\n        if (!isValidIP(input.data, check.version)) {\n          ctx = this._getOrReturnCtx(input, ctx);\n          addIssueToContext(ctx, {\n            validation: \"ip\",\n            code: ZodIssueCode.invalid_string,\n            message: check.message\n          });\n          status.dirty();\n        }\n      } else if (check.kind === \"jwt\") {\n        if (!isValidJWT(input.data, check.alg)) {\n          ctx = this._getOrReturnCtx(input, ctx);\n          addIssueToContext(ctx, {\n            validation: \"jwt\",\n            code: ZodIssueCode.invalid_string,\n            message: check.message\n          });\n          status.dirty();\n        }\n      } else if (check.kind === \"cidr\") {\n        if (!isValidCidr(input.data, check.version)) {\n          ctx = this._getOrReturnCtx(input, ctx);\n          addIssueToContext(ctx, {\n            validation: \"cidr\",\n            code: ZodIssueCode.invalid_string,\n            message: check.message\n          });\n          status.dirty();\n        }\n      } else if (check.kind === \"base64\") {\n        if (!base64Regex.test(input.data)) {\n          ctx = this._getOrReturnCtx(input, ctx);\n          addIssueToContext(ctx, {\n            validation: \"base64\",\n            code: ZodIssueCode.invalid_string,\n            message: check.message\n          });\n          status.dirty();\n        }\n      } else if (check.kind === \"base64url\") {\n        if (!base64urlRegex.test(input.data)) {\n          ctx = this._getOrReturnCtx(input, ctx);\n          addIssueToContext(ctx, {\n            validation: \"base64url\",\n            code: ZodIssueCode.invalid_string,\n            message: check.message\n          });\n          status.dirty();\n        }\n      } else {\n        util.assertNever(check);\n      }\n    }\n    return { status: status.value, value: input.data };\n  }\n  _regex(regex, validation, message) {\n    return this.refinement((data) => regex.test(data), {\n      validation,\n      code: ZodIssueCode.invalid_string,\n      ...errorUtil.errToObj(message)\n    });\n  }\n  _addCheck(check) {\n    return new ZodString({\n      ...this._def,\n      checks: [...this._def.checks, check]\n    });\n  }\n  email(message) {\n    return this._addCheck({ kind: \"email\", ...errorUtil.errToObj(message) });\n  }\n  url(message) {\n    return this._addCheck({ kind: \"url\", ...errorUtil.errToObj(message) });\n  }\n  emoji(message) {\n    return this._addCheck({ kind: \"emoji\", ...errorUtil.errToObj(message) });\n  }\n  uuid(message) {\n    return this._addCheck({ kind: \"uuid\", ...errorUtil.errToObj(message) });\n  }\n  nanoid(message) {\n    return this._addCheck({ kind: \"nanoid\", ...errorUtil.errToObj(message) });\n  }\n  cuid(message) {\n    return this._addCheck({ kind: \"cuid\", ...errorUtil.errToObj(message) });\n  }\n  cuid2(message) {\n    return this._addCheck({ kind: \"cuid2\", ...errorUtil.errToObj(message) });\n  }\n  ulid(message) {\n    return this._addCheck({ kind: \"ulid\", ...errorUtil.errToObj(message) });\n  }\n  base64(message) {\n    return this._addCheck({ kind: \"base64\", ...errorUtil.errToObj(message) });\n  }\n  base64url(message) {\n    return this._addCheck({\n      kind: \"base64url\",\n      ...errorUtil.errToObj(message)\n    });\n  }\n  jwt(options) {\n    return this._addCheck({ kind: \"jwt\", ...errorUtil.errToObj(options) });\n  }\n  ip(options) {\n    return this._addCheck({ kind: \"ip\", ...errorUtil.errToObj(options) });\n  }\n  cidr(options) {\n    return this._addCheck({ kind: \"cidr\", ...errorUtil.errToObj(options) });\n  }\n  datetime(options) {\n    var _a, _b;\n    if (typeof options === \"string\") {\n      return this._addCheck({\n        kind: \"datetime\",\n        precision: null,\n        offset: false,\n        local: false,\n        message: options\n      });\n    }\n    return this._addCheck({\n      kind: \"datetime\",\n      precision: typeof (options === null || options === void 0 ? void 0 : options.precision) === \"undefined\" ? null : options === null || options === void 0 ? void 0 : options.precision,\n      offset: (_a = options === null || options === void 0 ? void 0 : options.offset) !== null && _a !== void 0 ? _a : false,\n      local: (_b = options === null || options === void 0 ? void 0 : options.local) !== null && _b !== void 0 ? _b : false,\n      ...errorUtil.errToObj(options === null || options === void 0 ? void 0 : options.message)\n    });\n  }\n  date(message) {\n    return this._addCheck({ kind: \"date\", message });\n  }\n  time(options) {\n    if (typeof options === \"string\") {\n      return this._addCheck({\n        kind: \"time\",\n        precision: null,\n        message: options\n      });\n    }\n    return this._addCheck({\n      kind: \"time\",\n      precision: typeof (options === null || options === void 0 ? void 0 : options.precision) === \"undefined\" ? null : options === null || options === void 0 ? void 0 : options.precision,\n      ...errorUtil.errToObj(options === null || options === void 0 ? void 0 : options.message)\n    });\n  }\n  duration(message) {\n    return this._addCheck({ kind: \"duration\", ...errorUtil.errToObj(message) });\n  }\n  regex(regex, message) {\n    return this._addCheck({\n      kind: \"regex\",\n      regex,\n      ...errorUtil.errToObj(message)\n    });\n  }\n  includes(value, options) {\n    return this._addCheck({\n      kind: \"includes\",\n      value,\n      position: options === null || options === void 0 ? void 0 : options.position,\n      ...errorUtil.errToObj(options === null || options === void 0 ? void 0 : options.message)\n    });\n  }\n  startsWith(value, message) {\n    return this._addCheck({\n      kind: \"startsWith\",\n      value,\n      ...errorUtil.errToObj(message)\n    });\n  }\n  endsWith(value, message) {\n    return this._addCheck({\n      kind: \"endsWith\",\n      value,\n      ...errorUtil.errToObj(message)\n    });\n  }\n  min(minLength, message) {\n    return this._addCheck({\n      kind: \"min\",\n      value: minLength,\n      ...errorUtil.errToObj(message)\n    });\n  }\n  max(maxLength, message) {\n    return this._addCheck({\n      kind: \"max\",\n      value: maxLength,\n      ...errorUtil.errToObj(message)\n    });\n  }\n  length(len, message) {\n    return this._addCheck({\n      kind: \"length\",\n      value: len,\n      ...errorUtil.errToObj(message)\n    });\n  }\n  /**\n   * Equivalent to `.min(1)`\n   */\n  nonempty(message) {\n    return this.min(1, errorUtil.errToObj(message));\n  }\n  trim() {\n    return new ZodString({\n      ...this._def,\n      checks: [...this._def.checks, { kind: \"trim\" }]\n    });\n  }\n  toLowerCase() {\n    return new ZodString({\n      ...this._def,\n      checks: [...this._def.checks, { kind: \"toLowerCase\" }]\n    });\n  }\n  toUpperCase() {\n    return new ZodString({\n      ...this._def,\n      checks: [...this._def.checks, { kind: \"toUpperCase\" }]\n    });\n  }\n  get isDatetime() {\n    return !!this._def.checks.find((ch) => ch.kind === \"datetime\");\n  }\n  get isDate() {\n    return !!this._def.checks.find((ch) => ch.kind === \"date\");\n  }\n  get isTime() {\n    return !!this._def.checks.find((ch) => ch.kind === \"time\");\n  }\n  get isDuration() {\n    return !!this._def.checks.find((ch) => ch.kind === \"duration\");\n  }\n  get isEmail() {\n    return !!this._def.checks.find((ch) => ch.kind === \"email\");\n  }\n  get isURL() {\n    return !!this._def.checks.find((ch) => ch.kind === \"url\");\n  }\n  get isEmoji() {\n    return !!this._def.checks.find((ch) => ch.kind === \"emoji\");\n  }\n  get isUUID() {\n    return !!this._def.checks.find((ch) => ch.kind === \"uuid\");\n  }\n  get isNANOID() {\n    return !!this._def.checks.find((ch) => ch.kind === \"nanoid\");\n  }\n  get isCUID() {\n    return !!this._def.checks.find((ch) => ch.kind === \"cuid\");\n  }\n  get isCUID2() {\n    return !!this._def.checks.find((ch) => ch.kind === \"cuid2\");\n  }\n  get isULID() {\n    return !!this._def.checks.find((ch) => ch.kind === \"ulid\");\n  }\n  get isIP() {\n    return !!this._def.checks.find((ch) => ch.kind === \"ip\");\n  }\n  get isCIDR() {\n    return !!this._def.checks.find((ch) => ch.kind === \"cidr\");\n  }\n  get isBase64() {\n    return !!this._def.checks.find((ch) => ch.kind === \"base64\");\n  }\n  get isBase64url() {\n    return !!this._def.checks.find((ch) => ch.kind === \"base64url\");\n  }\n  get minLength() {\n    let min2 = null;\n    for (const ch of this._def.checks) {\n      if (ch.kind === \"min\") {\n        if (min2 === null || ch.value > min2)\n          min2 = ch.value;\n      }\n    }\n    return min2;\n  }\n  get maxLength() {\n    let max2 = null;\n    for (const ch of this._def.checks) {\n      if (ch.kind === \"max\") {\n        if (max2 === null || ch.value < max2)\n          max2 = ch.value;\n      }\n    }\n    return max2;\n  }\n}\nZodString.create = (params) => {\n  var _a;\n  return new ZodString({\n    checks: [],\n    typeName: ZodFirstPartyTypeKind.ZodString,\n    coerce: (_a = params === null || params === void 0 ? void 0 : params.coerce) !== null && _a !== void 0 ? _a : false,\n    ...processCreateParams(params)\n  });\n};\nfunction floatSafeRemainder(val, step) {\n  const valDecCount = (val.toString().split(\".\")[1] || \"\").length;\n  const stepDecCount = (step.toString().split(\".\")[1] || \"\").length;\n  const decCount = valDecCount > stepDecCount ? valDecCount : stepDecCount;\n  const valInt = parseInt(val.toFixed(decCount).replace(\".\", \"\"));\n  const stepInt = parseInt(step.toFixed(decCount).replace(\".\", \"\"));\n  return valInt % stepInt / Math.pow(10, decCount);\n}\nclass ZodNumber extends ZodType {\n  constructor() {\n    super(...arguments);\n    this.min = this.gte;\n    this.max = this.lte;\n    this.step = this.multipleOf;\n  }\n  _parse(input) {\n    if (this._def.coerce) {\n      input.data = Number(input.data);\n    }\n    const parsedType = this._getType(input);\n    if (parsedType !== ZodParsedType.number) {\n      const ctx2 = this._getOrReturnCtx(input);\n      addIssueToContext(ctx2, {\n        code: ZodIssueCode.invalid_type,\n        expected: ZodParsedType.number,\n        received: ctx2.parsedType\n      });\n      return INVALID;\n    }\n    let ctx = void 0;\n    const status = new ParseStatus();\n    for (const check of this._def.checks) {\n      if (check.kind === \"int\") {\n        if (!util.isInteger(input.data)) {\n          ctx = this._getOrReturnCtx(input, ctx);\n          addIssueToContext(ctx, {\n            code: ZodIssueCode.invalid_type,\n            expected: \"integer\",\n            received: \"float\",\n            message: check.message\n          });\n          status.dirty();\n        }\n      } else if (check.kind === \"min\") {\n        const tooSmall = check.inclusive ? input.data < check.value : input.data <= check.value;\n        if (tooSmall) {\n          ctx = this._getOrReturnCtx(input, ctx);\n          addIssueToContext(ctx, {\n            code: ZodIssueCode.too_small,\n            minimum: check.value,\n            type: \"number\",\n            inclusive: check.inclusive,\n            exact: false,\n            message: check.message\n          });\n          status.dirty();\n        }\n      } else if (check.kind === \"max\") {\n        const tooBig = check.inclusive ? input.data > check.value : input.data >= check.value;\n        if (tooBig) {\n          ctx = this._getOrReturnCtx(input, ctx);\n          addIssueToContext(ctx, {\n            code: ZodIssueCode.too_big,\n            maximum: check.value,\n            type: \"number\",\n            inclusive: check.inclusive,\n            exact: false,\n            message: check.message\n          });\n          status.dirty();\n        }\n      } else if (check.kind === \"multipleOf\") {\n        if (floatSafeRemainder(input.data, check.value) !== 0) {\n          ctx = this._getOrReturnCtx(input, ctx);\n          addIssueToContext(ctx, {\n            code: ZodIssueCode.not_multiple_of,\n            multipleOf: check.value,\n            message: check.message\n          });\n          status.dirty();\n        }\n      } else if (check.kind === \"finite\") {\n        if (!Number.isFinite(input.data)) {\n          ctx = this._getOrReturnCtx(input, ctx);\n          addIssueToContext(ctx, {\n            code: ZodIssueCode.not_finite,\n            message: check.message\n          });\n          status.dirty();\n        }\n      } else {\n        util.assertNever(check);\n      }\n    }\n    return { status: status.value, value: input.data };\n  }\n  gte(value, message) {\n    return this.setLimit(\"min\", value, true, errorUtil.toString(message));\n  }\n  gt(value, message) {\n    return this.setLimit(\"min\", value, false, errorUtil.toString(message));\n  }\n  lte(value, message) {\n    return this.setLimit(\"max\", value, true, errorUtil.toString(message));\n  }\n  lt(value, message) {\n    return this.setLimit(\"max\", value, false, errorUtil.toString(message));\n  }\n  setLimit(kind, value, inclusive, message) {\n    return new ZodNumber({\n      ...this._def,\n      checks: [\n        ...this._def.checks,\n        {\n          kind,\n          value,\n          inclusive,\n          message: errorUtil.toString(message)\n        }\n      ]\n    });\n  }\n  _addCheck(check) {\n    return new ZodNumber({\n      ...this._def,\n      checks: [...this._def.checks, check]\n    });\n  }\n  int(message) {\n    return this._addCheck({\n      kind: \"int\",\n      message: errorUtil.toString(message)\n    });\n  }\n  positive(message) {\n    return this._addCheck({\n      kind: \"min\",\n      value: 0,\n      inclusive: false,\n      message: errorUtil.toString(message)\n    });\n  }\n  negative(message) {\n    return this._addCheck({\n      kind: \"max\",\n      value: 0,\n      inclusive: false,\n      message: errorUtil.toString(message)\n    });\n  }\n  nonpositive(message) {\n    return this._addCheck({\n      kind: \"max\",\n      value: 0,\n      inclusive: true,\n      message: errorUtil.toString(message)\n    });\n  }\n  nonnegative(message) {\n    return this._addCheck({\n      kind: \"min\",\n      value: 0,\n      inclusive: true,\n      message: errorUtil.toString(message)\n    });\n  }\n  multipleOf(value, message) {\n    return this._addCheck({\n      kind: \"multipleOf\",\n      value,\n      message: errorUtil.toString(message)\n    });\n  }\n  finite(message) {\n    return this._addCheck({\n      kind: \"finite\",\n      message: errorUtil.toString(message)\n    });\n  }\n  safe(message) {\n    return this._addCheck({\n      kind: \"min\",\n      inclusive: true,\n      value: Number.MIN_SAFE_INTEGER,\n      message: errorUtil.toString(message)\n    })._addCheck({\n      kind: \"max\",\n      inclusive: true,\n      value: Number.MAX_SAFE_INTEGER,\n      message: errorUtil.toString(message)\n    });\n  }\n  get minValue() {\n    let min2 = null;\n    for (const ch of this._def.checks) {\n      if (ch.kind === \"min\") {\n        if (min2 === null || ch.value > min2)\n          min2 = ch.value;\n      }\n    }\n    return min2;\n  }\n  get maxValue() {\n    let max2 = null;\n    for (const ch of this._def.checks) {\n      if (ch.kind === \"max\") {\n        if (max2 === null || ch.value < max2)\n          max2 = ch.value;\n      }\n    }\n    return max2;\n  }\n  get isInt() {\n    return !!this._def.checks.find((ch) => ch.kind === \"int\" || ch.kind === \"multipleOf\" && util.isInteger(ch.value));\n  }\n  get isFinite() {\n    let max2 = null, min2 = null;\n    for (const ch of this._def.checks) {\n      if (ch.kind === \"finite\" || ch.kind === \"int\" || ch.kind === \"multipleOf\") {\n        return true;\n      } else if (ch.kind === \"min\") {\n        if (min2 === null || ch.value > min2)\n          min2 = ch.value;\n      } else if (ch.kind === \"max\") {\n        if (max2 === null || ch.value < max2)\n          max2 = ch.value;\n      }\n    }\n    return Number.isFinite(min2) && Number.isFinite(max2);\n  }\n}\nZodNumber.create = (params) => {\n  return new ZodNumber({\n    checks: [],\n    typeName: ZodFirstPartyTypeKind.ZodNumber,\n    coerce: (params === null || params === void 0 ? void 0 : params.coerce) || false,\n    ...processCreateParams(params)\n  });\n};\nclass ZodBigInt extends ZodType {\n  constructor() {\n    super(...arguments);\n    this.min = this.gte;\n    this.max = this.lte;\n  }\n  _parse(input) {\n    if (this._def.coerce) {\n      try {\n        input.data = BigInt(input.data);\n      } catch (_a) {\n        return this._getInvalidInput(input);\n      }\n    }\n    const parsedType = this._getType(input);\n    if (parsedType !== ZodParsedType.bigint) {\n      return this._getInvalidInput(input);\n    }\n    let ctx = void 0;\n    const status = new ParseStatus();\n    for (const check of this._def.checks) {\n      if (check.kind === \"min\") {\n        const tooSmall = check.inclusive ? input.data < check.value : input.data <= check.value;\n        if (tooSmall) {\n          ctx = this._getOrReturnCtx(input, ctx);\n          addIssueToContext(ctx, {\n            code: ZodIssueCode.too_small,\n            type: \"bigint\",\n            minimum: check.value,\n            inclusive: check.inclusive,\n            message: check.message\n          });\n          status.dirty();\n        }\n      } else if (check.kind === \"max\") {\n        const tooBig = check.inclusive ? input.data > check.value : input.data >= check.value;\n        if (tooBig) {\n          ctx = this._getOrReturnCtx(input, ctx);\n          addIssueToContext(ctx, {\n            code: ZodIssueCode.too_big,\n            type: \"bigint\",\n            maximum: check.value,\n            inclusive: check.inclusive,\n            message: check.message\n          });\n          status.dirty();\n        }\n      } else if (check.kind === \"multipleOf\") {\n        if (input.data % check.value !== BigInt(0)) {\n          ctx = this._getOrReturnCtx(input, ctx);\n          addIssueToContext(ctx, {\n            code: ZodIssueCode.not_multiple_of,\n            multipleOf: check.value,\n            message: check.message\n          });\n          status.dirty();\n        }\n      } else {\n        util.assertNever(check);\n      }\n    }\n    return { status: status.value, value: input.data };\n  }\n  _getInvalidInput(input) {\n    const ctx = this._getOrReturnCtx(input);\n    addIssueToContext(ctx, {\n      code: ZodIssueCode.invalid_type,\n      expected: ZodParsedType.bigint,\n      received: ctx.parsedType\n    });\n    return INVALID;\n  }\n  gte(value, message) {\n    return this.setLimit(\"min\", value, true, errorUtil.toString(message));\n  }\n  gt(value, message) {\n    return this.setLimit(\"min\", value, false, errorUtil.toString(message));\n  }\n  lte(value, message) {\n    return this.setLimit(\"max\", value, true, errorUtil.toString(message));\n  }\n  lt(value, message) {\n    return this.setLimit(\"max\", value, false, errorUtil.toString(message));\n  }\n  setLimit(kind, value, inclusive, message) {\n    return new ZodBigInt({\n      ...this._def,\n      checks: [\n        ...this._def.checks,\n        {\n          kind,\n          value,\n          inclusive,\n          message: errorUtil.toString(message)\n        }\n      ]\n    });\n  }\n  _addCheck(check) {\n    return new ZodBigInt({\n      ...this._def,\n      checks: [...this._def.checks, check]\n    });\n  }\n  positive(message) {\n    return this._addCheck({\n      kind: \"min\",\n      value: BigInt(0),\n      inclusive: false,\n      message: errorUtil.toString(message)\n    });\n  }\n  negative(message) {\n    return this._addCheck({\n      kind: \"max\",\n      value: BigInt(0),\n      inclusive: false,\n      message: errorUtil.toString(message)\n    });\n  }\n  nonpositive(message) {\n    return this._addCheck({\n      kind: \"max\",\n      value: BigInt(0),\n      inclusive: true,\n      message: errorUtil.toString(message)\n    });\n  }\n  nonnegative(message) {\n    return this._addCheck({\n      kind: \"min\",\n      value: BigInt(0),\n      inclusive: true,\n      message: errorUtil.toString(message)\n    });\n  }\n  multipleOf(value, message) {\n    return this._addCheck({\n      kind: \"multipleOf\",\n      value,\n      message: errorUtil.toString(message)\n    });\n  }\n  get minValue() {\n    let min2 = null;\n    for (const ch of this._def.checks) {\n      if (ch.kind === \"min\") {\n        if (min2 === null || ch.value > min2)\n          min2 = ch.value;\n      }\n    }\n    return min2;\n  }\n  get maxValue() {\n    let max2 = null;\n    for (const ch of this._def.checks) {\n      if (ch.kind === \"max\") {\n        if (max2 === null || ch.value < max2)\n          max2 = ch.value;\n      }\n    }\n    return max2;\n  }\n}\nZodBigInt.create = (params) => {\n  var _a;\n  return new ZodBigInt({\n    checks: [],\n    typeName: ZodFirstPartyTypeKind.ZodBigInt,\n    coerce: (_a = params === null || params === void 0 ? void 0 : params.coerce) !== null && _a !== void 0 ? _a : false,\n    ...processCreateParams(params)\n  });\n};\nclass ZodBoolean extends ZodType {\n  _parse(input) {\n    if (this._def.coerce) {\n      input.data = Boolean(input.data);\n    }\n    const parsedType = this._getType(input);\n    if (parsedType !== ZodParsedType.boolean) {\n      const ctx = this._getOrReturnCtx(input);\n      addIssueToContext(ctx, {\n        code: ZodIssueCode.invalid_type,\n        expected: ZodParsedType.boolean,\n        received: ctx.parsedType\n      });\n      return INVALID;\n    }\n    return OK(input.data);\n  }\n}\nZodBoolean.create = (params) => {\n  return new ZodBoolean({\n    typeName: ZodFirstPartyTypeKind.ZodBoolean,\n    coerce: (params === null || params === void 0 ? void 0 : params.coerce) || false,\n    ...processCreateParams(params)\n  });\n};\nclass ZodDate extends ZodType {\n  _parse(input) {\n    if (this._def.coerce) {\n      input.data = new Date(input.data);\n    }\n    const parsedType = this._getType(input);\n    if (parsedType !== ZodParsedType.date) {\n      const ctx2 = this._getOrReturnCtx(input);\n      addIssueToContext(ctx2, {\n        code: ZodIssueCode.invalid_type,\n        expected: ZodParsedType.date,\n        received: ctx2.parsedType\n      });\n      return INVALID;\n    }\n    if (isNaN(input.data.getTime())) {\n      const ctx2 = this._getOrReturnCtx(input);\n      addIssueToContext(ctx2, {\n        code: ZodIssueCode.invalid_date\n      });\n      return INVALID;\n    }\n    const status = new ParseStatus();\n    let ctx = void 0;\n    for (const check of this._def.checks) {\n      if (check.kind === \"min\") {\n        if (input.data.getTime() < check.value) {\n          ctx = this._getOrReturnCtx(input, ctx);\n          addIssueToContext(ctx, {\n            code: ZodIssueCode.too_small,\n            message: check.message,\n            inclusive: true,\n            exact: false,\n            minimum: check.value,\n            type: \"date\"\n          });\n          status.dirty();\n        }\n      } else if (check.kind === \"max\") {\n        if (input.data.getTime() > check.value) {\n          ctx = this._getOrReturnCtx(input, ctx);\n          addIssueToContext(ctx, {\n            code: ZodIssueCode.too_big,\n            message: check.message,\n            inclusive: true,\n            exact: false,\n            maximum: check.value,\n            type: \"date\"\n          });\n          status.dirty();\n        }\n      } else {\n        util.assertNever(check);\n      }\n    }\n    return {\n      status: status.value,\n      value: new Date(input.data.getTime())\n    };\n  }\n  _addCheck(check) {\n    return new ZodDate({\n      ...this._def,\n      checks: [...this._def.checks, check]\n    });\n  }\n  min(minDate, message) {\n    return this._addCheck({\n      kind: \"min\",\n      value: minDate.getTime(),\n      message: errorUtil.toString(message)\n    });\n  }\n  max(maxDate, message) {\n    return this._addCheck({\n      kind: \"max\",\n      value: maxDate.getTime(),\n      message: errorUtil.toString(message)\n    });\n  }\n  get minDate() {\n    let min2 = null;\n    for (const ch of this._def.checks) {\n      if (ch.kind === \"min\") {\n        if (min2 === null || ch.value > min2)\n          min2 = ch.value;\n      }\n    }\n    return min2 != null ? new Date(min2) : null;\n  }\n  get maxDate() {\n    let max2 = null;\n    for (const ch of this._def.checks) {\n      if (ch.kind === \"max\") {\n        if (max2 === null || ch.value < max2)\n          max2 = ch.value;\n      }\n    }\n    return max2 != null ? new Date(max2) : null;\n  }\n}\nZodDate.create = (params) => {\n  return new ZodDate({\n    checks: [],\n    coerce: (params === null || params === void 0 ? void 0 : params.coerce) || false,\n    typeName: ZodFirstPartyTypeKind.ZodDate,\n    ...processCreateParams(params)\n  });\n};\nclass ZodSymbol extends ZodType {\n  _parse(input) {\n    const parsedType = this._getType(input);\n    if (parsedType !== ZodParsedType.symbol) {\n      const ctx = this._getOrReturnCtx(input);\n      addIssueToContext(ctx, {\n        code: ZodIssueCode.invalid_type,\n        expected: ZodParsedType.symbol,\n        received: ctx.parsedType\n      });\n      return INVALID;\n    }\n    return OK(input.data);\n  }\n}\nZodSymbol.create = (params) => {\n  return new ZodSymbol({\n    typeName: ZodFirstPartyTypeKind.ZodSymbol,\n    ...processCreateParams(params)\n  });\n};\nclass ZodUndefined extends ZodType {\n  _parse(input) {\n    const parsedType = this._getType(input);\n    if (parsedType !== ZodParsedType.undefined) {\n      const ctx = this._getOrReturnCtx(input);\n      addIssueToContext(ctx, {\n        code: ZodIssueCode.invalid_type,\n        expected: ZodParsedType.undefined,\n        received: ctx.parsedType\n      });\n      return INVALID;\n    }\n    return OK(input.data);\n  }\n}\nZodUndefined.create = (params) => {\n  return new ZodUndefined({\n    typeName: ZodFirstPartyTypeKind.ZodUndefined,\n    ...processCreateParams(params)\n  });\n};\nclass ZodNull extends ZodType {\n  _parse(input) {\n    const parsedType = this._getType(input);\n    if (parsedType !== ZodParsedType.null) {\n      const ctx = this._getOrReturnCtx(input);\n      addIssueToContext(ctx, {\n        code: ZodIssueCode.invalid_type,\n        expected: ZodParsedType.null,\n        received: ctx.parsedType\n      });\n      return INVALID;\n    }\n    return OK(input.data);\n  }\n}\nZodNull.create = (params) => {\n  return new ZodNull({\n    typeName: ZodFirstPartyTypeKind.ZodNull,\n    ...processCreateParams(params)\n  });\n};\nclass ZodAny extends ZodType {\n  constructor() {\n    super(...arguments);\n    this._any = true;\n  }\n  _parse(input) {\n    return OK(input.data);\n  }\n}\nZodAny.create = (params) => {\n  return new ZodAny({\n    typeName: ZodFirstPartyTypeKind.ZodAny,\n    ...processCreateParams(params)\n  });\n};\nclass ZodUnknown extends ZodType {\n  constructor() {\n    super(...arguments);\n    this._unknown = true;\n  }\n  _parse(input) {\n    return OK(input.data);\n  }\n}\nZodUnknown.create = (params) => {\n  return new ZodUnknown({\n    typeName: ZodFirstPartyTypeKind.ZodUnknown,\n    ...processCreateParams(params)\n  });\n};\nclass ZodNever extends ZodType {\n  _parse(input) {\n    const ctx = this._getOrReturnCtx(input);\n    addIssueToContext(ctx, {\n      code: ZodIssueCode.invalid_type,\n      expected: ZodParsedType.never,\n      received: ctx.parsedType\n    });\n    return INVALID;\n  }\n}\nZodNever.create = (params) => {\n  return new ZodNever({\n    typeName: ZodFirstPartyTypeKind.ZodNever,\n    ...processCreateParams(params)\n  });\n};\nclass ZodVoid extends ZodType {\n  _parse(input) {\n    const parsedType = this._getType(input);\n    if (parsedType !== ZodParsedType.undefined) {\n      const ctx = this._getOrReturnCtx(input);\n      addIssueToContext(ctx, {\n        code: ZodIssueCode.invalid_type,\n        expected: ZodParsedType.void,\n        received: ctx.parsedType\n      });\n      return INVALID;\n    }\n    return OK(input.data);\n  }\n}\nZodVoid.create = (params) => {\n  return new ZodVoid({\n    typeName: ZodFirstPartyTypeKind.ZodVoid,\n    ...processCreateParams(params)\n  });\n};\nclass ZodArray extends ZodType {\n  _parse(input) {\n    const { ctx, status } = this._processInputParams(input);\n    const def = this._def;\n    if (ctx.parsedType !== ZodParsedType.array) {\n      addIssueToContext(ctx, {\n        code: ZodIssueCode.invalid_type,\n        expected: ZodParsedType.array,\n        received: ctx.parsedType\n      });\n      return INVALID;\n    }\n    if (def.exactLength !== null) {\n      const tooBig = ctx.data.length > def.exactLength.value;\n      const tooSmall = ctx.data.length < def.exactLength.value;\n      if (tooBig || tooSmall) {\n        addIssueToContext(ctx, {\n          code: tooBig ? ZodIssueCode.too_big : ZodIssueCode.too_small,\n          minimum: tooSmall ? def.exactLength.value : void 0,\n          maximum: tooBig ? def.exactLength.value : void 0,\n          type: \"array\",\n          inclusive: true,\n          exact: true,\n          message: def.exactLength.message\n        });\n        status.dirty();\n      }\n    }\n    if (def.minLength !== null) {\n      if (ctx.data.length < def.minLength.value) {\n        addIssueToContext(ctx, {\n          code: ZodIssueCode.too_small,\n          minimum: def.minLength.value,\n          type: \"array\",\n          inclusive: true,\n          exact: false,\n          message: def.minLength.message\n        });\n        status.dirty();\n      }\n    }\n    if (def.maxLength !== null) {\n      if (ctx.data.length > def.maxLength.value) {\n        addIssueToContext(ctx, {\n          code: ZodIssueCode.too_big,\n          maximum: def.maxLength.value,\n          type: \"array\",\n          inclusive: true,\n          exact: false,\n          message: def.maxLength.message\n        });\n        status.dirty();\n      }\n    }\n    if (ctx.common.async) {\n      return Promise.all([...ctx.data].map((item, i2) => {\n        return def.type._parseAsync(new ParseInputLazyPath(ctx, item, ctx.path, i2));\n      })).then((result2) => {\n        return ParseStatus.mergeArray(status, result2);\n      });\n    }\n    const result = [...ctx.data].map((item, i2) => {\n      return def.type._parseSync(new ParseInputLazyPath(ctx, item, ctx.path, i2));\n    });\n    return ParseStatus.mergeArray(status, result);\n  }\n  get element() {\n    return this._def.type;\n  }\n  min(minLength, message) {\n    return new ZodArray({\n      ...this._def,\n      minLength: { value: minLength, message: errorUtil.toString(message) }\n    });\n  }\n  max(maxLength, message) {\n    return new ZodArray({\n      ...this._def,\n      maxLength: { value: maxLength, message: errorUtil.toString(message) }\n    });\n  }\n  length(len, message) {\n    return new ZodArray({\n      ...this._def,\n      exactLength: { value: len, message: errorUtil.toString(message) }\n    });\n  }\n  nonempty(message) {\n    return this.min(1, message);\n  }\n}\nZodArray.create = (schema, params) => {\n  return new ZodArray({\n    type: schema,\n    minLength: null,\n    maxLength: null,\n    exactLength: null,\n    typeName: ZodFirstPartyTypeKind.ZodArray,\n    ...processCreateParams(params)\n  });\n};\nfunction deepPartialify(schema) {\n  if (schema instanceof ZodObject) {\n    const newShape = {};\n    for (const key in schema.shape) {\n      const fieldSchema = schema.shape[key];\n      newShape[key] = ZodOptional.create(deepPartialify(fieldSchema));\n    }\n    return new ZodObject({\n      ...schema._def,\n      shape: () => newShape\n    });\n  } else if (schema instanceof ZodArray) {\n    return new ZodArray({\n      ...schema._def,\n      type: deepPartialify(schema.element)\n    });\n  } else if (schema instanceof ZodOptional) {\n    return ZodOptional.create(deepPartialify(schema.unwrap()));\n  } else if (schema instanceof ZodNullable) {\n    return ZodNullable.create(deepPartialify(schema.unwrap()));\n  } else if (schema instanceof ZodTuple) {\n    return ZodTuple.create(schema.items.map((item) => deepPartialify(item)));\n  } else {\n    return schema;\n  }\n}\nclass ZodObject extends ZodType {\n  constructor() {\n    super(...arguments);\n    this._cached = null;\n    this.nonstrict = this.passthrough;\n    this.augment = this.extend;\n  }\n  _getCached() {\n    if (this._cached !== null)\n      return this._cached;\n    const shape = this._def.shape();\n    const keys = util.objectKeys(shape);\n    return this._cached = { shape, keys };\n  }\n  _parse(input) {\n    const parsedType = this._getType(input);\n    if (parsedType !== ZodParsedType.object) {\n      const ctx2 = this._getOrReturnCtx(input);\n      addIssueToContext(ctx2, {\n        code: ZodIssueCode.invalid_type,\n        expected: ZodParsedType.object,\n        received: ctx2.parsedType\n      });\n      return INVALID;\n    }\n    const { status, ctx } = this._processInputParams(input);\n    const { shape, keys: shapeKeys } = this._getCached();\n    const extraKeys = [];\n    if (!(this._def.catchall instanceof ZodNever && this._def.unknownKeys === \"strip\")) {\n      for (const key in ctx.data) {\n        if (!shapeKeys.includes(key)) {\n          extraKeys.push(key);\n        }\n      }\n    }\n    const pairs = [];\n    for (const key of shapeKeys) {\n      const keyValidator = shape[key];\n      const value = ctx.data[key];\n      pairs.push({\n        key: { status: \"valid\", value: key },\n        value: keyValidator._parse(new ParseInputLazyPath(ctx, value, ctx.path, key)),\n        alwaysSet: key in ctx.data\n      });\n    }\n    if (this._def.catchall instanceof ZodNever) {\n      const unknownKeys = this._def.unknownKeys;\n      if (unknownKeys === \"passthrough\") {\n        for (const key of extraKeys) {\n          pairs.push({\n            key: { status: \"valid\", value: key },\n            value: { status: \"valid\", value: ctx.data[key] }\n          });\n        }\n      } else if (unknownKeys === \"strict\") {\n        if (extraKeys.length > 0) {\n          addIssueToContext(ctx, {\n            code: ZodIssueCode.unrecognized_keys,\n            keys: extraKeys\n          });\n          status.dirty();\n        }\n      } else if (unknownKeys === \"strip\") ;\n      else {\n        throw new Error(`Internal ZodObject error: invalid unknownKeys value.`);\n      }\n    } else {\n      const catchall = this._def.catchall;\n      for (const key of extraKeys) {\n        const value = ctx.data[key];\n        pairs.push({\n          key: { status: \"valid\", value: key },\n          value: catchall._parse(\n            new ParseInputLazyPath(ctx, value, ctx.path, key)\n            //, ctx.child(key), value, getParsedType(value)\n          ),\n          alwaysSet: key in ctx.data\n        });\n      }\n    }\n    if (ctx.common.async) {\n      return Promise.resolve().then(async () => {\n        const syncPairs = [];\n        for (const pair of pairs) {\n          const key = await pair.key;\n          const value = await pair.value;\n          syncPairs.push({\n            key,\n            value,\n            alwaysSet: pair.alwaysSet\n          });\n        }\n        return syncPairs;\n      }).then((syncPairs) => {\n        return ParseStatus.mergeObjectSync(status, syncPairs);\n      });\n    } else {\n      return ParseStatus.mergeObjectSync(status, pairs);\n    }\n  }\n  get shape() {\n    return this._def.shape();\n  }\n  strict(message) {\n    errorUtil.errToObj;\n    return new ZodObject({\n      ...this._def,\n      unknownKeys: \"strict\",\n      ...message !== void 0 ? {\n        errorMap: (issue, ctx) => {\n          var _a, _b, _c, _d;\n          const defaultError = (_c = (_b = (_a = this._def).errorMap) === null || _b === void 0 ? void 0 : _b.call(_a, issue, ctx).message) !== null && _c !== void 0 ? _c : ctx.defaultError;\n          if (issue.code === \"unrecognized_keys\")\n            return {\n              message: (_d = errorUtil.errToObj(message).message) !== null && _d !== void 0 ? _d : defaultError\n            };\n          return {\n            message: defaultError\n          };\n        }\n      } : {}\n    });\n  }\n  strip() {\n    return new ZodObject({\n      ...this._def,\n      unknownKeys: \"strip\"\n    });\n  }\n  passthrough() {\n    return new ZodObject({\n      ...this._def,\n      unknownKeys: \"passthrough\"\n    });\n  }\n  // const AugmentFactory =\n  //   <Def extends ZodObjectDef>(def: Def) =>\n  //   <Augmentation extends ZodRawShape>(\n  //     augmentation: Augmentation\n  //   ): ZodObject<\n  //     extendShape<ReturnType<Def[\"shape\"]>, Augmentation>,\n  //     Def[\"unknownKeys\"],\n  //     Def[\"catchall\"]\n  //   > => {\n  //     return new ZodObject({\n  //       ...def,\n  //       shape: () => ({\n  //         ...def.shape(),\n  //         ...augmentation,\n  //       }),\n  //     }) as any;\n  //   };\n  extend(augmentation) {\n    return new ZodObject({\n      ...this._def,\n      shape: () => ({\n        ...this._def.shape(),\n        ...augmentation\n      })\n    });\n  }\n  /**\n   * Prior to zod@1.0.12 there was a bug in the\n   * inferred type of merged objects. Please\n   * upgrade if you are experiencing issues.\n   */\n  merge(merging) {\n    const merged = new ZodObject({\n      unknownKeys: merging._def.unknownKeys,\n      catchall: merging._def.catchall,\n      shape: () => ({\n        ...this._def.shape(),\n        ...merging._def.shape()\n      }),\n      typeName: ZodFirstPartyTypeKind.ZodObject\n    });\n    return merged;\n  }\n  // merge<\n  //   Incoming extends AnyZodObject,\n  //   Augmentation extends Incoming[\"shape\"],\n  //   NewOutput extends {\n  //     [k in keyof Augmentation | keyof Output]: k extends keyof Augmentation\n  //       ? Augmentation[k][\"_output\"]\n  //       : k extends keyof Output\n  //       ? Output[k]\n  //       : never;\n  //   },\n  //   NewInput extends {\n  //     [k in keyof Augmentation | keyof Input]: k extends keyof Augmentation\n  //       ? Augmentation[k][\"_input\"]\n  //       : k extends keyof Input\n  //       ? Input[k]\n  //       : never;\n  //   }\n  // >(\n  //   merging: Incoming\n  // ): ZodObject<\n  //   extendShape<T, ReturnType<Incoming[\"_def\"][\"shape\"]>>,\n  //   Incoming[\"_def\"][\"unknownKeys\"],\n  //   Incoming[\"_def\"][\"catchall\"],\n  //   NewOutput,\n  //   NewInput\n  // > {\n  //   const merged: any = new ZodObject({\n  //     unknownKeys: merging._def.unknownKeys,\n  //     catchall: merging._def.catchall,\n  //     shape: () =>\n  //       objectUtil.mergeShapes(this._def.shape(), merging._def.shape()),\n  //     typeName: ZodFirstPartyTypeKind.ZodObject,\n  //   }) as any;\n  //   return merged;\n  // }\n  setKey(key, schema) {\n    return this.augment({ [key]: schema });\n  }\n  // merge<Incoming extends AnyZodObject>(\n  //   merging: Incoming\n  // ): //ZodObject<T & Incoming[\"_shape\"], UnknownKeys, Catchall> = (merging) => {\n  // ZodObject<\n  //   extendShape<T, ReturnType<Incoming[\"_def\"][\"shape\"]>>,\n  //   Incoming[\"_def\"][\"unknownKeys\"],\n  //   Incoming[\"_def\"][\"catchall\"]\n  // > {\n  //   // const mergedShape = objectUtil.mergeShapes(\n  //   //   this._def.shape(),\n  //   //   merging._def.shape()\n  //   // );\n  //   const merged: any = new ZodObject({\n  //     unknownKeys: merging._def.unknownKeys,\n  //     catchall: merging._def.catchall,\n  //     shape: () =>\n  //       objectUtil.mergeShapes(this._def.shape(), merging._def.shape()),\n  //     typeName: ZodFirstPartyTypeKind.ZodObject,\n  //   }) as any;\n  //   return merged;\n  // }\n  catchall(index2) {\n    return new ZodObject({\n      ...this._def,\n      catchall: index2\n    });\n  }\n  pick(mask) {\n    const shape = {};\n    util.objectKeys(mask).forEach((key) => {\n      if (mask[key] && this.shape[key]) {\n        shape[key] = this.shape[key];\n      }\n    });\n    return new ZodObject({\n      ...this._def,\n      shape: () => shape\n    });\n  }\n  omit(mask) {\n    const shape = {};\n    util.objectKeys(this.shape).forEach((key) => {\n      if (!mask[key]) {\n        shape[key] = this.shape[key];\n      }\n    });\n    return new ZodObject({\n      ...this._def,\n      shape: () => shape\n    });\n  }\n  /**\n   * @deprecated\n   */\n  deepPartial() {\n    return deepPartialify(this);\n  }\n  partial(mask) {\n    const newShape = {};\n    util.objectKeys(this.shape).forEach((key) => {\n      const fieldSchema = this.shape[key];\n      if (mask && !mask[key]) {\n        newShape[key] = fieldSchema;\n      } else {\n        newShape[key] = fieldSchema.optional();\n      }\n    });\n    return new ZodObject({\n      ...this._def,\n      shape: () => newShape\n    });\n  }\n  required(mask) {\n    const newShape = {};\n    util.objectKeys(this.shape).forEach((key) => {\n      if (mask && !mask[key]) {\n        newShape[key] = this.shape[key];\n      } else {\n        const fieldSchema = this.shape[key];\n        let newField = fieldSchema;\n        while (newField instanceof ZodOptional) {\n          newField = newField._def.innerType;\n        }\n        newShape[key] = newField;\n      }\n    });\n    return new ZodObject({\n      ...this._def,\n      shape: () => newShape\n    });\n  }\n  keyof() {\n    return createZodEnum(util.objectKeys(this.shape));\n  }\n}\nZodObject.create = (shape, params) => {\n  return new ZodObject({\n    shape: () => shape,\n    unknownKeys: \"strip\",\n    catchall: ZodNever.create(),\n    typeName: ZodFirstPartyTypeKind.ZodObject,\n    ...processCreateParams(params)\n  });\n};\nZodObject.strictCreate = (shape, params) => {\n  return new ZodObject({\n    shape: () => shape,\n    unknownKeys: \"strict\",\n    catchall: ZodNever.create(),\n    typeName: ZodFirstPartyTypeKind.ZodObject,\n    ...processCreateParams(params)\n  });\n};\nZodObject.lazycreate = (shape, params) => {\n  return new ZodObject({\n    shape,\n    unknownKeys: \"strip\",\n    catchall: ZodNever.create(),\n    typeName: ZodFirstPartyTypeKind.ZodObject,\n    ...processCreateParams(params)\n  });\n};\nclass ZodUnion extends ZodType {\n  _parse(input) {\n    const { ctx } = this._processInputParams(input);\n    const options = this._def.options;\n    function handleResults(results) {\n      for (const result of results) {\n        if (result.result.status === \"valid\") {\n          return result.result;\n        }\n      }\n      for (const result of results) {\n        if (result.result.status === \"dirty\") {\n          ctx.common.issues.push(...result.ctx.common.issues);\n          return result.result;\n        }\n      }\n      const unionErrors = results.map((result) => new ZodError(result.ctx.common.issues));\n      addIssueToContext(ctx, {\n        code: ZodIssueCode.invalid_union,\n        unionErrors\n      });\n      return INVALID;\n    }\n    if (ctx.common.async) {\n      return Promise.all(options.map(async (option) => {\n        const childCtx = {\n          ...ctx,\n          common: {\n            ...ctx.common,\n            issues: []\n          },\n          parent: null\n        };\n        return {\n          result: await option._parseAsync({\n            data: ctx.data,\n            path: ctx.path,\n            parent: childCtx\n          }),\n          ctx: childCtx\n        };\n      })).then(handleResults);\n    } else {\n      let dirty = void 0;\n      const issues = [];\n      for (const option of options) {\n        const childCtx = {\n          ...ctx,\n          common: {\n            ...ctx.common,\n            issues: []\n          },\n          parent: null\n        };\n        const result = option._parseSync({\n          data: ctx.data,\n          path: ctx.path,\n          parent: childCtx\n        });\n        if (result.status === \"valid\") {\n          return result;\n        } else if (result.status === \"dirty\" && !dirty) {\n          dirty = { result, ctx: childCtx };\n        }\n        if (childCtx.common.issues.length) {\n          issues.push(childCtx.common.issues);\n        }\n      }\n      if (dirty) {\n        ctx.common.issues.push(...dirty.ctx.common.issues);\n        return dirty.result;\n      }\n      const unionErrors = issues.map((issues2) => new ZodError(issues2));\n      addIssueToContext(ctx, {\n        code: ZodIssueCode.invalid_union,\n        unionErrors\n      });\n      return INVALID;\n    }\n  }\n  get options() {\n    return this._def.options;\n  }\n}\nZodUnion.create = (types, params) => {\n  return new ZodUnion({\n    options: types,\n    typeName: ZodFirstPartyTypeKind.ZodUnion,\n    ...processCreateParams(params)\n  });\n};\nconst getDiscriminator = (type) => {\n  if (type instanceof ZodLazy) {\n    return getDiscriminator(type.schema);\n  } else if (type instanceof ZodEffects) {\n    return getDiscriminator(type.innerType());\n  } else if (type instanceof ZodLiteral) {\n    return [type.value];\n  } else if (type instanceof ZodEnum) {\n    return type.options;\n  } else if (type instanceof ZodNativeEnum) {\n    return util.objectValues(type.enum);\n  } else if (type instanceof ZodDefault) {\n    return getDiscriminator(type._def.innerType);\n  } else if (type instanceof ZodUndefined) {\n    return [void 0];\n  } else if (type instanceof ZodNull) {\n    return [null];\n  } else if (type instanceof ZodOptional) {\n    return [void 0, ...getDiscriminator(type.unwrap())];\n  } else if (type instanceof ZodNullable) {\n    return [null, ...getDiscriminator(type.unwrap())];\n  } else if (type instanceof ZodBranded) {\n    return getDiscriminator(type.unwrap());\n  } else if (type instanceof ZodReadonly) {\n    return getDiscriminator(type.unwrap());\n  } else if (type instanceof ZodCatch) {\n    return getDiscriminator(type._def.innerType);\n  } else {\n    return [];\n  }\n};\nclass ZodDiscriminatedUnion extends ZodType {\n  _parse(input) {\n    const { ctx } = this._processInputParams(input);\n    if (ctx.parsedType !== ZodParsedType.object) {\n      addIssueToContext(ctx, {\n        code: ZodIssueCode.invalid_type,\n        expected: ZodParsedType.object,\n        received: ctx.parsedType\n      });\n      return INVALID;\n    }\n    const discriminator = this.discriminator;\n    const discriminatorValue = ctx.data[discriminator];\n    const option = this.optionsMap.get(discriminatorValue);\n    if (!option) {\n      addIssueToContext(ctx, {\n        code: ZodIssueCode.invalid_union_discriminator,\n        options: Array.from(this.optionsMap.keys()),\n        path: [discriminator]\n      });\n      return INVALID;\n    }\n    if (ctx.common.async) {\n      return option._parseAsync({\n        data: ctx.data,\n        path: ctx.path,\n        parent: ctx\n      });\n    } else {\n      return option._parseSync({\n        data: ctx.data,\n        path: ctx.path,\n        parent: ctx\n      });\n    }\n  }\n  get discriminator() {\n    return this._def.discriminator;\n  }\n  get options() {\n    return this._def.options;\n  }\n  get optionsMap() {\n    return this._def.optionsMap;\n  }\n  /**\n   * The constructor of the discriminated union schema. Its behaviour is very similar to that of the normal z.union() constructor.\n   * However, it only allows a union of objects, all of which need to share a discriminator property. This property must\n   * have a different value for each object in the union.\n   * @param discriminator the name of the discriminator property\n   * @param types an array of object schemas\n   * @param params\n   */\n  static create(discriminator, options, params) {\n    const optionsMap = /* @__PURE__ */ new Map();\n    for (const type of options) {\n      const discriminatorValues = getDiscriminator(type.shape[discriminator]);\n      if (!discriminatorValues.length) {\n        throw new Error(`A discriminator value for key \\`${discriminator}\\` could not be extracted from all schema options`);\n      }\n      for (const value of discriminatorValues) {\n        if (optionsMap.has(value)) {\n          throw new Error(`Discriminator property ${String(discriminator)} has duplicate value ${String(value)}`);\n        }\n        optionsMap.set(value, type);\n      }\n    }\n    return new ZodDiscriminatedUnion({\n      typeName: ZodFirstPartyTypeKind.ZodDiscriminatedUnion,\n      discriminator,\n      options,\n      optionsMap,\n      ...processCreateParams(params)\n    });\n  }\n}\nfunction mergeValues(a3, b2) {\n  const aType = getParsedType(a3);\n  const bType = getParsedType(b2);\n  if (a3 === b2) {\n    return { valid: true, data: a3 };\n  } else if (aType === ZodParsedType.object && bType === ZodParsedType.object) {\n    const bKeys = util.objectKeys(b2);\n    const sharedKeys = util.objectKeys(a3).filter((key) => bKeys.indexOf(key) !== -1);\n    const newObj = { ...a3, ...b2 };\n    for (const key of sharedKeys) {\n      const sharedValue = mergeValues(a3[key], b2[key]);\n      if (!sharedValue.valid) {\n        return { valid: false };\n      }\n      newObj[key] = sharedValue.data;\n    }\n    return { valid: true, data: newObj };\n  } else if (aType === ZodParsedType.array && bType === ZodParsedType.array) {\n    if (a3.length !== b2.length) {\n      return { valid: false };\n    }\n    const newArray = [];\n    for (let index2 = 0; index2 < a3.length; index2++) {\n      const itemA = a3[index2];\n      const itemB = b2[index2];\n      const sharedValue = mergeValues(itemA, itemB);\n      if (!sharedValue.valid) {\n        return { valid: false };\n      }\n      newArray.push(sharedValue.data);\n    }\n    return { valid: true, data: newArray };\n  } else if (aType === ZodParsedType.date && bType === ZodParsedType.date && +a3 === +b2) {\n    return { valid: true, data: a3 };\n  } else {\n    return { valid: false };\n  }\n}\nclass ZodIntersection extends ZodType {\n  _parse(input) {\n    const { status, ctx } = this._processInputParams(input);\n    const handleParsed = (parsedLeft, parsedRight) => {\n      if (isAborted(parsedLeft) || isAborted(parsedRight)) {\n        return INVALID;\n      }\n      const merged = mergeValues(parsedLeft.value, parsedRight.value);\n      if (!merged.valid) {\n        addIssueToContext(ctx, {\n          code: ZodIssueCode.invalid_intersection_types\n        });\n        return INVALID;\n      }\n      if (isDirty(parsedLeft) || isDirty(parsedRight)) {\n        status.dirty();\n      }\n      return { status: status.value, value: merged.data };\n    };\n    if (ctx.common.async) {\n      return Promise.all([\n        this._def.left._parseAsync({\n          data: ctx.data,\n          path: ctx.path,\n          parent: ctx\n        }),\n        this._def.right._parseAsync({\n          data: ctx.data,\n          path: ctx.path,\n          parent: ctx\n        })\n      ]).then(([left, right]) => handleParsed(left, right));\n    } else {\n      return handleParsed(this._def.left._parseSync({\n        data: ctx.data,\n        path: ctx.path,\n        parent: ctx\n      }), this._def.right._parseSync({\n        data: ctx.data,\n        path: ctx.path,\n        parent: ctx\n      }));\n    }\n  }\n}\nZodIntersection.create = (left, right, params) => {\n  return new ZodIntersection({\n    left,\n    right,\n    typeName: ZodFirstPartyTypeKind.ZodIntersection,\n    ...processCreateParams(params)\n  });\n};\nclass ZodTuple extends ZodType {\n  _parse(input) {\n    const { status, ctx } = this._processInputParams(input);\n    if (ctx.parsedType !== ZodParsedType.array) {\n      addIssueToContext(ctx, {\n        code: ZodIssueCode.invalid_type,\n        expected: ZodParsedType.array,\n        received: ctx.parsedType\n      });\n      return INVALID;\n    }\n    if (ctx.data.length < this._def.items.length) {\n      addIssueToContext(ctx, {\n        code: ZodIssueCode.too_small,\n        minimum: this._def.items.length,\n        inclusive: true,\n        exact: false,\n        type: \"array\"\n      });\n      return INVALID;\n    }\n    const rest = this._def.rest;\n    if (!rest && ctx.data.length > this._def.items.length) {\n      addIssueToContext(ctx, {\n        code: ZodIssueCode.too_big,\n        maximum: this._def.items.length,\n        inclusive: true,\n        exact: false,\n        type: \"array\"\n      });\n      status.dirty();\n    }\n    const items = [...ctx.data].map((item, itemIndex) => {\n      const schema = this._def.items[itemIndex] || this._def.rest;\n      if (!schema)\n        return null;\n      return schema._parse(new ParseInputLazyPath(ctx, item, ctx.path, itemIndex));\n    }).filter((x2) => !!x2);\n    if (ctx.common.async) {\n      return Promise.all(items).then((results) => {\n        return ParseStatus.mergeArray(status, results);\n      });\n    } else {\n      return ParseStatus.mergeArray(status, items);\n    }\n  }\n  get items() {\n    return this._def.items;\n  }\n  rest(rest) {\n    return new ZodTuple({\n      ...this._def,\n      rest\n    });\n  }\n}\nZodTuple.create = (schemas, params) => {\n  if (!Array.isArray(schemas)) {\n    throw new Error(\"You must pass an array of schemas to z.tuple([ ... ])\");\n  }\n  return new ZodTuple({\n    items: schemas,\n    typeName: ZodFirstPartyTypeKind.ZodTuple,\n    rest: null,\n    ...processCreateParams(params)\n  });\n};\nclass ZodRecord extends ZodType {\n  get keySchema() {\n    return this._def.keyType;\n  }\n  get valueSchema() {\n    return this._def.valueType;\n  }\n  _parse(input) {\n    const { status, ctx } = this._processInputParams(input);\n    if (ctx.parsedType !== ZodParsedType.object) {\n      addIssueToContext(ctx, {\n        code: ZodIssueCode.invalid_type,\n        expected: ZodParsedType.object,\n        received: ctx.parsedType\n      });\n      return INVALID;\n    }\n    const pairs = [];\n    const keyType = this._def.keyType;\n    const valueType = this._def.valueType;\n    for (const key in ctx.data) {\n      pairs.push({\n        key: keyType._parse(new ParseInputLazyPath(ctx, key, ctx.path, key)),\n        value: valueType._parse(new ParseInputLazyPath(ctx, ctx.data[key], ctx.path, key)),\n        alwaysSet: key in ctx.data\n      });\n    }\n    if (ctx.common.async) {\n      return ParseStatus.mergeObjectAsync(status, pairs);\n    } else {\n      return ParseStatus.mergeObjectSync(status, pairs);\n    }\n  }\n  get element() {\n    return this._def.valueType;\n  }\n  static create(first, second, third) {\n    if (second instanceof ZodType) {\n      return new ZodRecord({\n        keyType: first,\n        valueType: second,\n        typeName: ZodFirstPartyTypeKind.ZodRecord,\n        ...processCreateParams(third)\n      });\n    }\n    return new ZodRecord({\n      keyType: ZodString.create(),\n      valueType: first,\n      typeName: ZodFirstPartyTypeKind.ZodRecord,\n      ...processCreateParams(second)\n    });\n  }\n}\nclass ZodMap extends ZodType {\n  get keySchema() {\n    return this._def.keyType;\n  }\n  get valueSchema() {\n    return this._def.valueType;\n  }\n  _parse(input) {\n    const { status, ctx } = this._processInputParams(input);\n    if (ctx.parsedType !== ZodParsedType.map) {\n      addIssueToContext(ctx, {\n        code: ZodIssueCode.invalid_type,\n        expected: ZodParsedType.map,\n        received: ctx.parsedType\n      });\n      return INVALID;\n    }\n    const keyType = this._def.keyType;\n    const valueType = this._def.valueType;\n    const pairs = [...ctx.data.entries()].map(([key, value], index2) => {\n      return {\n        key: keyType._parse(new ParseInputLazyPath(ctx, key, ctx.path, [index2, \"key\"])),\n        value: valueType._parse(new ParseInputLazyPath(ctx, value, ctx.path, [index2, \"value\"]))\n      };\n    });\n    if (ctx.common.async) {\n      const finalMap = /* @__PURE__ */ new Map();\n      return Promise.resolve().then(async () => {\n        for (const pair of pairs) {\n          const key = await pair.key;\n          const value = await pair.value;\n          if (key.status === \"aborted\" || value.status === \"aborted\") {\n            return INVALID;\n          }\n          if (key.status === \"dirty\" || value.status === \"dirty\") {\n            status.dirty();\n          }\n          finalMap.set(key.value, value.value);\n        }\n        return { status: status.value, value: finalMap };\n      });\n    } else {\n      const finalMap = /* @__PURE__ */ new Map();\n      for (const pair of pairs) {\n        const key = pair.key;\n        const value = pair.value;\n        if (key.status === \"aborted\" || value.status === \"aborted\") {\n          return INVALID;\n        }\n        if (key.status === \"dirty\" || value.status === \"dirty\") {\n          status.dirty();\n        }\n        finalMap.set(key.value, value.value);\n      }\n      return { status: status.value, value: finalMap };\n    }\n  }\n}\nZodMap.create = (keyType, valueType, params) => {\n  return new ZodMap({\n    valueType,\n    keyType,\n    typeName: ZodFirstPartyTypeKind.ZodMap,\n    ...processCreateParams(params)\n  });\n};\nclass ZodSet extends ZodType {\n  _parse(input) {\n    const { status, ctx } = this._processInputParams(input);\n    if (ctx.parsedType !== ZodParsedType.set) {\n      addIssueToContext(ctx, {\n        code: ZodIssueCode.invalid_type,\n        expected: ZodParsedType.set,\n        received: ctx.parsedType\n      });\n      return INVALID;\n    }\n    const def = this._def;\n    if (def.minSize !== null) {\n      if (ctx.data.size < def.minSize.value) {\n        addIssueToContext(ctx, {\n          code: ZodIssueCode.too_small,\n          minimum: def.minSize.value,\n          type: \"set\",\n          inclusive: true,\n          exact: false,\n          message: def.minSize.message\n        });\n        status.dirty();\n      }\n    }\n    if (def.maxSize !== null) {\n      if (ctx.data.size > def.maxSize.value) {\n        addIssueToContext(ctx, {\n          code: ZodIssueCode.too_big,\n          maximum: def.maxSize.value,\n          type: \"set\",\n          inclusive: true,\n          exact: false,\n          message: def.maxSize.message\n        });\n        status.dirty();\n      }\n    }\n    const valueType = this._def.valueType;\n    function finalizeSet(elements2) {\n      const parsedSet = /* @__PURE__ */ new Set();\n      for (const element of elements2) {\n        if (element.status === \"aborted\")\n          return INVALID;\n        if (element.status === \"dirty\")\n          status.dirty();\n        parsedSet.add(element.value);\n      }\n      return { status: status.value, value: parsedSet };\n    }\n    const elements = [...ctx.data.values()].map((item, i2) => valueType._parse(new ParseInputLazyPath(ctx, item, ctx.path, i2)));\n    if (ctx.common.async) {\n      return Promise.all(elements).then((elements2) => finalizeSet(elements2));\n    } else {\n      return finalizeSet(elements);\n    }\n  }\n  min(minSize, message) {\n    return new ZodSet({\n      ...this._def,\n      minSize: { value: minSize, message: errorUtil.toString(message) }\n    });\n  }\n  max(maxSize, message) {\n    return new ZodSet({\n      ...this._def,\n      maxSize: { value: maxSize, message: errorUtil.toString(message) }\n    });\n  }\n  size(size2, message) {\n    return this.min(size2, message).max(size2, message);\n  }\n  nonempty(message) {\n    return this.min(1, message);\n  }\n}\nZodSet.create = (valueType, params) => {\n  return new ZodSet({\n    valueType,\n    minSize: null,\n    maxSize: null,\n    typeName: ZodFirstPartyTypeKind.ZodSet,\n    ...processCreateParams(params)\n  });\n};\nclass ZodFunction extends ZodType {\n  constructor() {\n    super(...arguments);\n    this.validate = this.implement;\n  }\n  _parse(input) {\n    const { ctx } = this._processInputParams(input);\n    if (ctx.parsedType !== ZodParsedType.function) {\n      addIssueToContext(ctx, {\n        code: ZodIssueCode.invalid_type,\n        expected: ZodParsedType.function,\n        received: ctx.parsedType\n      });\n      return INVALID;\n    }\n    function makeArgsIssue(args, error2) {\n      return makeIssue({\n        data: args,\n        path: ctx.path,\n        errorMaps: [\n          ctx.common.contextualErrorMap,\n          ctx.schemaErrorMap,\n          getErrorMap(),\n          errorMap\n        ].filter((x2) => !!x2),\n        issueData: {\n          code: ZodIssueCode.invalid_arguments,\n          argumentsError: error2\n        }\n      });\n    }\n    function makeReturnsIssue(returns, error2) {\n      return makeIssue({\n        data: returns,\n        path: ctx.path,\n        errorMaps: [\n          ctx.common.contextualErrorMap,\n          ctx.schemaErrorMap,\n          getErrorMap(),\n          errorMap\n        ].filter((x2) => !!x2),\n        issueData: {\n          code: ZodIssueCode.invalid_return_type,\n          returnTypeError: error2\n        }\n      });\n    }\n    const params = { errorMap: ctx.common.contextualErrorMap };\n    const fn2 = ctx.data;\n    if (this._def.returns instanceof ZodPromise) {\n      const me = this;\n      return OK(async function(...args) {\n        const error2 = new ZodError([]);\n        const parsedArgs = await me._def.args.parseAsync(args, params).catch((e2) => {\n          error2.addIssue(makeArgsIssue(args, e2));\n          throw error2;\n        });\n        const result = await Reflect.apply(fn2, this, parsedArgs);\n        const parsedReturns = await me._def.returns._def.type.parseAsync(result, params).catch((e2) => {\n          error2.addIssue(makeReturnsIssue(result, e2));\n          throw error2;\n        });\n        return parsedReturns;\n      });\n    } else {\n      const me = this;\n      return OK(function(...args) {\n        const parsedArgs = me._def.args.safeParse(args, params);\n        if (!parsedArgs.success) {\n          throw new ZodError([makeArgsIssue(args, parsedArgs.error)]);\n        }\n        const result = Reflect.apply(fn2, this, parsedArgs.data);\n        const parsedReturns = me._def.returns.safeParse(result, params);\n        if (!parsedReturns.success) {\n          throw new ZodError([makeReturnsIssue(result, parsedReturns.error)]);\n        }\n        return parsedReturns.data;\n      });\n    }\n  }\n  parameters() {\n    return this._def.args;\n  }\n  returnType() {\n    return this._def.returns;\n  }\n  args(...items) {\n    return new ZodFunction({\n      ...this._def,\n      args: ZodTuple.create(items).rest(ZodUnknown.create())\n    });\n  }\n  returns(returnType) {\n    return new ZodFunction({\n      ...this._def,\n      returns: returnType\n    });\n  }\n  implement(func) {\n    const validatedFunc = this.parse(func);\n    return validatedFunc;\n  }\n  strictImplement(func) {\n    const validatedFunc = this.parse(func);\n    return validatedFunc;\n  }\n  static create(args, returns, params) {\n    return new ZodFunction({\n      args: args ? args : ZodTuple.create([]).rest(ZodUnknown.create()),\n      returns: returns || ZodUnknown.create(),\n      typeName: ZodFirstPartyTypeKind.ZodFunction,\n      ...processCreateParams(params)\n    });\n  }\n}\nclass ZodLazy extends ZodType {\n  get schema() {\n    return this._def.getter();\n  }\n  _parse(input) {\n    const { ctx } = this._processInputParams(input);\n    const lazySchema = this._def.getter();\n    return lazySchema._parse({ data: ctx.data, path: ctx.path, parent: ctx });\n  }\n}\nZodLazy.create = (getter, params) => {\n  return new ZodLazy({\n    getter,\n    typeName: ZodFirstPartyTypeKind.ZodLazy,\n    ...processCreateParams(params)\n  });\n};\nclass ZodLiteral extends ZodType {\n  _parse(input) {\n    if (input.data !== this._def.value) {\n      const ctx = this._getOrReturnCtx(input);\n      addIssueToContext(ctx, {\n        received: ctx.data,\n        code: ZodIssueCode.invalid_literal,\n        expected: this._def.value\n      });\n      return INVALID;\n    }\n    return { status: \"valid\", value: input.data };\n  }\n  get value() {\n    return this._def.value;\n  }\n}\nZodLiteral.create = (value, params) => {\n  return new ZodLiteral({\n    value,\n    typeName: ZodFirstPartyTypeKind.ZodLiteral,\n    ...processCreateParams(params)\n  });\n};\nfunction createZodEnum(values, params) {\n  return new ZodEnum({\n    values,\n    typeName: ZodFirstPartyTypeKind.ZodEnum,\n    ...processCreateParams(params)\n  });\n}\nclass ZodEnum extends ZodType {\n  constructor() {\n    super(...arguments);\n    _ZodEnum_cache.set(this, void 0);\n  }\n  _parse(input) {\n    if (typeof input.data !== \"string\") {\n      const ctx = this._getOrReturnCtx(input);\n      const expectedValues = this._def.values;\n      addIssueToContext(ctx, {\n        expected: util.joinValues(expectedValues),\n        received: ctx.parsedType,\n        code: ZodIssueCode.invalid_type\n      });\n      return INVALID;\n    }\n    if (!__classPrivateFieldGet(this, _ZodEnum_cache)) {\n      __classPrivateFieldSet(this, _ZodEnum_cache, new Set(this._def.values));\n    }\n    if (!__classPrivateFieldGet(this, _ZodEnum_cache).has(input.data)) {\n      const ctx = this._getOrReturnCtx(input);\n      const expectedValues = this._def.values;\n      addIssueToContext(ctx, {\n        received: ctx.data,\n        code: ZodIssueCode.invalid_enum_value,\n        options: expectedValues\n      });\n      return INVALID;\n    }\n    return OK(input.data);\n  }\n  get options() {\n    return this._def.values;\n  }\n  get enum() {\n    const enumValues = {};\n    for (const val of this._def.values) {\n      enumValues[val] = val;\n    }\n    return enumValues;\n  }\n  get Values() {\n    const enumValues = {};\n    for (const val of this._def.values) {\n      enumValues[val] = val;\n    }\n    return enumValues;\n  }\n  get Enum() {\n    const enumValues = {};\n    for (const val of this._def.values) {\n      enumValues[val] = val;\n    }\n    return enumValues;\n  }\n  extract(values, newDef = this._def) {\n    return ZodEnum.create(values, {\n      ...this._def,\n      ...newDef\n    });\n  }\n  exclude(values, newDef = this._def) {\n    return ZodEnum.create(this.options.filter((opt) => !values.includes(opt)), {\n      ...this._def,\n      ...newDef\n    });\n  }\n}\n_ZodEnum_cache = /* @__PURE__ */ new WeakMap();\nZodEnum.create = createZodEnum;\nclass ZodNativeEnum extends ZodType {\n  constructor() {\n    super(...arguments);\n    _ZodNativeEnum_cache.set(this, void 0);\n  }\n  _parse(input) {\n    const nativeEnumValues = util.getValidEnumValues(this._def.values);\n    const ctx = this._getOrReturnCtx(input);\n    if (ctx.parsedType !== ZodParsedType.string && ctx.parsedType !== ZodParsedType.number) {\n      const expectedValues = util.objectValues(nativeEnumValues);\n      addIssueToContext(ctx, {\n        expected: util.joinValues(expectedValues),\n        received: ctx.parsedType,\n        code: ZodIssueCode.invalid_type\n      });\n      return INVALID;\n    }\n    if (!__classPrivateFieldGet(this, _ZodNativeEnum_cache)) {\n      __classPrivateFieldSet(this, _ZodNativeEnum_cache, new Set(util.getValidEnumValues(this._def.values)));\n    }\n    if (!__classPrivateFieldGet(this, _ZodNativeEnum_cache).has(input.data)) {\n      const expectedValues = util.objectValues(nativeEnumValues);\n      addIssueToContext(ctx, {\n        received: ctx.data,\n        code: ZodIssueCode.invalid_enum_value,\n        options: expectedValues\n      });\n      return INVALID;\n    }\n    return OK(input.data);\n  }\n  get enum() {\n    return this._def.values;\n  }\n}\n_ZodNativeEnum_cache = /* @__PURE__ */ new WeakMap();\nZodNativeEnum.create = (values, params) => {\n  return new ZodNativeEnum({\n    values,\n    typeName: ZodFirstPartyTypeKind.ZodNativeEnum,\n    ...processCreateParams(params)\n  });\n};\nclass ZodPromise extends ZodType {\n  unwrap() {\n    return this._def.type;\n  }\n  _parse(input) {\n    const { ctx } = this._processInputParams(input);\n    if (ctx.parsedType !== ZodParsedType.promise && ctx.common.async === false) {\n      addIssueToContext(ctx, {\n        code: ZodIssueCode.invalid_type,\n        expected: ZodParsedType.promise,\n        received: ctx.parsedType\n      });\n      return INVALID;\n    }\n    const promisified = ctx.parsedType === ZodParsedType.promise ? ctx.data : Promise.resolve(ctx.data);\n    return OK(promisified.then((data) => {\n      return this._def.type.parseAsync(data, {\n        path: ctx.path,\n        errorMap: ctx.common.contextualErrorMap\n      });\n    }));\n  }\n}\nZodPromise.create = (schema, params) => {\n  return new ZodPromise({\n    type: schema,\n    typeName: ZodFirstPartyTypeKind.ZodPromise,\n    ...processCreateParams(params)\n  });\n};\nclass ZodEffects extends ZodType {\n  innerType() {\n    return this._def.schema;\n  }\n  sourceType() {\n    return this._def.schema._def.typeName === ZodFirstPartyTypeKind.ZodEffects ? this._def.schema.sourceType() : this._def.schema;\n  }\n  _parse(input) {\n    const { status, ctx } = this._processInputParams(input);\n    const effect = this._def.effect || null;\n    const checkCtx = {\n      addIssue: (arg) => {\n        addIssueToContext(ctx, arg);\n        if (arg.fatal) {\n          status.abort();\n        } else {\n          status.dirty();\n        }\n      },\n      get path() {\n        return ctx.path;\n      }\n    };\n    checkCtx.addIssue = checkCtx.addIssue.bind(checkCtx);\n    if (effect.type === \"preprocess\") {\n      const processed = effect.transform(ctx.data, checkCtx);\n      if (ctx.common.async) {\n        return Promise.resolve(processed).then(async (processed2) => {\n          if (status.value === \"aborted\")\n            return INVALID;\n          const result = await this._def.schema._parseAsync({\n            data: processed2,\n            path: ctx.path,\n            parent: ctx\n          });\n          if (result.status === \"aborted\")\n            return INVALID;\n          if (result.status === \"dirty\")\n            return DIRTY(result.value);\n          if (status.value === \"dirty\")\n            return DIRTY(result.value);\n          return result;\n        });\n      } else {\n        if (status.value === \"aborted\")\n          return INVALID;\n        const result = this._def.schema._parseSync({\n          data: processed,\n          path: ctx.path,\n          parent: ctx\n        });\n        if (result.status === \"aborted\")\n          return INVALID;\n        if (result.status === \"dirty\")\n          return DIRTY(result.value);\n        if (status.value === \"dirty\")\n          return DIRTY(result.value);\n        return result;\n      }\n    }\n    if (effect.type === \"refinement\") {\n      const executeRefinement = (acc) => {\n        const result = effect.refinement(acc, checkCtx);\n        if (ctx.common.async) {\n          return Promise.resolve(result);\n        }\n        if (result instanceof Promise) {\n          throw new Error(\"Async refinement encountered during synchronous parse operation. Use .parseAsync instead.\");\n        }\n        return acc;\n      };\n      if (ctx.common.async === false) {\n        const inner2 = this._def.schema._parseSync({\n          data: ctx.data,\n          path: ctx.path,\n          parent: ctx\n        });\n        if (inner2.status === \"aborted\")\n          return INVALID;\n        if (inner2.status === \"dirty\")\n          status.dirty();\n        executeRefinement(inner2.value);\n        return { status: status.value, value: inner2.value };\n      } else {\n        return this._def.schema._parseAsync({ data: ctx.data, path: ctx.path, parent: ctx }).then((inner2) => {\n          if (inner2.status === \"aborted\")\n            return INVALID;\n          if (inner2.status === \"dirty\")\n            status.dirty();\n          return executeRefinement(inner2.value).then(() => {\n            return { status: status.value, value: inner2.value };\n          });\n        });\n      }\n    }\n    if (effect.type === \"transform\") {\n      if (ctx.common.async === false) {\n        const base = this._def.schema._parseSync({\n          data: ctx.data,\n          path: ctx.path,\n          parent: ctx\n        });\n        if (!isValid(base))\n          return base;\n        const result = effect.transform(base.value, checkCtx);\n        if (result instanceof Promise) {\n          throw new Error(`Asynchronous transform encountered during synchronous parse operation. Use .parseAsync instead.`);\n        }\n        return { status: status.value, value: result };\n      } else {\n        return this._def.schema._parseAsync({ data: ctx.data, path: ctx.path, parent: ctx }).then((base) => {\n          if (!isValid(base))\n            return base;\n          return Promise.resolve(effect.transform(base.value, checkCtx)).then((result) => ({ status: status.value, value: result }));\n        });\n      }\n    }\n    util.assertNever(effect);\n  }\n}\nZodEffects.create = (schema, effect, params) => {\n  return new ZodEffects({\n    schema,\n    typeName: ZodFirstPartyTypeKind.ZodEffects,\n    effect,\n    ...processCreateParams(params)\n  });\n};\nZodEffects.createWithPreprocess = (preprocess, schema, params) => {\n  return new ZodEffects({\n    schema,\n    effect: { type: \"preprocess\", transform: preprocess },\n    typeName: ZodFirstPartyTypeKind.ZodEffects,\n    ...processCreateParams(params)\n  });\n};\nclass ZodOptional extends ZodType {\n  _parse(input) {\n    const parsedType = this._getType(input);\n    if (parsedType === ZodParsedType.undefined) {\n      return OK(void 0);\n    }\n    return this._def.innerType._parse(input);\n  }\n  unwrap() {\n    return this._def.innerType;\n  }\n}\nZodOptional.create = (type, params) => {\n  return new ZodOptional({\n    innerType: type,\n    typeName: ZodFirstPartyTypeKind.ZodOptional,\n    ...processCreateParams(params)\n  });\n};\nclass ZodNullable extends ZodType {\n  _parse(input) {\n    const parsedType = this._getType(input);\n    if (parsedType === ZodParsedType.null) {\n      return OK(null);\n    }\n    return this._def.innerType._parse(input);\n  }\n  unwrap() {\n    return this._def.innerType;\n  }\n}\nZodNullable.create = (type, params) => {\n  return new ZodNullable({\n    innerType: type,\n    typeName: ZodFirstPartyTypeKind.ZodNullable,\n    ...processCreateParams(params)\n  });\n};\nclass ZodDefault extends ZodType {\n  _parse(input) {\n    const { ctx } = this._processInputParams(input);\n    let data = ctx.data;\n    if (ctx.parsedType === ZodParsedType.undefined) {\n      data = this._def.defaultValue();\n    }\n    return this._def.innerType._parse({\n      data,\n      path: ctx.path,\n      parent: ctx\n    });\n  }\n  removeDefault() {\n    return this._def.innerType;\n  }\n}\nZodDefault.create = (type, params) => {\n  return new ZodDefault({\n    innerType: type,\n    typeName: ZodFirstPartyTypeKind.ZodDefault,\n    defaultValue: typeof params.default === \"function\" ? params.default : () => params.default,\n    ...processCreateParams(params)\n  });\n};\nclass ZodCatch extends ZodType {\n  _parse(input) {\n    const { ctx } = this._processInputParams(input);\n    const newCtx = {\n      ...ctx,\n      common: {\n        ...ctx.common,\n        issues: []\n      }\n    };\n    const result = this._def.innerType._parse({\n      data: newCtx.data,\n      path: newCtx.path,\n      parent: {\n        ...newCtx\n      }\n    });\n    if (isAsync(result)) {\n      return result.then((result2) => {\n        return {\n          status: \"valid\",\n          value: result2.status === \"valid\" ? result2.value : this._def.catchValue({\n            get error() {\n              return new ZodError(newCtx.common.issues);\n            },\n            input: newCtx.data\n          })\n        };\n      });\n    } else {\n      return {\n        status: \"valid\",\n        value: result.status === \"valid\" ? result.value : this._def.catchValue({\n          get error() {\n            return new ZodError(newCtx.common.issues);\n          },\n          input: newCtx.data\n        })\n      };\n    }\n  }\n  removeCatch() {\n    return this._def.innerType;\n  }\n}\nZodCatch.create = (type, params) => {\n  return new ZodCatch({\n    innerType: type,\n    typeName: ZodFirstPartyTypeKind.ZodCatch,\n    catchValue: typeof params.catch === \"function\" ? params.catch : () => params.catch,\n    ...processCreateParams(params)\n  });\n};\nclass ZodNaN extends ZodType {\n  _parse(input) {\n    const parsedType = this._getType(input);\n    if (parsedType !== ZodParsedType.nan) {\n      const ctx = this._getOrReturnCtx(input);\n      addIssueToContext(ctx, {\n        code: ZodIssueCode.invalid_type,\n        expected: ZodParsedType.nan,\n        received: ctx.parsedType\n      });\n      return INVALID;\n    }\n    return { status: \"valid\", value: input.data };\n  }\n}\nZodNaN.create = (params) => {\n  return new ZodNaN({\n    typeName: ZodFirstPartyTypeKind.ZodNaN,\n    ...processCreateParams(params)\n  });\n};\nconst BRAND = Symbol(\"zod_brand\");\nclass ZodBranded extends ZodType {\n  _parse(input) {\n    const { ctx } = this._processInputParams(input);\n    const data = ctx.data;\n    return this._def.type._parse({\n      data,\n      path: ctx.path,\n      parent: ctx\n    });\n  }\n  unwrap() {\n    return this._def.type;\n  }\n}\nclass ZodPipeline extends ZodType {\n  _parse(input) {\n    const { status, ctx } = this._processInputParams(input);\n    if (ctx.common.async) {\n      const handleAsync = async () => {\n        const inResult = await this._def.in._parseAsync({\n          data: ctx.data,\n          path: ctx.path,\n          parent: ctx\n        });\n        if (inResult.status === \"aborted\")\n          return INVALID;\n        if (inResult.status === \"dirty\") {\n          status.dirty();\n          return DIRTY(inResult.value);\n        } else {\n          return this._def.out._parseAsync({\n            data: inResult.value,\n            path: ctx.path,\n            parent: ctx\n          });\n        }\n      };\n      return handleAsync();\n    } else {\n      const inResult = this._def.in._parseSync({\n        data: ctx.data,\n        path: ctx.path,\n        parent: ctx\n      });\n      if (inResult.status === \"aborted\")\n        return INVALID;\n      if (inResult.status === \"dirty\") {\n        status.dirty();\n        return {\n          status: \"dirty\",\n          value: inResult.value\n        };\n      } else {\n        return this._def.out._parseSync({\n          data: inResult.value,\n          path: ctx.path,\n          parent: ctx\n        });\n      }\n    }\n  }\n  static create(a3, b2) {\n    return new ZodPipeline({\n      in: a3,\n      out: b2,\n      typeName: ZodFirstPartyTypeKind.ZodPipeline\n    });\n  }\n}\nclass ZodReadonly extends ZodType {\n  _parse(input) {\n    const result = this._def.innerType._parse(input);\n    const freeze = (data) => {\n      if (isValid(data)) {\n        data.value = Object.freeze(data.value);\n      }\n      return data;\n    };\n    return isAsync(result) ? result.then((data) => freeze(data)) : freeze(result);\n  }\n  unwrap() {\n    return this._def.innerType;\n  }\n}\nZodReadonly.create = (type, params) => {\n  return new ZodReadonly({\n    innerType: type,\n    typeName: ZodFirstPartyTypeKind.ZodReadonly,\n    ...processCreateParams(params)\n  });\n};\nfunction cleanParams(params, data) {\n  const p2 = typeof params === \"function\" ? params(data) : typeof params === \"string\" ? { message: params } : params;\n  const p22 = typeof p2 === \"string\" ? { message: p2 } : p2;\n  return p22;\n}\nfunction custom(check, _params = {}, fatal) {\n  if (check)\n    return ZodAny.create().superRefine((data, ctx) => {\n      var _a, _b;\n      const r2 = check(data);\n      if (r2 instanceof Promise) {\n        return r2.then((r3) => {\n          var _a2, _b2;\n          if (!r3) {\n            const params = cleanParams(_params, data);\n            const _fatal = (_b2 = (_a2 = params.fatal) !== null && _a2 !== void 0 ? _a2 : fatal) !== null && _b2 !== void 0 ? _b2 : true;\n            ctx.addIssue({ code: \"custom\", ...params, fatal: _fatal });\n          }\n        });\n      }\n      if (!r2) {\n        const params = cleanParams(_params, data);\n        const _fatal = (_b = (_a = params.fatal) !== null && _a !== void 0 ? _a : fatal) !== null && _b !== void 0 ? _b : true;\n        ctx.addIssue({ code: \"custom\", ...params, fatal: _fatal });\n      }\n      return;\n    });\n  return ZodAny.create();\n}\nconst late = {\n  object: ZodObject.lazycreate\n};\nvar ZodFirstPartyTypeKind;\n(function(ZodFirstPartyTypeKind2) {\n  ZodFirstPartyTypeKind2[\"ZodString\"] = \"ZodString\";\n  ZodFirstPartyTypeKind2[\"ZodNumber\"] = \"ZodNumber\";\n  ZodFirstPartyTypeKind2[\"ZodNaN\"] = \"ZodNaN\";\n  ZodFirstPartyTypeKind2[\"ZodBigInt\"] = \"ZodBigInt\";\n  ZodFirstPartyTypeKind2[\"ZodBoolean\"] = \"ZodBoolean\";\n  ZodFirstPartyTypeKind2[\"ZodDate\"] = \"ZodDate\";\n  ZodFirstPartyTypeKind2[\"ZodSymbol\"] = \"ZodSymbol\";\n  ZodFirstPartyTypeKind2[\"ZodUndefined\"] = \"ZodUndefined\";\n  ZodFirstPartyTypeKind2[\"ZodNull\"] = \"ZodNull\";\n  ZodFirstPartyTypeKind2[\"ZodAny\"] = \"ZodAny\";\n  ZodFirstPartyTypeKind2[\"ZodUnknown\"] = \"ZodUnknown\";\n  ZodFirstPartyTypeKind2[\"ZodNever\"] = \"ZodNever\";\n  ZodFirstPartyTypeKind2[\"ZodVoid\"] = \"ZodVoid\";\n  ZodFirstPartyTypeKind2[\"ZodArray\"] = \"ZodArray\";\n  ZodFirstPartyTypeKind2[\"ZodObject\"] = \"ZodObject\";\n  ZodFirstPartyTypeKind2[\"ZodUnion\"] = \"ZodUnion\";\n  ZodFirstPartyTypeKind2[\"ZodDiscriminatedUnion\"] = \"ZodDiscriminatedUnion\";\n  ZodFirstPartyTypeKind2[\"ZodIntersection\"] = \"ZodIntersection\";\n  ZodFirstPartyTypeKind2[\"ZodTuple\"] = \"ZodTuple\";\n  ZodFirstPartyTypeKind2[\"ZodRecord\"] = \"ZodRecord\";\n  ZodFirstPartyTypeKind2[\"ZodMap\"] = \"ZodMap\";\n  ZodFirstPartyTypeKind2[\"ZodSet\"] = \"ZodSet\";\n  ZodFirstPartyTypeKind2[\"ZodFunction\"] = \"ZodFunction\";\n  ZodFirstPartyTypeKind2[\"ZodLazy\"] = \"ZodLazy\";\n  ZodFirstPartyTypeKind2[\"ZodLiteral\"] = \"ZodLiteral\";\n  ZodFirstPartyTypeKind2[\"ZodEnum\"] = \"ZodEnum\";\n  ZodFirstPartyTypeKind2[\"ZodEffects\"] = \"ZodEffects\";\n  ZodFirstPartyTypeKind2[\"ZodNativeEnum\"] = \"ZodNativeEnum\";\n  ZodFirstPartyTypeKind2[\"ZodOptional\"] = \"ZodOptional\";\n  ZodFirstPartyTypeKind2[\"ZodNullable\"] = \"ZodNullable\";\n  ZodFirstPartyTypeKind2[\"ZodDefault\"] = \"ZodDefault\";\n  ZodFirstPartyTypeKind2[\"ZodCatch\"] = \"ZodCatch\";\n  ZodFirstPartyTypeKind2[\"ZodPromise\"] = \"ZodPromise\";\n  ZodFirstPartyTypeKind2[\"ZodBranded\"] = \"ZodBranded\";\n  ZodFirstPartyTypeKind2[\"ZodPipeline\"] = \"ZodPipeline\";\n  ZodFirstPartyTypeKind2[\"ZodReadonly\"] = \"ZodReadonly\";\n})(ZodFirstPartyTypeKind || (ZodFirstPartyTypeKind = {}));\nconst instanceOfType = (cls, params = {\n  message: `Input not instance of ${cls.name}`\n}) => custom((data) => data instanceof cls, params);\nconst stringType = ZodString.create;\nconst numberType = ZodNumber.create;\nconst nanType = ZodNaN.create;\nconst bigIntType = ZodBigInt.create;\nconst booleanType = ZodBoolean.create;\nconst dateType = ZodDate.create;\nconst symbolType = ZodSymbol.create;\nconst undefinedType = ZodUndefined.create;\nconst nullType = ZodNull.create;\nconst anyType = ZodAny.create;\nconst unknownType = ZodUnknown.create;\nconst neverType = ZodNever.create;\nconst voidType = ZodVoid.create;\nconst arrayType = ZodArray.create;\nconst objectType = ZodObject.create;\nconst strictObjectType = ZodObject.strictCreate;\nconst unionType = ZodUnion.create;\nconst discriminatedUnionType = ZodDiscriminatedUnion.create;\nconst intersectionType = ZodIntersection.create;\nconst tupleType = ZodTuple.create;\nconst recordType = ZodRecord.create;\nconst mapType = ZodMap.create;\nconst setType = ZodSet.create;\nconst functionType = ZodFunction.create;\nconst lazyType = ZodLazy.create;\nconst literalType = ZodLiteral.create;\nconst enumType = ZodEnum.create;\nconst nativeEnumType = ZodNativeEnum.create;\nconst promiseType = ZodPromise.create;\nconst effectsType = ZodEffects.create;\nconst optionalType = ZodOptional.create;\nconst nullableType = ZodNullable.create;\nconst preprocessType = ZodEffects.createWithPreprocess;\nconst pipelineType = ZodPipeline.create;\nconst ostring = () => stringType().optional();\nconst onumber = () => numberType().optional();\nconst oboolean = () => booleanType().optional();\nconst coerce = {\n  string: (arg) => ZodString.create({ ...arg, coerce: true }),\n  number: (arg) => ZodNumber.create({ ...arg, coerce: true }),\n  boolean: (arg) => ZodBoolean.create({\n    ...arg,\n    coerce: true\n  }),\n  bigint: (arg) => ZodBigInt.create({ ...arg, coerce: true }),\n  date: (arg) => ZodDate.create({ ...arg, coerce: true })\n};\nconst NEVER = INVALID;\nvar z = /* @__PURE__ */ Object.freeze({\n  __proto__: null,\n  defaultErrorMap: errorMap,\n  setErrorMap,\n  getErrorMap,\n  makeIssue,\n  EMPTY_PATH,\n  addIssueToContext,\n  ParseStatus,\n  INVALID,\n  DIRTY,\n  OK,\n  isAborted,\n  isDirty,\n  isValid,\n  isAsync,\n  get util() {\n    return util;\n  },\n  get objectUtil() {\n    return objectUtil;\n  },\n  ZodParsedType,\n  getParsedType,\n  ZodType,\n  datetimeRegex,\n  ZodString,\n  ZodNumber,\n  ZodBigInt,\n  ZodBoolean,\n  ZodDate,\n  ZodSymbol,\n  ZodUndefined,\n  ZodNull,\n  ZodAny,\n  ZodUnknown,\n  ZodNever,\n  ZodVoid,\n  ZodArray,\n  ZodObject,\n  ZodUnion,\n  ZodDiscriminatedUnion,\n  ZodIntersection,\n  ZodTuple,\n  ZodRecord,\n  ZodMap,\n  ZodSet,\n  ZodFunction,\n  ZodLazy,\n  ZodLiteral,\n  ZodEnum,\n  ZodNativeEnum,\n  ZodPromise,\n  ZodEffects,\n  ZodTransformer: ZodEffects,\n  ZodOptional,\n  ZodNullable,\n  ZodDefault,\n  ZodCatch,\n  ZodNaN,\n  BRAND,\n  ZodBranded,\n  ZodPipeline,\n  ZodReadonly,\n  custom,\n  Schema: ZodType,\n  ZodSchema: ZodType,\n  late,\n  get ZodFirstPartyTypeKind() {\n    return ZodFirstPartyTypeKind;\n  },\n  coerce,\n  any: anyType,\n  array: arrayType,\n  bigint: bigIntType,\n  boolean: booleanType,\n  date: dateType,\n  discriminatedUnion: discriminatedUnionType,\n  effect: effectsType,\n  \"enum\": enumType,\n  \"function\": functionType,\n  \"instanceof\": instanceOfType,\n  intersection: intersectionType,\n  lazy: lazyType,\n  literal: literalType,\n  map: mapType,\n  nan: nanType,\n  nativeEnum: nativeEnumType,\n  never: neverType,\n  \"null\": nullType,\n  nullable: nullableType,\n  number: numberType,\n  object: objectType,\n  oboolean,\n  onumber,\n  optional: optionalType,\n  ostring,\n  pipeline: pipelineType,\n  preprocess: preprocessType,\n  promise: promiseType,\n  record: recordType,\n  set: setType,\n  strictObject: strictObjectType,\n  string: stringType,\n  symbol: symbolType,\n  transformer: effectsType,\n  tuple: tupleType,\n  \"undefined\": undefinedType,\n  union: unionType,\n  unknown: unknownType,\n  \"void\": voidType,\n  NEVER,\n  ZodIssueCode,\n  quotelessJson,\n  ZodError\n});\nvar DEFAULT_PORT = 5746;\nvar PING_ENDPOINT = \"/ping/stagewise\";\nvar PING_RESPONSE = \"stagewise\";\nvar contract = createBridgeContract({\n  server: {\n    triggerAgentPrompt: {\n      request: z.object({\n        prompt: z.string()\n      }),\n      response: z.object({\n        result: z.object({\n          success: z.boolean(),\n          error: z.string().optional(),\n          output: z.string().optional()\n        })\n      }),\n      update: z.object({\n        updateText: z.string()\n      })\n    }\n  }\n});\nasync function findPort(maxAttempts = 10, timeout = 300) {\n  for (let attempt = 0; attempt < maxAttempts; attempt++) {\n    const port = DEFAULT_PORT + attempt;\n    try {\n      const controller = new AbortController();\n      const timeoutId = setTimeout(() => controller.abort(), timeout);\n      try {\n        const response = await fetch(\n          `http://localhost:${port}${PING_ENDPOINT}`,\n          {\n            signal: controller.signal\n          }\n        );\n        clearTimeout(timeoutId);\n        if (response.ok) {\n          const text = await response.text();\n          if (text === PING_RESPONSE) {\n            return port;\n          }\n        }\n      } catch (error2) {\n        clearTimeout(timeoutId);\n        continue;\n      }\n    } catch (error2) {\n      continue;\n    }\n  }\n  return null;\n}\nconst SRPCBridgeContext = K$3({\n  bridge: null,\n  isConnecting: false,\n  error: null\n});\nfunction SRPCBridgeProvider({\n  children\n}) {\n  const [state, setState] = d$4({\n    bridge: null,\n    isConnecting: true,\n    error: null\n  });\n  y$6(() => {\n    async function initializeBridge() {\n      try {\n        const port = await findPort();\n        const bridge = createSRPCClientBridge(\n          `ws://localhost:${port}`,\n          contract\n        );\n        await bridge.connect();\n        setState({\n          bridge,\n          isConnecting: false,\n          error: null\n        });\n      } catch (error2) {\n        setState({\n          bridge: null,\n          isConnecting: false,\n          error: error2 instanceof Error ? error2 : new Error(String(error2))\n        });\n      }\n    }\n    initializeBridge();\n  }, []);\n  return /* @__PURE__ */ u$9(SRPCBridgeContext.Provider, { value: state, children });\n}\nfunction useSRPCBridge() {\n  const context = x$4(SRPCBridgeContext);\n  if (!context) {\n    throw new Error(\"useSRPCBridge must be used within an SRPCBridgeProvider\");\n  }\n  return context;\n}\nfunction getElementAttributes(element) {\n  const attrs = {};\n  const priorityAttrs = [\n    \"id\",\n    \"class\",\n    \"name\",\n    \"type\",\n    \"href\",\n    \"src\",\n    \"alt\",\n    \"for\",\n    \"placeholder\"\n  ];\n  const dataAttrs = [];\n  for (let i2 = 0; i2 < element.attributes.length; i2++) {\n    const attr = element.attributes[i2];\n    if (attr.name.startsWith(\"data-\")) {\n      dataAttrs.push({ name: attr.name, value: attr.value });\n    } else if (priorityAttrs.includes(attr.name.toLowerCase()) || attr.name.toLowerCase() !== \"style\") {\n      attrs[attr.name] = attr.value;\n    }\n  }\n  dataAttrs.forEach((da) => {\n    attrs[da.name] = da.value;\n  });\n  return attrs;\n}\nfunction generateElementContext(element, index2) {\n  var _a;\n  let context = `<element index=\"${index2 + 1}\">\n`;\n  context += `  <tag>${element.tagName.toLowerCase()}</tag>\n`;\n  const id = element.id;\n  if (id) {\n    context += `  <id>${id}</id>\n`;\n  }\n  const classes = Array.from(element.classList).join(\", \");\n  if (classes) {\n    context += `  <classes>${classes}</classes>\n`;\n  }\n  const attributes = getElementAttributes(element);\n  if (Object.keys(attributes).length > 0) {\n    context += `  <attributes>\n`;\n    for (const [key, value] of Object.entries(attributes)) {\n      if (key.toLowerCase() !== \"class\" || !classes) {\n        context += `    <${key}>${value}</${key}>\n`;\n      }\n    }\n    context += `  </attributes>\n`;\n  }\n  const text = (_a = element.innerText) == null ? void 0 : _a.trim();\n  if (text) {\n    const maxLength = 100;\n    context += `  <text>${text.length > maxLength ? `${text.substring(0, maxLength)}...` : text}</text>\n`;\n  }\n  context += `  <structural_context>\n`;\n  if (element.parentElement) {\n    const parent = element.parentElement;\n    context += `    <parent>\n`;\n    context += `      <tag>${parent.tagName.toLowerCase()}</tag>\n`;\n    if (parent.id) {\n      context += `      <id>${parent.id}</id>\n`;\n    }\n    const parentClasses = Array.from(parent.classList).join(\", \");\n    if (parentClasses) {\n      context += `      <classes>${parentClasses}</classes>\n`;\n    }\n    context += `    </parent>\n`;\n  } else {\n    context += `    <parent>No parent element found (likely root or disconnected)</parent>\n`;\n  }\n  context += `  </structural_context>\n`;\n  try {\n    const styles = window.getComputedStyle(element);\n    const relevantStyles = {\n      color: styles.color,\n      backgroundColor: styles.backgroundColor,\n      fontSize: styles.fontSize,\n      fontWeight: styles.fontWeight,\n      display: styles.display\n    };\n    context += `  <styles>\n`;\n    for (const [key, value] of Object.entries(relevantStyles)) {\n      context += `    <${key}>${value}</${key}>\n`;\n    }\n    context += `  </styles>\n`;\n  } catch (e2) {\n    context += `  <styles>Could not retrieve computed styles</styles>\n`;\n  }\n  context += `</element>\n`;\n  return context;\n}\nfunction createPrompt(selectedElements, userPrompt, url) {\n  if (!selectedElements || selectedElements.length === 0) {\n    return `\n    <request>\n      <user_goal>${userPrompt}</user_goal>\n      <url>${url}</url>\n  <context>No specific element was selected on the page. Please analyze the page code in general or ask for clarification.</context>\n</request>`.trim();\n  }\n  let detailedContext = \"\";\n  selectedElements.forEach((element, index2) => {\n    detailedContext += generateElementContext(element, index2);\n  });\n  return `\n<request>\n  <user_goal>${userPrompt}</user_goal>\n  <url>${url}</url>\n  <selected_elements>\n    ${detailedContext.trim()}\n  </selected_elements>\n</request>`.trim();\n}\nconst DropAreaZone = {\n  BOTTOM_CENTER: 4\n};\nconst createStoreImpl = (createState) => {\n  let state;\n  const listeners = /* @__PURE__ */ new Set();\n  const setState = (partial, replace) => {\n    const nextState = typeof partial === \"function\" ? partial(state) : partial;\n    if (!Object.is(nextState, state)) {\n      const previousState = state;\n      state = (replace != null ? replace : typeof nextState !== \"object\" || nextState === null) ? nextState : Object.assign({}, state, nextState);\n      listeners.forEach((listener) => listener(state, previousState));\n    }\n  };\n  const getState = () => state;\n  const getInitialState = () => initialState;\n  const subscribe = (listener) => {\n    listeners.add(listener);\n    return () => listeners.delete(listener);\n  };\n  const api = { setState, getState, getInitialState, subscribe };\n  const initialState = state = createState(setState, getState, api);\n  return api;\n};\nconst createStore = (createState) => createState ? createStoreImpl(createState) : createStoreImpl;\nconst identity = (arg) => arg;\nfunction useStore(api, selector = identity) {\n  const slice = Rn.useSyncExternalStore(\n    api.subscribe,\n    () => selector(api.getState()),\n    () => selector(api.getInitialState())\n  );\n  Rn.useDebugValue(slice);\n  return slice;\n}\nconst createImpl = (createState) => {\n  const api = createStore(createState);\n  const useBoundStore = (selector) => useStore(api, selector);\n  Object.assign(useBoundStore, api);\n  return useBoundStore;\n};\nconst create = (createState) => createState ? createImpl(createState) : createImpl;\nclass DoubleIndexedKV {\n  constructor() {\n    this.keyToValue = /* @__PURE__ */ new Map();\n    this.valueToKey = /* @__PURE__ */ new Map();\n  }\n  set(key, value) {\n    this.keyToValue.set(key, value);\n    this.valueToKey.set(value, key);\n  }\n  getByKey(key) {\n    return this.keyToValue.get(key);\n  }\n  getByValue(value) {\n    return this.valueToKey.get(value);\n  }\n  clear() {\n    this.keyToValue.clear();\n    this.valueToKey.clear();\n  }\n}\nclass Registry {\n  constructor(generateIdentifier) {\n    this.generateIdentifier = generateIdentifier;\n    this.kv = new DoubleIndexedKV();\n  }\n  register(value, identifier) {\n    if (this.kv.getByValue(value)) {\n      return;\n    }\n    if (!identifier) {\n      identifier = this.generateIdentifier(value);\n    }\n    this.kv.set(identifier, value);\n  }\n  clear() {\n    this.kv.clear();\n  }\n  getIdentifier(value) {\n    return this.kv.getByValue(value);\n  }\n  getValue(identifier) {\n    return this.kv.getByKey(identifier);\n  }\n}\nclass ClassRegistry extends Registry {\n  constructor() {\n    super((c2) => c2.name);\n    this.classToAllowedProps = /* @__PURE__ */ new Map();\n  }\n  register(value, options) {\n    if (typeof options === \"object\") {\n      if (options.allowProps) {\n        this.classToAllowedProps.set(value, options.allowProps);\n      }\n      super.register(value, options.identifier);\n    } else {\n      super.register(value, options);\n    }\n  }\n  getAllowedProps(value) {\n    return this.classToAllowedProps.get(value);\n  }\n}\nfunction valuesOfObj(record) {\n  if (\"values\" in Object) {\n    return Object.values(record);\n  }\n  const values = [];\n  for (const key in record) {\n    if (record.hasOwnProperty(key)) {\n      values.push(record[key]);\n    }\n  }\n  return values;\n}\nfunction find(record, predicate) {\n  const values = valuesOfObj(record);\n  if (\"find\" in values) {\n    return values.find(predicate);\n  }\n  const valuesNotNever = values;\n  for (let i2 = 0; i2 < valuesNotNever.length; i2++) {\n    const value = valuesNotNever[i2];\n    if (predicate(value)) {\n      return value;\n    }\n  }\n  return void 0;\n}\nfunction forEach(record, run) {\n  Object.entries(record).forEach(([key, value]) => run(value, key));\n}\nfunction includes(arr, value) {\n  return arr.indexOf(value) !== -1;\n}\nfunction findArr(record, predicate) {\n  for (let i2 = 0; i2 < record.length; i2++) {\n    const value = record[i2];\n    if (predicate(value)) {\n      return value;\n    }\n  }\n  return void 0;\n}\nclass CustomTransformerRegistry {\n  constructor() {\n    this.transfomers = {};\n  }\n  register(transformer) {\n    this.transfomers[transformer.name] = transformer;\n  }\n  findApplicable(v2) {\n    return find(this.transfomers, (transformer) => transformer.isApplicable(v2));\n  }\n  findByName(name) {\n    return this.transfomers[name];\n  }\n}\nconst getType$1 = (payload) => Object.prototype.toString.call(payload).slice(8, -1);\nconst isUndefined = (payload) => typeof payload === \"undefined\";\nconst isNull = (payload) => payload === null;\nconst isPlainObject$1 = (payload) => {\n  if (typeof payload !== \"object\" || payload === null)\n    return false;\n  if (payload === Object.prototype)\n    return false;\n  if (Object.getPrototypeOf(payload) === null)\n    return true;\n  return Object.getPrototypeOf(payload) === Object.prototype;\n};\nconst isEmptyObject = (payload) => isPlainObject$1(payload) && Object.keys(payload).length === 0;\nconst isArray$1 = (payload) => Array.isArray(payload);\nconst isString$1 = (payload) => typeof payload === \"string\";\nconst isNumber$1 = (payload) => typeof payload === \"number\" && !isNaN(payload);\nconst isBoolean = (payload) => typeof payload === \"boolean\";\nconst isRegExp = (payload) => payload instanceof RegExp;\nconst isMap = (payload) => payload instanceof Map;\nconst isSet = (payload) => payload instanceof Set;\nconst isSymbol = (payload) => getType$1(payload) === \"Symbol\";\nconst isDate = (payload) => payload instanceof Date && !isNaN(payload.valueOf());\nconst isError = (payload) => payload instanceof Error;\nconst isNaNValue = (payload) => typeof payload === \"number\" && isNaN(payload);\nconst isPrimitive = (payload) => isBoolean(payload) || isNull(payload) || isUndefined(payload) || isNumber$1(payload) || isString$1(payload) || isSymbol(payload);\nconst isBigint = (payload) => typeof payload === \"bigint\";\nconst isInfinite = (payload) => payload === Infinity || payload === -Infinity;\nconst isTypedArray = (payload) => ArrayBuffer.isView(payload) && !(payload instanceof DataView);\nconst isURL = (payload) => payload instanceof URL;\nconst escapeKey = (key) => key.replace(/\\./g, \"\\\\.\");\nconst stringifyPath = (path) => path.map(String).map(escapeKey).join(\".\");\nconst parsePath = (string) => {\n  const result = [];\n  let segment = \"\";\n  for (let i2 = 0; i2 < string.length; i2++) {\n    let char = string.charAt(i2);\n    const isEscapedDot = char === \"\\\\\" && string.charAt(i2 + 1) === \".\";\n    if (isEscapedDot) {\n      segment += \".\";\n      i2++;\n      continue;\n    }\n    const isEndOfSegment = char === \".\";\n    if (isEndOfSegment) {\n      result.push(segment);\n      segment = \"\";\n      continue;\n    }\n    segment += char;\n  }\n  const lastSegment = segment;\n  result.push(lastSegment);\n  return result;\n};\nfunction simpleTransformation(isApplicable, annotation, transform, untransform) {\n  return {\n    isApplicable,\n    annotation,\n    transform,\n    untransform\n  };\n}\nconst simpleRules = [\n  simpleTransformation(isUndefined, \"undefined\", () => null, () => void 0),\n  simpleTransformation(isBigint, \"bigint\", (v2) => v2.toString(), (v2) => {\n    if (typeof BigInt !== \"undefined\") {\n      return BigInt(v2);\n    }\n    console.error(\"Please add a BigInt polyfill.\");\n    return v2;\n  }),\n  simpleTransformation(isDate, \"Date\", (v2) => v2.toISOString(), (v2) => new Date(v2)),\n  simpleTransformation(isError, \"Error\", (v2, superJson) => {\n    const baseError = {\n      name: v2.name,\n      message: v2.message\n    };\n    superJson.allowedErrorProps.forEach((prop) => {\n      baseError[prop] = v2[prop];\n    });\n    return baseError;\n  }, (v2, superJson) => {\n    const e2 = new Error(v2.message);\n    e2.name = v2.name;\n    e2.stack = v2.stack;\n    superJson.allowedErrorProps.forEach((prop) => {\n      e2[prop] = v2[prop];\n    });\n    return e2;\n  }),\n  simpleTransformation(isRegExp, \"regexp\", (v2) => \"\" + v2, (regex) => {\n    const body = regex.slice(1, regex.lastIndexOf(\"/\"));\n    const flags = regex.slice(regex.lastIndexOf(\"/\") + 1);\n    return new RegExp(body, flags);\n  }),\n  simpleTransformation(\n    isSet,\n    \"set\",\n    // (sets only exist in es6+)\n    // eslint-disable-next-line es5/no-es6-methods\n    (v2) => [...v2.values()],\n    (v2) => new Set(v2)\n  ),\n  simpleTransformation(isMap, \"map\", (v2) => [...v2.entries()], (v2) => new Map(v2)),\n  simpleTransformation((v2) => isNaNValue(v2) || isInfinite(v2), \"number\", (v2) => {\n    if (isNaNValue(v2)) {\n      return \"NaN\";\n    }\n    if (v2 > 0) {\n      return \"Infinity\";\n    } else {\n      return \"-Infinity\";\n    }\n  }, Number),\n  simpleTransformation((v2) => v2 === 0 && 1 / v2 === -Infinity, \"number\", () => {\n    return \"-0\";\n  }, Number),\n  simpleTransformation(isURL, \"URL\", (v2) => v2.toString(), (v2) => new URL(v2))\n];\nfunction compositeTransformation(isApplicable, annotation, transform, untransform) {\n  return {\n    isApplicable,\n    annotation,\n    transform,\n    untransform\n  };\n}\nconst symbolRule = compositeTransformation((s2, superJson) => {\n  if (isSymbol(s2)) {\n    const isRegistered = !!superJson.symbolRegistry.getIdentifier(s2);\n    return isRegistered;\n  }\n  return false;\n}, (s2, superJson) => {\n  const identifier = superJson.symbolRegistry.getIdentifier(s2);\n  return [\"symbol\", identifier];\n}, (v2) => v2.description, (_2, a3, superJson) => {\n  const value = superJson.symbolRegistry.getValue(a3[1]);\n  if (!value) {\n    throw new Error(\"Trying to deserialize unknown symbol\");\n  }\n  return value;\n});\nconst constructorToName = [\n  Int8Array,\n  Uint8Array,\n  Int16Array,\n  Uint16Array,\n  Int32Array,\n  Uint32Array,\n  Float32Array,\n  Float64Array,\n  Uint8ClampedArray\n].reduce((obj, ctor) => {\n  obj[ctor.name] = ctor;\n  return obj;\n}, {});\nconst typedArrayRule = compositeTransformation(isTypedArray, (v2) => [\"typed-array\", v2.constructor.name], (v2) => [...v2], (v2, a3) => {\n  const ctor = constructorToName[a3[1]];\n  if (!ctor) {\n    throw new Error(\"Trying to deserialize unknown typed array\");\n  }\n  return new ctor(v2);\n});\nfunction isInstanceOfRegisteredClass(potentialClass, superJson) {\n  if (potentialClass == null ? void 0 : potentialClass.constructor) {\n    const isRegistered = !!superJson.classRegistry.getIdentifier(potentialClass.constructor);\n    return isRegistered;\n  }\n  return false;\n}\nconst classRule = compositeTransformation(isInstanceOfRegisteredClass, (clazz, superJson) => {\n  const identifier = superJson.classRegistry.getIdentifier(clazz.constructor);\n  return [\"class\", identifier];\n}, (clazz, superJson) => {\n  const allowedProps = superJson.classRegistry.getAllowedProps(clazz.constructor);\n  if (!allowedProps) {\n    return { ...clazz };\n  }\n  const result = {};\n  allowedProps.forEach((prop) => {\n    result[prop] = clazz[prop];\n  });\n  return result;\n}, (v2, a3, superJson) => {\n  const clazz = superJson.classRegistry.getValue(a3[1]);\n  if (!clazz) {\n    throw new Error(`Trying to deserialize unknown class '${a3[1]}' - check https://github.com/blitz-js/superjson/issues/116#issuecomment-773996564`);\n  }\n  return Object.assign(Object.create(clazz.prototype), v2);\n});\nconst customRule = compositeTransformation((value, superJson) => {\n  return !!superJson.customTransformerRegistry.findApplicable(value);\n}, (value, superJson) => {\n  const transformer = superJson.customTransformerRegistry.findApplicable(value);\n  return [\"custom\", transformer.name];\n}, (value, superJson) => {\n  const transformer = superJson.customTransformerRegistry.findApplicable(value);\n  return transformer.serialize(value);\n}, (v2, a3, superJson) => {\n  const transformer = superJson.customTransformerRegistry.findByName(a3[1]);\n  if (!transformer) {\n    throw new Error(\"Trying to deserialize unknown custom value\");\n  }\n  return transformer.deserialize(v2);\n});\nconst compositeRules = [classRule, symbolRule, customRule, typedArrayRule];\nconst transformValue = (value, superJson) => {\n  const applicableCompositeRule = findArr(compositeRules, (rule) => rule.isApplicable(value, superJson));\n  if (applicableCompositeRule) {\n    return {\n      value: applicableCompositeRule.transform(value, superJson),\n      type: applicableCompositeRule.annotation(value, superJson)\n    };\n  }\n  const applicableSimpleRule = findArr(simpleRules, (rule) => rule.isApplicable(value, superJson));\n  if (applicableSimpleRule) {\n    return {\n      value: applicableSimpleRule.transform(value, superJson),\n      type: applicableSimpleRule.annotation\n    };\n  }\n  return void 0;\n};\nconst simpleRulesByAnnotation = {};\nsimpleRules.forEach((rule) => {\n  simpleRulesByAnnotation[rule.annotation] = rule;\n});\nconst untransformValue = (json, type, superJson) => {\n  if (isArray$1(type)) {\n    switch (type[0]) {\n      case \"symbol\":\n        return symbolRule.untransform(json, type, superJson);\n      case \"class\":\n        return classRule.untransform(json, type, superJson);\n      case \"custom\":\n        return customRule.untransform(json, type, superJson);\n      case \"typed-array\":\n        return typedArrayRule.untransform(json, type, superJson);\n      default:\n        throw new Error(\"Unknown transformation: \" + type);\n    }\n  } else {\n    const transformation = simpleRulesByAnnotation[type];\n    if (!transformation) {\n      throw new Error(\"Unknown transformation: \" + type);\n    }\n    return transformation.untransform(json, superJson);\n  }\n};\nconst getNthKey = (value, n2) => {\n  if (n2 > value.size)\n    throw new Error(\"index out of bounds\");\n  const keys = value.keys();\n  while (n2 > 0) {\n    keys.next();\n    n2--;\n  }\n  return keys.next().value;\n};\nfunction validatePath(path) {\n  if (includes(path, \"__proto__\")) {\n    throw new Error(\"__proto__ is not allowed as a property\");\n  }\n  if (includes(path, \"prototype\")) {\n    throw new Error(\"prototype is not allowed as a property\");\n  }\n  if (includes(path, \"constructor\")) {\n    throw new Error(\"constructor is not allowed as a property\");\n  }\n}\nconst getDeep = (object, path) => {\n  validatePath(path);\n  for (let i2 = 0; i2 < path.length; i2++) {\n    const key = path[i2];\n    if (isSet(object)) {\n      object = getNthKey(object, +key);\n    } else if (isMap(object)) {\n      const row = +key;\n      const type = +path[++i2] === 0 ? \"key\" : \"value\";\n      const keyOfRow = getNthKey(object, row);\n      switch (type) {\n        case \"key\":\n          object = keyOfRow;\n          break;\n        case \"value\":\n          object = object.get(keyOfRow);\n          break;\n      }\n    } else {\n      object = object[key];\n    }\n  }\n  return object;\n};\nconst setDeep = (object, path, mapper) => {\n  validatePath(path);\n  if (path.length === 0) {\n    return mapper(object);\n  }\n  let parent = object;\n  for (let i2 = 0; i2 < path.length - 1; i2++) {\n    const key = path[i2];\n    if (isArray$1(parent)) {\n      const index2 = +key;\n      parent = parent[index2];\n    } else if (isPlainObject$1(parent)) {\n      parent = parent[key];\n    } else if (isSet(parent)) {\n      const row = +key;\n      parent = getNthKey(parent, row);\n    } else if (isMap(parent)) {\n      const isEnd = i2 === path.length - 2;\n      if (isEnd) {\n        break;\n      }\n      const row = +key;\n      const type = +path[++i2] === 0 ? \"key\" : \"value\";\n      const keyOfRow = getNthKey(parent, row);\n      switch (type) {\n        case \"key\":\n          parent = keyOfRow;\n          break;\n        case \"value\":\n          parent = parent.get(keyOfRow);\n          break;\n      }\n    }\n  }\n  const lastKey = path[path.length - 1];\n  if (isArray$1(parent)) {\n    parent[+lastKey] = mapper(parent[+lastKey]);\n  } else if (isPlainObject$1(parent)) {\n    parent[lastKey] = mapper(parent[lastKey]);\n  }\n  if (isSet(parent)) {\n    const oldValue = getNthKey(parent, +lastKey);\n    const newValue = mapper(oldValue);\n    if (oldValue !== newValue) {\n      parent.delete(oldValue);\n      parent.add(newValue);\n    }\n  }\n  if (isMap(parent)) {\n    const row = +path[path.length - 2];\n    const keyToRow = getNthKey(parent, row);\n    const type = +lastKey === 0 ? \"key\" : \"value\";\n    switch (type) {\n      case \"key\": {\n        const newKey = mapper(keyToRow);\n        parent.set(newKey, parent.get(keyToRow));\n        if (newKey !== keyToRow) {\n          parent.delete(keyToRow);\n        }\n        break;\n      }\n      case \"value\": {\n        parent.set(keyToRow, mapper(parent.get(keyToRow)));\n        break;\n      }\n    }\n  }\n  return object;\n};\nfunction traverse(tree, walker2, origin = []) {\n  if (!tree) {\n    return;\n  }\n  if (!isArray$1(tree)) {\n    forEach(tree, (subtree, key) => traverse(subtree, walker2, [...origin, ...parsePath(key)]));\n    return;\n  }\n  const [nodeValue, children] = tree;\n  if (children) {\n    forEach(children, (child, key) => {\n      traverse(child, walker2, [...origin, ...parsePath(key)]);\n    });\n  }\n  walker2(nodeValue, origin);\n}\nfunction applyValueAnnotations(plain, annotations, superJson) {\n  traverse(annotations, (type, path) => {\n    plain = setDeep(plain, path, (v2) => untransformValue(v2, type, superJson));\n  });\n  return plain;\n}\nfunction applyReferentialEqualityAnnotations(plain, annotations) {\n  function apply(identicalPaths, path) {\n    const object = getDeep(plain, parsePath(path));\n    identicalPaths.map(parsePath).forEach((identicalObjectPath) => {\n      plain = setDeep(plain, identicalObjectPath, () => object);\n    });\n  }\n  if (isArray$1(annotations)) {\n    const [root, other] = annotations;\n    root.forEach((identicalPath) => {\n      plain = setDeep(plain, parsePath(identicalPath), () => plain);\n    });\n    if (other) {\n      forEach(other, apply);\n    }\n  } else {\n    forEach(annotations, apply);\n  }\n  return plain;\n}\nconst isDeep = (object, superJson) => isPlainObject$1(object) || isArray$1(object) || isMap(object) || isSet(object) || isInstanceOfRegisteredClass(object, superJson);\nfunction addIdentity(object, path, identities) {\n  const existingSet = identities.get(object);\n  if (existingSet) {\n    existingSet.push(path);\n  } else {\n    identities.set(object, [path]);\n  }\n}\nfunction generateReferentialEqualityAnnotations(identitites, dedupe) {\n  const result = {};\n  let rootEqualityPaths = void 0;\n  identitites.forEach((paths) => {\n    if (paths.length <= 1) {\n      return;\n    }\n    if (!dedupe) {\n      paths = paths.map((path) => path.map(String)).sort((a3, b2) => a3.length - b2.length);\n    }\n    const [representativePath, ...identicalPaths] = paths;\n    if (representativePath.length === 0) {\n      rootEqualityPaths = identicalPaths.map(stringifyPath);\n    } else {\n      result[stringifyPath(representativePath)] = identicalPaths.map(stringifyPath);\n    }\n  });\n  if (rootEqualityPaths) {\n    if (isEmptyObject(result)) {\n      return [rootEqualityPaths];\n    } else {\n      return [rootEqualityPaths, result];\n    }\n  } else {\n    return isEmptyObject(result) ? void 0 : result;\n  }\n}\nconst walker = (object, identities, superJson, dedupe, path = [], objectsInThisPath = [], seenObjects = /* @__PURE__ */ new Map()) => {\n  const primitive = isPrimitive(object);\n  if (!primitive) {\n    addIdentity(object, path, identities);\n    const seen = seenObjects.get(object);\n    if (seen) {\n      return dedupe ? {\n        transformedValue: null\n      } : seen;\n    }\n  }\n  if (!isDeep(object, superJson)) {\n    const transformed2 = transformValue(object, superJson);\n    const result2 = transformed2 ? {\n      transformedValue: transformed2.value,\n      annotations: [transformed2.type]\n    } : {\n      transformedValue: object\n    };\n    if (!primitive) {\n      seenObjects.set(object, result2);\n    }\n    return result2;\n  }\n  if (includes(objectsInThisPath, object)) {\n    return {\n      transformedValue: null\n    };\n  }\n  const transformationResult = transformValue(object, superJson);\n  const transformed = (transformationResult == null ? void 0 : transformationResult.value) ?? object;\n  const transformedValue = isArray$1(transformed) ? [] : {};\n  const innerAnnotations = {};\n  forEach(transformed, (value, index2) => {\n    if (index2 === \"__proto__\" || index2 === \"constructor\" || index2 === \"prototype\") {\n      throw new Error(`Detected property ${index2}. This is a prototype pollution risk, please remove it from your object.`);\n    }\n    const recursiveResult = walker(value, identities, superJson, dedupe, [...path, index2], [...objectsInThisPath, object], seenObjects);\n    transformedValue[index2] = recursiveResult.transformedValue;\n    if (isArray$1(recursiveResult.annotations)) {\n      innerAnnotations[index2] = recursiveResult.annotations;\n    } else if (isPlainObject$1(recursiveResult.annotations)) {\n      forEach(recursiveResult.annotations, (tree, key) => {\n        innerAnnotations[escapeKey(index2) + \".\" + key] = tree;\n      });\n    }\n  });\n  const result = isEmptyObject(innerAnnotations) ? {\n    transformedValue,\n    annotations: !!transformationResult ? [transformationResult.type] : void 0\n  } : {\n    transformedValue,\n    annotations: !!transformationResult ? [transformationResult.type, innerAnnotations] : innerAnnotations\n  };\n  if (!primitive) {\n    seenObjects.set(object, result);\n  }\n  return result;\n};\nfunction getType(payload) {\n  return Object.prototype.toString.call(payload).slice(8, -1);\n}\nfunction isArray(payload) {\n  return getType(payload) === \"Array\";\n}\nfunction isPlainObject(payload) {\n  if (getType(payload) !== \"Object\")\n    return false;\n  const prototype = Object.getPrototypeOf(payload);\n  return !!prototype && prototype.constructor === Object && prototype === Object.prototype;\n}\nfunction assignProp(carry, key, newVal, originalObject, includeNonenumerable) {\n  const propType = {}.propertyIsEnumerable.call(originalObject, key) ? \"enumerable\" : \"nonenumerable\";\n  if (propType === \"enumerable\")\n    carry[key] = newVal;\n  if (includeNonenumerable && propType === \"nonenumerable\") {\n    Object.defineProperty(carry, key, {\n      value: newVal,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    });\n  }\n}\nfunction copy(target, options = {}) {\n  if (isArray(target)) {\n    return target.map((item) => copy(item, options));\n  }\n  if (!isPlainObject(target)) {\n    return target;\n  }\n  const props = Object.getOwnPropertyNames(target);\n  const symbols = Object.getOwnPropertySymbols(target);\n  return [...props, ...symbols].reduce((carry, key) => {\n    if (isArray(options.props) && !options.props.includes(key)) {\n      return carry;\n    }\n    const val = target[key];\n    const newVal = copy(val, options);\n    assignProp(carry, key, newVal, target, options.nonenumerable);\n    return carry;\n  }, {});\n}\nclass SuperJSON {\n  /**\n   * @param dedupeReferentialEqualities  If true, SuperJSON will make sure only one instance of referentially equal objects are serialized and the rest are replaced with `null`.\n   */\n  constructor({ dedupe = false } = {}) {\n    this.classRegistry = new ClassRegistry();\n    this.symbolRegistry = new Registry((s2) => s2.description ?? \"\");\n    this.customTransformerRegistry = new CustomTransformerRegistry();\n    this.allowedErrorProps = [];\n    this.dedupe = dedupe;\n  }\n  serialize(object) {\n    const identities = /* @__PURE__ */ new Map();\n    const output = walker(object, identities, this, this.dedupe);\n    const res = {\n      json: output.transformedValue\n    };\n    if (output.annotations) {\n      res.meta = {\n        ...res.meta,\n        values: output.annotations\n      };\n    }\n    const equalityAnnotations = generateReferentialEqualityAnnotations(identities, this.dedupe);\n    if (equalityAnnotations) {\n      res.meta = {\n        ...res.meta,\n        referentialEqualities: equalityAnnotations\n      };\n    }\n    return res;\n  }\n  deserialize(payload) {\n    const { json, meta } = payload;\n    let result = copy(json);\n    if (meta == null ? void 0 : meta.values) {\n      result = applyValueAnnotations(result, meta.values, this);\n    }\n    if (meta == null ? void 0 : meta.referentialEqualities) {\n      result = applyReferentialEqualityAnnotations(result, meta.referentialEqualities);\n    }\n    return result;\n  }\n  stringify(object) {\n    return JSON.stringify(this.serialize(object));\n  }\n  parse(string) {\n    return this.deserialize(JSON.parse(string));\n  }\n  registerClass(v2, options) {\n    this.classRegistry.register(v2, options);\n  }\n  registerSymbol(v2, identifier) {\n    this.symbolRegistry.register(v2, identifier);\n  }\n  registerCustom(transformer, name) {\n    this.customTransformerRegistry.register({\n      name,\n      ...transformer\n    });\n  }\n  allowErrorProps(...props) {\n    this.allowedErrorProps.push(...props);\n  }\n}\nSuperJSON.defaultInstance = new SuperJSON();\nSuperJSON.serialize = SuperJSON.defaultInstance.serialize.bind(SuperJSON.defaultInstance);\nSuperJSON.deserialize = SuperJSON.defaultInstance.deserialize.bind(SuperJSON.defaultInstance);\nSuperJSON.stringify = SuperJSON.defaultInstance.stringify.bind(SuperJSON.defaultInstance);\nSuperJSON.parse = SuperJSON.defaultInstance.parse.bind(SuperJSON.defaultInstance);\nSuperJSON.registerClass = SuperJSON.defaultInstance.registerClass.bind(SuperJSON.defaultInstance);\nSuperJSON.registerSymbol = SuperJSON.defaultInstance.registerSymbol.bind(SuperJSON.defaultInstance);\nSuperJSON.registerCustom = SuperJSON.defaultInstance.registerCustom.bind(SuperJSON.defaultInstance);\nSuperJSON.allowErrorProps = SuperJSON.defaultInstance.allowErrorProps.bind(SuperJSON.defaultInstance);\nSuperJSON.serialize;\nSuperJSON.deserialize;\nSuperJSON.stringify;\nSuperJSON.parse;\nSuperJSON.registerClass;\nSuperJSON.registerCustom;\nSuperJSON.registerSymbol;\nSuperJSON.allowErrorProps;\nfunction createJSONStorage(getStorage, options) {\n  let storage;\n  try {\n    storage = getStorage();\n  } catch (e2) {\n    return;\n  }\n  const persistStorage = {\n    getItem: (name) => {\n      var _a;\n      const parse = (str2) => {\n        if (str2 === null) {\n          return null;\n        }\n        return JSON.parse(str2, void 0);\n      };\n      const str = (_a = storage.getItem(name)) != null ? _a : null;\n      if (str instanceof Promise) {\n        return str.then(parse);\n      }\n      return parse(str);\n    },\n    setItem: (name, newValue) => storage.setItem(\n      name,\n      JSON.stringify(newValue, void 0)\n    ),\n    removeItem: (name) => storage.removeItem(name)\n  };\n  return persistStorage;\n}\nconst toThenable = (fn2) => (input) => {\n  try {\n    const result = fn2(input);\n    if (result instanceof Promise) {\n      return result;\n    }\n    return {\n      then(onFulfilled) {\n        return toThenable(onFulfilled)(result);\n      },\n      catch(_onRejected) {\n        return this;\n      }\n    };\n  } catch (e2) {\n    return {\n      then(_onFulfilled) {\n        return this;\n      },\n      catch(onRejected) {\n        return toThenable(onRejected)(e2);\n      }\n    };\n  }\n};\nconst persistImpl = (config, baseOptions) => (set, get, api) => {\n  let options = {\n    storage: createJSONStorage(() => localStorage),\n    partialize: (state) => state,\n    version: 0,\n    merge: (persistedState, currentState) => ({\n      ...currentState,\n      ...persistedState\n    }),\n    ...baseOptions\n  };\n  let hasHydrated = false;\n  const hydrationListeners = /* @__PURE__ */ new Set();\n  const finishHydrationListeners = /* @__PURE__ */ new Set();\n  let storage = options.storage;\n  if (!storage) {\n    return config(\n      (...args) => {\n        console.warn(\n          `[zustand persist middleware] Unable to update item '${options.name}', the given storage is currently unavailable.`\n        );\n        set(...args);\n      },\n      get,\n      api\n    );\n  }\n  const setItem = () => {\n    const state = options.partialize({ ...get() });\n    return storage.setItem(options.name, {\n      state,\n      version: options.version\n    });\n  };\n  const savedSetState = api.setState;\n  api.setState = (state, replace) => {\n    savedSetState(state, replace);\n    void setItem();\n  };\n  const configResult = config(\n    (...args) => {\n      set(...args);\n      void setItem();\n    },\n    get,\n    api\n  );\n  api.getInitialState = () => configResult;\n  let stateFromStorage;\n  const hydrate = () => {\n    var _a, _b;\n    if (!storage) return;\n    hasHydrated = false;\n    hydrationListeners.forEach((cb) => {\n      var _a2;\n      return cb((_a2 = get()) != null ? _a2 : configResult);\n    });\n    const postRehydrationCallback = ((_b = options.onRehydrateStorage) == null ? void 0 : _b.call(options, (_a = get()) != null ? _a : configResult)) || void 0;\n    return toThenable(storage.getItem.bind(storage))(options.name).then((deserializedStorageValue) => {\n      if (deserializedStorageValue) {\n        if (typeof deserializedStorageValue.version === \"number\" && deserializedStorageValue.version !== options.version) {\n          if (options.migrate) {\n            const migration = options.migrate(\n              deserializedStorageValue.state,\n              deserializedStorageValue.version\n            );\n            if (migration instanceof Promise) {\n              return migration.then((result) => [true, result]);\n            }\n            return [true, migration];\n          }\n          console.error(\n            `State loaded from storage couldn't be migrated since no migrate function was provided`\n          );\n        } else {\n          return [false, deserializedStorageValue.state];\n        }\n      }\n      return [false, void 0];\n    }).then((migrationResult) => {\n      var _a2;\n      const [migrated, migratedState] = migrationResult;\n      stateFromStorage = options.merge(\n        migratedState,\n        (_a2 = get()) != null ? _a2 : configResult\n      );\n      set(stateFromStorage, true);\n      if (migrated) {\n        return setItem();\n      }\n    }).then(() => {\n      postRehydrationCallback == null ? void 0 : postRehydrationCallback(stateFromStorage, void 0);\n      stateFromStorage = get();\n      hasHydrated = true;\n      finishHydrationListeners.forEach((cb) => cb(stateFromStorage));\n    }).catch((e2) => {\n      postRehydrationCallback == null ? void 0 : postRehydrationCallback(void 0, e2);\n    });\n  };\n  api.persist = {\n    setOptions: (newOptions) => {\n      options = {\n        ...options,\n        ...newOptions\n      };\n      if (newOptions.storage) {\n        storage = newOptions.storage;\n      }\n    },\n    clearStorage: () => {\n      storage == null ? void 0 : storage.removeItem(options.name);\n    },\n    getOptions: () => options,\n    rehydrate: () => hydrate(),\n    hasHydrated: () => hasHydrated,\n    onHydrate: (cb) => {\n      hydrationListeners.add(cb);\n      return () => {\n        hydrationListeners.delete(cb);\n      };\n    },\n    onFinishHydration: (cb) => {\n      finishHydrationListeners.add(cb);\n      return () => {\n        finishHydrationListeners.delete(cb);\n      };\n    }\n  };\n  if (!options.skipHydration) {\n    hydrate();\n  }\n  return stateFromStorage || configResult;\n};\nconst persist = persistImpl;\nconst createAppStore = (s2) => {\n  const set = s2;\n  return {\n    appBlockRequestList: [],\n    appUnblockRequestList: [],\n    lastBlockRequestNumber: 0,\n    lastUnblockRequestNumber: 0,\n    isMainAppBlocked: false,\n    requestMainAppBlock: () => {\n      let newHandleValue = 0;\n      set((state) => {\n        newHandleValue = state.lastBlockRequestNumber + 1;\n        return {\n          appBlockRequestList: [...state.appBlockRequestList, newHandleValue],\n          lastBlockRequestNumber: newHandleValue,\n          isMainAppBlocked: state.appUnblockRequestList.length === 0\n          // Unblock requests override block requests\n        };\n      });\n      return newHandleValue;\n    },\n    requestMainAppUnblock: () => {\n      let newHandleValue = 0;\n      set((state) => {\n        newHandleValue = state.lastUnblockRequestNumber + 1;\n        return {\n          appUnblockRequestList: [\n            ...state.appUnblockRequestList,\n            newHandleValue\n          ],\n          lastUnblockRequestNumber: newHandleValue,\n          isMainAppBlocked: false\n        };\n      });\n      return newHandleValue;\n    },\n    discardMainAppBlock: (handle) => {\n      set((state) => {\n        const newBlockRequestList = state.appBlockRequestList.filter(\n          (h2) => h2 !== handle\n        );\n        return {\n          appBlockRequestList: newBlockRequestList,\n          isMainAppBlocked: newBlockRequestList.length > 0 && state.appUnblockRequestList.length === 0\n        };\n      });\n    },\n    discardMainAppUnblock: (handle) => {\n      set((state) => {\n        const newUnblockRequestList = state.appUnblockRequestList.filter(\n          (h2) => h2 !== handle\n        );\n        return {\n          appUnblockRequestList: newUnblockRequestList,\n          isMainAppBlocked: state.appBlockRequestList.length > 0 && newUnblockRequestList.length === 0\n        };\n      });\n    },\n    toolbarPosition: DropAreaZone.BOTTOM_CENTER,\n    setToolbarPosition: (position) => set(() => ({ toolbarPosition: position })),\n    toolbarBoxRef: b$5(),\n    setToolbarBoxRef: (ref) => set(() => ({ toolbarBoxRef: ref })),\n    unsetToolbarBoxRef: () => set(() => ({ toolbarBoxRef: b$5() })),\n    minimized: false,\n    minimize: () => set(() => ({ minimized: true })),\n    expand: () => set(() => ({ minimized: false })),\n    promotedOnStartup: false,\n    promotionFinished: () => set(() => ({ promotedOnStartup: true }))\n  };\n};\nfunction createSuperJSONStorage(storage) {\n  return {\n    getItem: (name) => {\n      const str = storage.getItem(name);\n      if (!str) return null;\n      return SuperJSON.parse(str);\n    },\n    setItem: (name, value) => {\n      storage.setItem(name, SuperJSON.stringify(value));\n    },\n    removeItem: (name) => storage.removeItem(name)\n  };\n}\nconst useAppState = create(\n  persist(createAppStore, {\n    name: \"stgws:companion\",\n    storage: createSuperJSONStorage(sessionStorage),\n    partialize: (state) => {\n      return {\n        toolbarPosition: state.toolbarPosition\n      };\n    }\n  })\n);\nconst ChatContext = K$3({\n  chats: [],\n  currentChatId: null,\n  createChat: () => \"\",\n  deleteChat: () => {\n  },\n  setCurrentChat: () => {\n  },\n  setChatInput: () => {\n  },\n  addChatDomContext: () => {\n  },\n  removeChatDomContext: () => {\n  },\n  addMessage: () => {\n  },\n  chatAreaState: \"hidden\",\n  setChatAreaState: () => {\n  },\n  isPromptCreationActive: false,\n  startPromptCreation: () => {\n  },\n  stopPromptCreation: () => {\n  }\n});\nconst ChatStateProvider = ({ children }) => {\n  const [chats, setChats] = d$4([\n    {\n      id: \"new_chat\",\n      messages: [],\n      title: \"New chat\",\n      inputValue: \"\",\n      domContextElements: []\n    }\n  ]);\n  const [currentChatId, setCurrentChatId] = d$4(\"new_chat\");\n  const [chatAreaState, internalSetChatAreaState] = d$4(\"hidden\");\n  const [isPromptCreationMode, setIsPromptCreationMode] = d$4(false);\n  const isMinimized = useAppState((state) => state.minimized);\n  y$6(() => {\n    if (isMinimized) {\n      setIsPromptCreationMode(false);\n      internalSetChatAreaState(\"hidden\");\n    }\n  }, [isMinimized]);\n  const { bridge } = useSRPCBridge();\n  const createChat = q$3(() => {\n    const newChatId = crypto.randomUUID();\n    const newChat = {\n      id: newChatId,\n      title: null,\n      messages: [],\n      inputValue: \"\",\n      domContextElements: []\n    };\n    setChats((prev) => [...prev, newChat]);\n    setCurrentChatId(newChatId);\n    return newChatId;\n  }, []);\n  const deleteChat = q$3(\n    (chatId) => {\n      setChats((prev) => {\n        const filteredChats = prev.filter((chat) => chat.id !== chatId);\n        if (filteredChats.length === 0) {\n          return [\n            {\n              id: \"new_chat\",\n              messages: [],\n              title: \"New chat\",\n              inputValue: \"\",\n              domContextElements: []\n            }\n          ];\n        }\n        return filteredChats;\n      });\n      if (currentChatId === chatId) {\n        setChats((prev) => {\n          setCurrentChatId(prev[0].id);\n          return prev;\n        });\n      }\n    },\n    [currentChatId]\n  );\n  const setCurrentChat = q$3((chatId) => {\n    setCurrentChatId(chatId);\n  }, []);\n  const setChatInput = q$3((chatId, value2) => {\n    setChats(\n      (prev) => prev.map(\n        (chat) => chat.id === chatId ? { ...chat, inputValue: value2 } : chat\n      )\n    );\n  }, []);\n  const startPromptCreation = q$3(() => {\n    setIsPromptCreationMode(true);\n    if (chatAreaState === \"hidden\") {\n      internalSetChatAreaState(\"compact\");\n    }\n  }, [chatAreaState]);\n  const stopPromptCreation = q$3(() => {\n    setIsPromptCreationMode(false);\n    setChats(\n      (prev) => prev.map(\n        (chat) => chat.id === currentChatId ? { ...chat, domContextElements: [] } : chat\n      )\n    );\n    if (chatAreaState === \"compact\") {\n      internalSetChatAreaState(\"hidden\");\n    }\n  }, [currentChatId, chatAreaState]);\n  const setChatAreaState = q$3(\n    (state) => {\n      internalSetChatAreaState(state);\n      if (state === \"hidden\") {\n        stopPromptCreation();\n      }\n    },\n    [internalSetChatAreaState, stopPromptCreation]\n  );\n  const addChatDomContext = q$3(\n    (chatId, element) => {\n      setChats(\n        (prev) => prev.map(\n          (chat) => chat.id === chatId ? {\n            ...chat,\n            domContextElements: [...chat.domContextElements, element]\n          } : chat\n        )\n      );\n    },\n    []\n  );\n  const removeChatDomContext = q$3(\n    (chatId, element) => {\n      setChats(\n        (prev) => prev.map(\n          (chat) => chat.id === chatId ? {\n            ...chat,\n            domContextElements: chat.domContextElements.filter(\n              (e2) => e2 !== element\n            )\n          } : chat\n        )\n      );\n    },\n    []\n  );\n  const addMessage = q$3(\n    (chatId, content) => {\n      if (!content.trim()) return;\n      const chat = chats.find((chat2) => chat2.id === chatId);\n      const prompt = createPrompt(\n        chat == null ? void 0 : chat.domContextElements,\n        content,\n        window.location.href\n      );\n      const newMessage = {\n        id: crypto.randomUUID(),\n        content: content.trim(),\n        sender: \"user\",\n        type: \"regular\",\n        timestamp: /* @__PURE__ */ new Date()\n      };\n      async function triggerAgentPrompt() {\n        if (bridge) {\n          await bridge.call.triggerAgentPrompt(\n            { prompt },\n            {\n              onUpdate: (update) => {\n              }\n            }\n          );\n        }\n      }\n      triggerAgentPrompt();\n      setIsPromptCreationMode(false);\n      if (chatAreaState === \"hidden\") {\n        internalSetChatAreaState(\"compact\");\n      }\n      setChats(\n        (prev) => prev.map(\n          (chat2) => chat2.id === chatId ? {\n            ...chat2,\n            messages: [...chat2.messages, newMessage],\n            inputValue: \"\",\n            domContextElements: []\n          } : chat2\n        )\n      );\n    },\n    [\n      chatAreaState,\n      bridge,\n      chats,\n      setIsPromptCreationMode,\n      internalSetChatAreaState\n    ]\n  );\n  const value = {\n    chats,\n    currentChatId,\n    createChat,\n    deleteChat,\n    setCurrentChat,\n    setChatInput,\n    addMessage,\n    chatAreaState,\n    setChatAreaState,\n    isPromptCreationActive: isPromptCreationMode,\n    startPromptCreation,\n    stopPromptCreation,\n    addChatDomContext,\n    removeChatDomContext\n  };\n  return /* @__PURE__ */ u$9(ChatContext.Provider, { value, children });\n};\nfunction useChatState() {\n  const context = x$4(ChatContext);\n  if (!context) {\n    throw new Error(\"useChatState must be used within a ChatStateProvider\");\n  }\n  return context;\n}\nfunction useCyclicUpdate(func, frameRate) {\n  const animationFrameHandle = A$3(void 0);\n  const timeBetweenFrames = T$5(\n    () => frameRate && frameRate > 0 ? 1e3 / frameRate : 0,\n    [frameRate]\n  );\n  const lastCallFrameTime = A$3(0);\n  const update = q$3(\n    (frameTime) => {\n      if (frameTime - lastCallFrameTime.current >= timeBetweenFrames) {\n        func();\n        lastCallFrameTime.current = frameTime;\n      }\n      animationFrameHandle.current = requestAnimationFrame(update);\n    },\n    [func, timeBetweenFrames]\n  );\n  y$6(() => {\n    if (!frameRate || frameRate > 0) {\n      animationFrameHandle.current = requestAnimationFrame(update);\n    }\n    return () => {\n      if (animationFrameHandle.current) {\n        cancelAnimationFrame(animationFrameHandle.current);\n        animationFrameHandle.current = void 0;\n      }\n    };\n  }, [frameRate, update]);\n}\nconst LocationContext = K$3(new URL(window.location.href));\nfunction LocationProvider({\n  children\n}) {\n  const [currentUrl, setCurrentUrl] = d$4(\n    new URL(window.location.href)\n  );\n  const update = q$3(() => {\n    setCurrentUrl(new URL(window.location.href));\n  }, []);\n  useCyclicUpdate(update, 15);\n  return /* @__PURE__ */ u$9(LocationContext.Provider, { value: currentUrl, children });\n}\nfunction ContextProviders({\n  children,\n  config\n}) {\n  return /* @__PURE__ */ u$9(LocationProvider, { children: /* @__PURE__ */ u$9(SRPCBridgeProvider, { children: /* @__PURE__ */ u$9(PluginProvider, { plugins: (config == null ? void 0 : config.plugins) || [], children: /* @__PURE__ */ u$9(ChatStateProvider, { children }) }) }) });\n}\nfunction useEventListener(eventName, handler, options, element = window) {\n  y$6(() => {\n    if (typeof window === \"undefined\") return;\n    if (!element) return;\n    element.addEventListener(eventName, handler, options);\n    return () => element.removeEventListener(eventName, handler);\n  }, [eventName, handler, element, options]);\n}\nfunction r$3(e2) {\n  var t2, f2, n2 = \"\";\n  if (\"string\" == typeof e2 || \"number\" == typeof e2) n2 += e2;\n  else if (\"object\" == typeof e2) if (Array.isArray(e2)) {\n    var o3 = e2.length;\n    for (t2 = 0; t2 < o3; t2++) e2[t2] && (f2 = r$3(e2[t2])) && (n2 && (n2 += \" \"), n2 += f2);\n  } else for (f2 in e2) e2[f2] && (n2 && (n2 += \" \"), n2 += f2);\n  return n2;\n}\nfunction clsx() {\n  for (var e2, t2, f2 = 0, n2 = \"\", o3 = arguments.length; f2 < o3; f2++) (e2 = arguments[f2]) && (t2 = r$3(e2)) && (n2 && (n2 += \" \"), n2 += t2);\n  return n2;\n}\nconst CLASS_PART_SEPARATOR = \"-\";\nconst createClassGroupUtils = (config) => {\n  const classMap = createClassMap(config);\n  const {\n    conflictingClassGroups,\n    conflictingClassGroupModifiers\n  } = config;\n  const getClassGroupId = (className) => {\n    const classParts = className.split(CLASS_PART_SEPARATOR);\n    if (classParts[0] === \"\" && classParts.length !== 1) {\n      classParts.shift();\n    }\n    return getGroupRecursive(classParts, classMap) || getGroupIdForArbitraryProperty(className);\n  };\n  const getConflictingClassGroupIds = (classGroupId, hasPostfixModifier) => {\n    const conflicts = conflictingClassGroups[classGroupId] || [];\n    if (hasPostfixModifier && conflictingClassGroupModifiers[classGroupId]) {\n      return [...conflicts, ...conflictingClassGroupModifiers[classGroupId]];\n    }\n    return conflicts;\n  };\n  return {\n    getClassGroupId,\n    getConflictingClassGroupIds\n  };\n};\nconst getGroupRecursive = (classParts, classPartObject) => {\n  var _a;\n  if (classParts.length === 0) {\n    return classPartObject.classGroupId;\n  }\n  const currentClassPart = classParts[0];\n  const nextClassPartObject = classPartObject.nextPart.get(currentClassPart);\n  const classGroupFromNextClassPart = nextClassPartObject ? getGroupRecursive(classParts.slice(1), nextClassPartObject) : void 0;\n  if (classGroupFromNextClassPart) {\n    return classGroupFromNextClassPart;\n  }\n  if (classPartObject.validators.length === 0) {\n    return void 0;\n  }\n  const classRest = classParts.join(CLASS_PART_SEPARATOR);\n  return (_a = classPartObject.validators.find(({\n    validator\n  }) => validator(classRest))) == null ? void 0 : _a.classGroupId;\n};\nconst arbitraryPropertyRegex = /^\\[(.+)\\]$/;\nconst getGroupIdForArbitraryProperty = (className) => {\n  if (arbitraryPropertyRegex.test(className)) {\n    const arbitraryPropertyClassName = arbitraryPropertyRegex.exec(className)[1];\n    const property = arbitraryPropertyClassName == null ? void 0 : arbitraryPropertyClassName.substring(0, arbitraryPropertyClassName.indexOf(\":\"));\n    if (property) {\n      return \"arbitrary..\" + property;\n    }\n  }\n};\nconst createClassMap = (config) => {\n  const {\n    theme,\n    classGroups\n  } = config;\n  const classMap = {\n    nextPart: /* @__PURE__ */ new Map(),\n    validators: []\n  };\n  for (const classGroupId in classGroups) {\n    processClassesRecursively(classGroups[classGroupId], classMap, classGroupId, theme);\n  }\n  return classMap;\n};\nconst processClassesRecursively = (classGroup, classPartObject, classGroupId, theme) => {\n  classGroup.forEach((classDefinition) => {\n    if (typeof classDefinition === \"string\") {\n      const classPartObjectToEdit = classDefinition === \"\" ? classPartObject : getPart(classPartObject, classDefinition);\n      classPartObjectToEdit.classGroupId = classGroupId;\n      return;\n    }\n    if (typeof classDefinition === \"function\") {\n      if (isThemeGetter(classDefinition)) {\n        processClassesRecursively(classDefinition(theme), classPartObject, classGroupId, theme);\n        return;\n      }\n      classPartObject.validators.push({\n        validator: classDefinition,\n        classGroupId\n      });\n      return;\n    }\n    Object.entries(classDefinition).forEach(([key, classGroup2]) => {\n      processClassesRecursively(classGroup2, getPart(classPartObject, key), classGroupId, theme);\n    });\n  });\n};\nconst getPart = (classPartObject, path) => {\n  let currentClassPartObject = classPartObject;\n  path.split(CLASS_PART_SEPARATOR).forEach((pathPart) => {\n    if (!currentClassPartObject.nextPart.has(pathPart)) {\n      currentClassPartObject.nextPart.set(pathPart, {\n        nextPart: /* @__PURE__ */ new Map(),\n        validators: []\n      });\n    }\n    currentClassPartObject = currentClassPartObject.nextPart.get(pathPart);\n  });\n  return currentClassPartObject;\n};\nconst isThemeGetter = (func) => func.isThemeGetter;\nconst createLruCache = (maxCacheSize) => {\n  if (maxCacheSize < 1) {\n    return {\n      get: () => void 0,\n      set: () => {\n      }\n    };\n  }\n  let cacheSize = 0;\n  let cache = /* @__PURE__ */ new Map();\n  let previousCache = /* @__PURE__ */ new Map();\n  const update = (key, value) => {\n    cache.set(key, value);\n    cacheSize++;\n    if (cacheSize > maxCacheSize) {\n      cacheSize = 0;\n      previousCache = cache;\n      cache = /* @__PURE__ */ new Map();\n    }\n  };\n  return {\n    get(key) {\n      let value = cache.get(key);\n      if (value !== void 0) {\n        return value;\n      }\n      if ((value = previousCache.get(key)) !== void 0) {\n        update(key, value);\n        return value;\n      }\n    },\n    set(key, value) {\n      if (cache.has(key)) {\n        cache.set(key, value);\n      } else {\n        update(key, value);\n      }\n    }\n  };\n};\nconst IMPORTANT_MODIFIER = \"!\";\nconst MODIFIER_SEPARATOR = \":\";\nconst MODIFIER_SEPARATOR_LENGTH = MODIFIER_SEPARATOR.length;\nconst createParseClassName = (config) => {\n  const {\n    prefix,\n    experimentalParseClassName\n  } = config;\n  let parseClassName = (className) => {\n    const modifiers = [];\n    let bracketDepth = 0;\n    let parenDepth = 0;\n    let modifierStart = 0;\n    let postfixModifierPosition;\n    for (let index2 = 0; index2 < className.length; index2++) {\n      let currentCharacter = className[index2];\n      if (bracketDepth === 0 && parenDepth === 0) {\n        if (currentCharacter === MODIFIER_SEPARATOR) {\n          modifiers.push(className.slice(modifierStart, index2));\n          modifierStart = index2 + MODIFIER_SEPARATOR_LENGTH;\n          continue;\n        }\n        if (currentCharacter === \"/\") {\n          postfixModifierPosition = index2;\n          continue;\n        }\n      }\n      if (currentCharacter === \"[\") {\n        bracketDepth++;\n      } else if (currentCharacter === \"]\") {\n        bracketDepth--;\n      } else if (currentCharacter === \"(\") {\n        parenDepth++;\n      } else if (currentCharacter === \")\") {\n        parenDepth--;\n      }\n    }\n    const baseClassNameWithImportantModifier = modifiers.length === 0 ? className : className.substring(modifierStart);\n    const baseClassName = stripImportantModifier(baseClassNameWithImportantModifier);\n    const hasImportantModifier = baseClassName !== baseClassNameWithImportantModifier;\n    const maybePostfixModifierPosition = postfixModifierPosition && postfixModifierPosition > modifierStart ? postfixModifierPosition - modifierStart : void 0;\n    return {\n      modifiers,\n      hasImportantModifier,\n      baseClassName,\n      maybePostfixModifierPosition\n    };\n  };\n  if (prefix) {\n    const fullPrefix = prefix + MODIFIER_SEPARATOR;\n    const parseClassNameOriginal = parseClassName;\n    parseClassName = (className) => className.startsWith(fullPrefix) ? parseClassNameOriginal(className.substring(fullPrefix.length)) : {\n      isExternal: true,\n      modifiers: [],\n      hasImportantModifier: false,\n      baseClassName: className,\n      maybePostfixModifierPosition: void 0\n    };\n  }\n  if (experimentalParseClassName) {\n    const parseClassNameOriginal = parseClassName;\n    parseClassName = (className) => experimentalParseClassName({\n      className,\n      parseClassName: parseClassNameOriginal\n    });\n  }\n  return parseClassName;\n};\nconst stripImportantModifier = (baseClassName) => {\n  if (baseClassName.endsWith(IMPORTANT_MODIFIER)) {\n    return baseClassName.substring(0, baseClassName.length - 1);\n  }\n  if (baseClassName.startsWith(IMPORTANT_MODIFIER)) {\n    return baseClassName.substring(1);\n  }\n  return baseClassName;\n};\nconst createSortModifiers = (config) => {\n  const orderSensitiveModifiers = Object.fromEntries(config.orderSensitiveModifiers.map((modifier) => [modifier, true]));\n  const sortModifiers = (modifiers) => {\n    if (modifiers.length <= 1) {\n      return modifiers;\n    }\n    const sortedModifiers = [];\n    let unsortedModifiers = [];\n    modifiers.forEach((modifier) => {\n      const isPositionSensitive = modifier[0] === \"[\" || orderSensitiveModifiers[modifier];\n      if (isPositionSensitive) {\n        sortedModifiers.push(...unsortedModifiers.sort(), modifier);\n        unsortedModifiers = [];\n      } else {\n        unsortedModifiers.push(modifier);\n      }\n    });\n    sortedModifiers.push(...unsortedModifiers.sort());\n    return sortedModifiers;\n  };\n  return sortModifiers;\n};\nconst createConfigUtils = (config) => ({\n  cache: createLruCache(config.cacheSize),\n  parseClassName: createParseClassName(config),\n  sortModifiers: createSortModifiers(config),\n  ...createClassGroupUtils(config)\n});\nconst SPLIT_CLASSES_REGEX = /\\s+/;\nconst mergeClassList = (classList, configUtils) => {\n  const {\n    parseClassName,\n    getClassGroupId,\n    getConflictingClassGroupIds,\n    sortModifiers\n  } = configUtils;\n  const classGroupsInConflict = [];\n  const classNames = classList.trim().split(SPLIT_CLASSES_REGEX);\n  let result = \"\";\n  for (let index2 = classNames.length - 1; index2 >= 0; index2 -= 1) {\n    const originalClassName = classNames[index2];\n    const {\n      isExternal,\n      modifiers,\n      hasImportantModifier,\n      baseClassName,\n      maybePostfixModifierPosition\n    } = parseClassName(originalClassName);\n    if (isExternal) {\n      result = originalClassName + (result.length > 0 ? \" \" + result : result);\n      continue;\n    }\n    let hasPostfixModifier = !!maybePostfixModifierPosition;\n    let classGroupId = getClassGroupId(hasPostfixModifier ? baseClassName.substring(0, maybePostfixModifierPosition) : baseClassName);\n    if (!classGroupId) {\n      if (!hasPostfixModifier) {\n        result = originalClassName + (result.length > 0 ? \" \" + result : result);\n        continue;\n      }\n      classGroupId = getClassGroupId(baseClassName);\n      if (!classGroupId) {\n        result = originalClassName + (result.length > 0 ? \" \" + result : result);\n        continue;\n      }\n      hasPostfixModifier = false;\n    }\n    const variantModifier = sortModifiers(modifiers).join(\":\");\n    const modifierId = hasImportantModifier ? variantModifier + IMPORTANT_MODIFIER : variantModifier;\n    const classId = modifierId + classGroupId;\n    if (classGroupsInConflict.includes(classId)) {\n      continue;\n    }\n    classGroupsInConflict.push(classId);\n    const conflictGroups = getConflictingClassGroupIds(classGroupId, hasPostfixModifier);\n    for (let i2 = 0; i2 < conflictGroups.length; ++i2) {\n      const group = conflictGroups[i2];\n      classGroupsInConflict.push(modifierId + group);\n    }\n    result = originalClassName + (result.length > 0 ? \" \" + result : result);\n  }\n  return result;\n};\nfunction twJoin() {\n  let index2 = 0;\n  let argument;\n  let resolvedValue;\n  let string = \"\";\n  while (index2 < arguments.length) {\n    if (argument = arguments[index2++]) {\n      if (resolvedValue = toValue(argument)) {\n        string && (string += \" \");\n        string += resolvedValue;\n      }\n    }\n  }\n  return string;\n}\nconst toValue = (mix) => {\n  if (typeof mix === \"string\") {\n    return mix;\n  }\n  let resolvedValue;\n  let string = \"\";\n  for (let k2 = 0; k2 < mix.length; k2++) {\n    if (mix[k2]) {\n      if (resolvedValue = toValue(mix[k2])) {\n        string && (string += \" \");\n        string += resolvedValue;\n      }\n    }\n  }\n  return string;\n};\nfunction createTailwindMerge(createConfigFirst, ...createConfigRest) {\n  let configUtils;\n  let cacheGet;\n  let cacheSet;\n  let functionToCall = initTailwindMerge;\n  function initTailwindMerge(classList) {\n    const config = createConfigRest.reduce((previousConfig, createConfigCurrent) => createConfigCurrent(previousConfig), createConfigFirst());\n    configUtils = createConfigUtils(config);\n    cacheGet = configUtils.cache.get;\n    cacheSet = configUtils.cache.set;\n    functionToCall = tailwindMerge;\n    return tailwindMerge(classList);\n  }\n  function tailwindMerge(classList) {\n    const cachedResult = cacheGet(classList);\n    if (cachedResult) {\n      return cachedResult;\n    }\n    const result = mergeClassList(classList, configUtils);\n    cacheSet(classList, result);\n    return result;\n  }\n  return function callTailwindMerge() {\n    return functionToCall(twJoin.apply(null, arguments));\n  };\n}\nconst fromTheme = (key) => {\n  const themeGetter = (theme) => theme[key] || [];\n  themeGetter.isThemeGetter = true;\n  return themeGetter;\n};\nconst arbitraryValueRegex = /^\\[(?:(\\w[\\w-]*):)?(.+)\\]$/i;\nconst arbitraryVariableRegex = /^\\((?:(\\w[\\w-]*):)?(.+)\\)$/i;\nconst fractionRegex = /^\\d+\\/\\d+$/;\nconst tshirtUnitRegex = /^(\\d+(\\.\\d+)?)?(xs|sm|md|lg|xl)$/;\nconst lengthUnitRegex = /\\d+(%|px|r?em|[sdl]?v([hwib]|min|max)|pt|pc|in|cm|mm|cap|ch|ex|r?lh|cq(w|h|i|b|min|max))|\\b(calc|min|max|clamp)\\(.+\\)|^0$/;\nconst colorFunctionRegex = /^(rgba?|hsla?|hwb|(ok)?(lab|lch))\\(.+\\)$/;\nconst shadowRegex = /^(inset_)?-?((\\d+)?\\.?(\\d+)[a-z]+|0)_-?((\\d+)?\\.?(\\d+)[a-z]+|0)/;\nconst imageRegex = /^(url|image|image-set|cross-fade|element|(repeating-)?(linear|radial|conic)-gradient)\\(.+\\)$/;\nconst isFraction = (value) => fractionRegex.test(value);\nconst isNumber = (value) => !!value && !Number.isNaN(Number(value));\nconst isInteger = (value) => !!value && Number.isInteger(Number(value));\nconst isPercent = (value) => value.endsWith(\"%\") && isNumber(value.slice(0, -1));\nconst isTshirtSize = (value) => tshirtUnitRegex.test(value);\nconst isAny = () => true;\nconst isLengthOnly = (value) => (\n  // `colorFunctionRegex` check is necessary because color functions can have percentages in them which which would be incorrectly classified as lengths.\n  // For example, `hsl(0 0% 0%)` would be classified as a length without this check.\n  // I could also use lookbehind assertion in `lengthUnitRegex` but that isn't supported widely enough.\n  lengthUnitRegex.test(value) && !colorFunctionRegex.test(value)\n);\nconst isNever = () => false;\nconst isShadow = (value) => shadowRegex.test(value);\nconst isImage = (value) => imageRegex.test(value);\nconst isAnyNonArbitrary = (value) => !isArbitraryValue(value) && !isArbitraryVariable(value);\nconst isArbitrarySize = (value) => getIsArbitraryValue(value, isLabelSize, isNever);\nconst isArbitraryValue = (value) => arbitraryValueRegex.test(value);\nconst isArbitraryLength = (value) => getIsArbitraryValue(value, isLabelLength, isLengthOnly);\nconst isArbitraryNumber = (value) => getIsArbitraryValue(value, isLabelNumber, isNumber);\nconst isArbitraryPosition = (value) => getIsArbitraryValue(value, isLabelPosition, isNever);\nconst isArbitraryImage = (value) => getIsArbitraryValue(value, isLabelImage, isImage);\nconst isArbitraryShadow = (value) => getIsArbitraryValue(value, isLabelShadow, isShadow);\nconst isArbitraryVariable = (value) => arbitraryVariableRegex.test(value);\nconst isArbitraryVariableLength = (value) => getIsArbitraryVariable(value, isLabelLength);\nconst isArbitraryVariableFamilyName = (value) => getIsArbitraryVariable(value, isLabelFamilyName);\nconst isArbitraryVariablePosition = (value) => getIsArbitraryVariable(value, isLabelPosition);\nconst isArbitraryVariableSize = (value) => getIsArbitraryVariable(value, isLabelSize);\nconst isArbitraryVariableImage = (value) => getIsArbitraryVariable(value, isLabelImage);\nconst isArbitraryVariableShadow = (value) => getIsArbitraryVariable(value, isLabelShadow, true);\nconst getIsArbitraryValue = (value, testLabel, testValue) => {\n  const result = arbitraryValueRegex.exec(value);\n  if (result) {\n    if (result[1]) {\n      return testLabel(result[1]);\n    }\n    return testValue(result[2]);\n  }\n  return false;\n};\nconst getIsArbitraryVariable = (value, testLabel, shouldMatchNoLabel = false) => {\n  const result = arbitraryVariableRegex.exec(value);\n  if (result) {\n    if (result[1]) {\n      return testLabel(result[1]);\n    }\n    return shouldMatchNoLabel;\n  }\n  return false;\n};\nconst isLabelPosition = (label) => label === \"position\" || label === \"percentage\";\nconst isLabelImage = (label) => label === \"image\" || label === \"url\";\nconst isLabelSize = (label) => label === \"length\" || label === \"size\" || label === \"bg-size\";\nconst isLabelLength = (label) => label === \"length\";\nconst isLabelNumber = (label) => label === \"number\";\nconst isLabelFamilyName = (label) => label === \"family-name\";\nconst isLabelShadow = (label) => label === \"shadow\";\nconst getDefaultConfig = () => {\n  const themeColor = fromTheme(\"color\");\n  const themeFont = fromTheme(\"font\");\n  const themeText = fromTheme(\"text\");\n  const themeFontWeight = fromTheme(\"font-weight\");\n  const themeTracking = fromTheme(\"tracking\");\n  const themeLeading = fromTheme(\"leading\");\n  const themeBreakpoint = fromTheme(\"breakpoint\");\n  const themeContainer = fromTheme(\"container\");\n  const themeSpacing = fromTheme(\"spacing\");\n  const themeRadius = fromTheme(\"radius\");\n  const themeShadow = fromTheme(\"shadow\");\n  const themeInsetShadow = fromTheme(\"inset-shadow\");\n  const themeTextShadow = fromTheme(\"text-shadow\");\n  const themeDropShadow = fromTheme(\"drop-shadow\");\n  const themeBlur = fromTheme(\"blur\");\n  const themePerspective = fromTheme(\"perspective\");\n  const themeAspect = fromTheme(\"aspect\");\n  const themeEase = fromTheme(\"ease\");\n  const themeAnimate = fromTheme(\"animate\");\n  const scaleBreak = () => [\"auto\", \"avoid\", \"all\", \"avoid-page\", \"page\", \"left\", \"right\", \"column\"];\n  const scalePosition = () => [\n    \"center\",\n    \"top\",\n    \"bottom\",\n    \"left\",\n    \"right\",\n    \"top-left\",\n    // Deprecated since Tailwind CSS v4.1.0, see https://github.com/tailwindlabs/tailwindcss/pull/17378\n    \"left-top\",\n    \"top-right\",\n    // Deprecated since Tailwind CSS v4.1.0, see https://github.com/tailwindlabs/tailwindcss/pull/17378\n    \"right-top\",\n    \"bottom-right\",\n    // Deprecated since Tailwind CSS v4.1.0, see https://github.com/tailwindlabs/tailwindcss/pull/17378\n    \"right-bottom\",\n    \"bottom-left\",\n    // Deprecated since Tailwind CSS v4.1.0, see https://github.com/tailwindlabs/tailwindcss/pull/17378\n    \"left-bottom\"\n  ];\n  const scalePositionWithArbitrary = () => [...scalePosition(), isArbitraryVariable, isArbitraryValue];\n  const scaleOverflow = () => [\"auto\", \"hidden\", \"clip\", \"visible\", \"scroll\"];\n  const scaleOverscroll = () => [\"auto\", \"contain\", \"none\"];\n  const scaleUnambiguousSpacing = () => [isArbitraryVariable, isArbitraryValue, themeSpacing];\n  const scaleInset = () => [isFraction, \"full\", \"auto\", ...scaleUnambiguousSpacing()];\n  const scaleGridTemplateColsRows = () => [isInteger, \"none\", \"subgrid\", isArbitraryVariable, isArbitraryValue];\n  const scaleGridColRowStartAndEnd = () => [\"auto\", {\n    span: [\"full\", isInteger, isArbitraryVariable, isArbitraryValue]\n  }, isInteger, isArbitraryVariable, isArbitraryValue];\n  const scaleGridColRowStartOrEnd = () => [isInteger, \"auto\", isArbitraryVariable, isArbitraryValue];\n  const scaleGridAutoColsRows = () => [\"auto\", \"min\", \"max\", \"fr\", isArbitraryVariable, isArbitraryValue];\n  const scaleAlignPrimaryAxis = () => [\"start\", \"end\", \"center\", \"between\", \"around\", \"evenly\", \"stretch\", \"baseline\", \"center-safe\", \"end-safe\"];\n  const scaleAlignSecondaryAxis = () => [\"start\", \"end\", \"center\", \"stretch\", \"center-safe\", \"end-safe\"];\n  const scaleMargin = () => [\"auto\", ...scaleUnambiguousSpacing()];\n  const scaleSizing = () => [isFraction, \"auto\", \"full\", \"dvw\", \"dvh\", \"lvw\", \"lvh\", \"svw\", \"svh\", \"min\", \"max\", \"fit\", ...scaleUnambiguousSpacing()];\n  const scaleColor = () => [themeColor, isArbitraryVariable, isArbitraryValue];\n  const scaleBgPosition = () => [...scalePosition(), isArbitraryVariablePosition, isArbitraryPosition, {\n    position: [isArbitraryVariable, isArbitraryValue]\n  }];\n  const scaleBgRepeat = () => [\"no-repeat\", {\n    repeat: [\"\", \"x\", \"y\", \"space\", \"round\"]\n  }];\n  const scaleBgSize = () => [\"auto\", \"cover\", \"contain\", isArbitraryVariableSize, isArbitrarySize, {\n    size: [isArbitraryVariable, isArbitraryValue]\n  }];\n  const scaleGradientStopPosition = () => [isPercent, isArbitraryVariableLength, isArbitraryLength];\n  const scaleRadius = () => [\n    // Deprecated since Tailwind CSS v4.0.0\n    \"\",\n    \"none\",\n    \"full\",\n    themeRadius,\n    isArbitraryVariable,\n    isArbitraryValue\n  ];\n  const scaleBorderWidth = () => [\"\", isNumber, isArbitraryVariableLength, isArbitraryLength];\n  const scaleLineStyle = () => [\"solid\", \"dashed\", \"dotted\", \"double\"];\n  const scaleBlendMode = () => [\"normal\", \"multiply\", \"screen\", \"overlay\", \"darken\", \"lighten\", \"color-dodge\", \"color-burn\", \"hard-light\", \"soft-light\", \"difference\", \"exclusion\", \"hue\", \"saturation\", \"color\", \"luminosity\"];\n  const scaleMaskImagePosition = () => [isNumber, isPercent, isArbitraryVariablePosition, isArbitraryPosition];\n  const scaleBlur = () => [\n    // Deprecated since Tailwind CSS v4.0.0\n    \"\",\n    \"none\",\n    themeBlur,\n    isArbitraryVariable,\n    isArbitraryValue\n  ];\n  const scaleRotate = () => [\"none\", isNumber, isArbitraryVariable, isArbitraryValue];\n  const scaleScale = () => [\"none\", isNumber, isArbitraryVariable, isArbitraryValue];\n  const scaleSkew = () => [isNumber, isArbitraryVariable, isArbitraryValue];\n  const scaleTranslate = () => [isFraction, \"full\", ...scaleUnambiguousSpacing()];\n  return {\n    cacheSize: 500,\n    theme: {\n      animate: [\"spin\", \"ping\", \"pulse\", \"bounce\"],\n      aspect: [\"video\"],\n      blur: [isTshirtSize],\n      breakpoint: [isTshirtSize],\n      color: [isAny],\n      container: [isTshirtSize],\n      \"drop-shadow\": [isTshirtSize],\n      ease: [\"in\", \"out\", \"in-out\"],\n      font: [isAnyNonArbitrary],\n      \"font-weight\": [\"thin\", \"extralight\", \"light\", \"normal\", \"medium\", \"semibold\", \"bold\", \"extrabold\", \"black\"],\n      \"inset-shadow\": [isTshirtSize],\n      leading: [\"none\", \"tight\", \"snug\", \"normal\", \"relaxed\", \"loose\"],\n      perspective: [\"dramatic\", \"near\", \"normal\", \"midrange\", \"distant\", \"none\"],\n      radius: [isTshirtSize],\n      shadow: [isTshirtSize],\n      spacing: [\"px\", isNumber],\n      text: [isTshirtSize],\n      \"text-shadow\": [isTshirtSize],\n      tracking: [\"tighter\", \"tight\", \"normal\", \"wide\", \"wider\", \"widest\"]\n    },\n    classGroups: {\n      // --------------\n      // --- Layout ---\n      // --------------\n      /**\n       * Aspect Ratio\n       * @see https://tailwindcss.com/docs/aspect-ratio\n       */\n      aspect: [{\n        aspect: [\"auto\", \"square\", isFraction, isArbitraryValue, isArbitraryVariable, themeAspect]\n      }],\n      /**\n       * Container\n       * @see https://tailwindcss.com/docs/container\n       * @deprecated since Tailwind CSS v4.0.0\n       */\n      container: [\"container\"],\n      /**\n       * Columns\n       * @see https://tailwindcss.com/docs/columns\n       */\n      columns: [{\n        columns: [isNumber, isArbitraryValue, isArbitraryVariable, themeContainer]\n      }],\n      /**\n       * Break After\n       * @see https://tailwindcss.com/docs/break-after\n       */\n      \"break-after\": [{\n        \"break-after\": scaleBreak()\n      }],\n      /**\n       * Break Before\n       * @see https://tailwindcss.com/docs/break-before\n       */\n      \"break-before\": [{\n        \"break-before\": scaleBreak()\n      }],\n      /**\n       * Break Inside\n       * @see https://tailwindcss.com/docs/break-inside\n       */\n      \"break-inside\": [{\n        \"break-inside\": [\"auto\", \"avoid\", \"avoid-page\", \"avoid-column\"]\n      }],\n      /**\n       * Box Decoration Break\n       * @see https://tailwindcss.com/docs/box-decoration-break\n       */\n      \"box-decoration\": [{\n        \"box-decoration\": [\"slice\", \"clone\"]\n      }],\n      /**\n       * Box Sizing\n       * @see https://tailwindcss.com/docs/box-sizing\n       */\n      box: [{\n        box: [\"border\", \"content\"]\n      }],\n      /**\n       * Display\n       * @see https://tailwindcss.com/docs/display\n       */\n      display: [\"block\", \"inline-block\", \"inline\", \"flex\", \"inline-flex\", \"table\", \"inline-table\", \"table-caption\", \"table-cell\", \"table-column\", \"table-column-group\", \"table-footer-group\", \"table-header-group\", \"table-row-group\", \"table-row\", \"flow-root\", \"grid\", \"inline-grid\", \"contents\", \"list-item\", \"hidden\"],\n      /**\n       * Screen Reader Only\n       * @see https://tailwindcss.com/docs/display#screen-reader-only\n       */\n      sr: [\"sr-only\", \"not-sr-only\"],\n      /**\n       * Floats\n       * @see https://tailwindcss.com/docs/float\n       */\n      float: [{\n        float: [\"right\", \"left\", \"none\", \"start\", \"end\"]\n      }],\n      /**\n       * Clear\n       * @see https://tailwindcss.com/docs/clear\n       */\n      clear: [{\n        clear: [\"left\", \"right\", \"both\", \"none\", \"start\", \"end\"]\n      }],\n      /**\n       * Isolation\n       * @see https://tailwindcss.com/docs/isolation\n       */\n      isolation: [\"isolate\", \"isolation-auto\"],\n      /**\n       * Object Fit\n       * @see https://tailwindcss.com/docs/object-fit\n       */\n      \"object-fit\": [{\n        object: [\"contain\", \"cover\", \"fill\", \"none\", \"scale-down\"]\n      }],\n      /**\n       * Object Position\n       * @see https://tailwindcss.com/docs/object-position\n       */\n      \"object-position\": [{\n        object: scalePositionWithArbitrary()\n      }],\n      /**\n       * Overflow\n       * @see https://tailwindcss.com/docs/overflow\n       */\n      overflow: [{\n        overflow: scaleOverflow()\n      }],\n      /**\n       * Overflow X\n       * @see https://tailwindcss.com/docs/overflow\n       */\n      \"overflow-x\": [{\n        \"overflow-x\": scaleOverflow()\n      }],\n      /**\n       * Overflow Y\n       * @see https://tailwindcss.com/docs/overflow\n       */\n      \"overflow-y\": [{\n        \"overflow-y\": scaleOverflow()\n      }],\n      /**\n       * Overscroll Behavior\n       * @see https://tailwindcss.com/docs/overscroll-behavior\n       */\n      overscroll: [{\n        overscroll: scaleOverscroll()\n      }],\n      /**\n       * Overscroll Behavior X\n       * @see https://tailwindcss.com/docs/overscroll-behavior\n       */\n      \"overscroll-x\": [{\n        \"overscroll-x\": scaleOverscroll()\n      }],\n      /**\n       * Overscroll Behavior Y\n       * @see https://tailwindcss.com/docs/overscroll-behavior\n       */\n      \"overscroll-y\": [{\n        \"overscroll-y\": scaleOverscroll()\n      }],\n      /**\n       * Position\n       * @see https://tailwindcss.com/docs/position\n       */\n      position: [\"static\", \"fixed\", \"absolute\", \"relative\", \"sticky\"],\n      /**\n       * Top / Right / Bottom / Left\n       * @see https://tailwindcss.com/docs/top-right-bottom-left\n       */\n      inset: [{\n        inset: scaleInset()\n      }],\n      /**\n       * Right / Left\n       * @see https://tailwindcss.com/docs/top-right-bottom-left\n       */\n      \"inset-x\": [{\n        \"inset-x\": scaleInset()\n      }],\n      /**\n       * Top / Bottom\n       * @see https://tailwindcss.com/docs/top-right-bottom-left\n       */\n      \"inset-y\": [{\n        \"inset-y\": scaleInset()\n      }],\n      /**\n       * Start\n       * @see https://tailwindcss.com/docs/top-right-bottom-left\n       */\n      start: [{\n        start: scaleInset()\n      }],\n      /**\n       * End\n       * @see https://tailwindcss.com/docs/top-right-bottom-left\n       */\n      end: [{\n        end: scaleInset()\n      }],\n      /**\n       * Top\n       * @see https://tailwindcss.com/docs/top-right-bottom-left\n       */\n      top: [{\n        top: scaleInset()\n      }],\n      /**\n       * Right\n       * @see https://tailwindcss.com/docs/top-right-bottom-left\n       */\n      right: [{\n        right: scaleInset()\n      }],\n      /**\n       * Bottom\n       * @see https://tailwindcss.com/docs/top-right-bottom-left\n       */\n      bottom: [{\n        bottom: scaleInset()\n      }],\n      /**\n       * Left\n       * @see https://tailwindcss.com/docs/top-right-bottom-left\n       */\n      left: [{\n        left: scaleInset()\n      }],\n      /**\n       * Visibility\n       * @see https://tailwindcss.com/docs/visibility\n       */\n      visibility: [\"visible\", \"invisible\", \"collapse\"],\n      /**\n       * Z-Index\n       * @see https://tailwindcss.com/docs/z-index\n       */\n      z: [{\n        z: [isInteger, \"auto\", isArbitraryVariable, isArbitraryValue]\n      }],\n      // ------------------------\n      // --- Flexbox and Grid ---\n      // ------------------------\n      /**\n       * Flex Basis\n       * @see https://tailwindcss.com/docs/flex-basis\n       */\n      basis: [{\n        basis: [isFraction, \"full\", \"auto\", themeContainer, ...scaleUnambiguousSpacing()]\n      }],\n      /**\n       * Flex Direction\n       * @see https://tailwindcss.com/docs/flex-direction\n       */\n      \"flex-direction\": [{\n        flex: [\"row\", \"row-reverse\", \"col\", \"col-reverse\"]\n      }],\n      /**\n       * Flex Wrap\n       * @see https://tailwindcss.com/docs/flex-wrap\n       */\n      \"flex-wrap\": [{\n        flex: [\"nowrap\", \"wrap\", \"wrap-reverse\"]\n      }],\n      /**\n       * Flex\n       * @see https://tailwindcss.com/docs/flex\n       */\n      flex: [{\n        flex: [isNumber, isFraction, \"auto\", \"initial\", \"none\", isArbitraryValue]\n      }],\n      /**\n       * Flex Grow\n       * @see https://tailwindcss.com/docs/flex-grow\n       */\n      grow: [{\n        grow: [\"\", isNumber, isArbitraryVariable, isArbitraryValue]\n      }],\n      /**\n       * Flex Shrink\n       * @see https://tailwindcss.com/docs/flex-shrink\n       */\n      shrink: [{\n        shrink: [\"\", isNumber, isArbitraryVariable, isArbitraryValue]\n      }],\n      /**\n       * Order\n       * @see https://tailwindcss.com/docs/order\n       */\n      order: [{\n        order: [isInteger, \"first\", \"last\", \"none\", isArbitraryVariable, isArbitraryValue]\n      }],\n      /**\n       * Grid Template Columns\n       * @see https://tailwindcss.com/docs/grid-template-columns\n       */\n      \"grid-cols\": [{\n        \"grid-cols\": scaleGridTemplateColsRows()\n      }],\n      /**\n       * Grid Column Start / End\n       * @see https://tailwindcss.com/docs/grid-column\n       */\n      \"col-start-end\": [{\n        col: scaleGridColRowStartAndEnd()\n      }],\n      /**\n       * Grid Column Start\n       * @see https://tailwindcss.com/docs/grid-column\n       */\n      \"col-start\": [{\n        \"col-start\": scaleGridColRowStartOrEnd()\n      }],\n      /**\n       * Grid Column End\n       * @see https://tailwindcss.com/docs/grid-column\n       */\n      \"col-end\": [{\n        \"col-end\": scaleGridColRowStartOrEnd()\n      }],\n      /**\n       * Grid Template Rows\n       * @see https://tailwindcss.com/docs/grid-template-rows\n       */\n      \"grid-rows\": [{\n        \"grid-rows\": scaleGridTemplateColsRows()\n      }],\n      /**\n       * Grid Row Start / End\n       * @see https://tailwindcss.com/docs/grid-row\n       */\n      \"row-start-end\": [{\n        row: scaleGridColRowStartAndEnd()\n      }],\n      /**\n       * Grid Row Start\n       * @see https://tailwindcss.com/docs/grid-row\n       */\n      \"row-start\": [{\n        \"row-start\": scaleGridColRowStartOrEnd()\n      }],\n      /**\n       * Grid Row End\n       * @see https://tailwindcss.com/docs/grid-row\n       */\n      \"row-end\": [{\n        \"row-end\": scaleGridColRowStartOrEnd()\n      }],\n      /**\n       * Grid Auto Flow\n       * @see https://tailwindcss.com/docs/grid-auto-flow\n       */\n      \"grid-flow\": [{\n        \"grid-flow\": [\"row\", \"col\", \"dense\", \"row-dense\", \"col-dense\"]\n      }],\n      /**\n       * Grid Auto Columns\n       * @see https://tailwindcss.com/docs/grid-auto-columns\n       */\n      \"auto-cols\": [{\n        \"auto-cols\": scaleGridAutoColsRows()\n      }],\n      /**\n       * Grid Auto Rows\n       * @see https://tailwindcss.com/docs/grid-auto-rows\n       */\n      \"auto-rows\": [{\n        \"auto-rows\": scaleGridAutoColsRows()\n      }],\n      /**\n       * Gap\n       * @see https://tailwindcss.com/docs/gap\n       */\n      gap: [{\n        gap: scaleUnambiguousSpacing()\n      }],\n      /**\n       * Gap X\n       * @see https://tailwindcss.com/docs/gap\n       */\n      \"gap-x\": [{\n        \"gap-x\": scaleUnambiguousSpacing()\n      }],\n      /**\n       * Gap Y\n       * @see https://tailwindcss.com/docs/gap\n       */\n      \"gap-y\": [{\n        \"gap-y\": scaleUnambiguousSpacing()\n      }],\n      /**\n       * Justify Content\n       * @see https://tailwindcss.com/docs/justify-content\n       */\n      \"justify-content\": [{\n        justify: [...scaleAlignPrimaryAxis(), \"normal\"]\n      }],\n      /**\n       * Justify Items\n       * @see https://tailwindcss.com/docs/justify-items\n       */\n      \"justify-items\": [{\n        \"justify-items\": [...scaleAlignSecondaryAxis(), \"normal\"]\n      }],\n      /**\n       * Justify Self\n       * @see https://tailwindcss.com/docs/justify-self\n       */\n      \"justify-self\": [{\n        \"justify-self\": [\"auto\", ...scaleAlignSecondaryAxis()]\n      }],\n      /**\n       * Align Content\n       * @see https://tailwindcss.com/docs/align-content\n       */\n      \"align-content\": [{\n        content: [\"normal\", ...scaleAlignPrimaryAxis()]\n      }],\n      /**\n       * Align Items\n       * @see https://tailwindcss.com/docs/align-items\n       */\n      \"align-items\": [{\n        items: [...scaleAlignSecondaryAxis(), {\n          baseline: [\"\", \"last\"]\n        }]\n      }],\n      /**\n       * Align Self\n       * @see https://tailwindcss.com/docs/align-self\n       */\n      \"align-self\": [{\n        self: [\"auto\", ...scaleAlignSecondaryAxis(), {\n          baseline: [\"\", \"last\"]\n        }]\n      }],\n      /**\n       * Place Content\n       * @see https://tailwindcss.com/docs/place-content\n       */\n      \"place-content\": [{\n        \"place-content\": scaleAlignPrimaryAxis()\n      }],\n      /**\n       * Place Items\n       * @see https://tailwindcss.com/docs/place-items\n       */\n      \"place-items\": [{\n        \"place-items\": [...scaleAlignSecondaryAxis(), \"baseline\"]\n      }],\n      /**\n       * Place Self\n       * @see https://tailwindcss.com/docs/place-self\n       */\n      \"place-self\": [{\n        \"place-self\": [\"auto\", ...scaleAlignSecondaryAxis()]\n      }],\n      // Spacing\n      /**\n       * Padding\n       * @see https://tailwindcss.com/docs/padding\n       */\n      p: [{\n        p: scaleUnambiguousSpacing()\n      }],\n      /**\n       * Padding X\n       * @see https://tailwindcss.com/docs/padding\n       */\n      px: [{\n        px: scaleUnambiguousSpacing()\n      }],\n      /**\n       * Padding Y\n       * @see https://tailwindcss.com/docs/padding\n       */\n      py: [{\n        py: scaleUnambiguousSpacing()\n      }],\n      /**\n       * Padding Start\n       * @see https://tailwindcss.com/docs/padding\n       */\n      ps: [{\n        ps: scaleUnambiguousSpacing()\n      }],\n      /**\n       * Padding End\n       * @see https://tailwindcss.com/docs/padding\n       */\n      pe: [{\n        pe: scaleUnambiguousSpacing()\n      }],\n      /**\n       * Padding Top\n       * @see https://tailwindcss.com/docs/padding\n       */\n      pt: [{\n        pt: scaleUnambiguousSpacing()\n      }],\n      /**\n       * Padding Right\n       * @see https://tailwindcss.com/docs/padding\n       */\n      pr: [{\n        pr: scaleUnambiguousSpacing()\n      }],\n      /**\n       * Padding Bottom\n       * @see https://tailwindcss.com/docs/padding\n       */\n      pb: [{\n        pb: scaleUnambiguousSpacing()\n      }],\n      /**\n       * Padding Left\n       * @see https://tailwindcss.com/docs/padding\n       */\n      pl: [{\n        pl: scaleUnambiguousSpacing()\n      }],\n      /**\n       * Margin\n       * @see https://tailwindcss.com/docs/margin\n       */\n      m: [{\n        m: scaleMargin()\n      }],\n      /**\n       * Margin X\n       * @see https://tailwindcss.com/docs/margin\n       */\n      mx: [{\n        mx: scaleMargin()\n      }],\n      /**\n       * Margin Y\n       * @see https://tailwindcss.com/docs/margin\n       */\n      my: [{\n        my: scaleMargin()\n      }],\n      /**\n       * Margin Start\n       * @see https://tailwindcss.com/docs/margin\n       */\n      ms: [{\n        ms: scaleMargin()\n      }],\n      /**\n       * Margin End\n       * @see https://tailwindcss.com/docs/margin\n       */\n      me: [{\n        me: scaleMargin()\n      }],\n      /**\n       * Margin Top\n       * @see https://tailwindcss.com/docs/margin\n       */\n      mt: [{\n        mt: scaleMargin()\n      }],\n      /**\n       * Margin Right\n       * @see https://tailwindcss.com/docs/margin\n       */\n      mr: [{\n        mr: scaleMargin()\n      }],\n      /**\n       * Margin Bottom\n       * @see https://tailwindcss.com/docs/margin\n       */\n      mb: [{\n        mb: scaleMargin()\n      }],\n      /**\n       * Margin Left\n       * @see https://tailwindcss.com/docs/margin\n       */\n      ml: [{\n        ml: scaleMargin()\n      }],\n      /**\n       * Space Between X\n       * @see https://tailwindcss.com/docs/margin#adding-space-between-children\n       */\n      \"space-x\": [{\n        \"space-x\": scaleUnambiguousSpacing()\n      }],\n      /**\n       * Space Between X Reverse\n       * @see https://tailwindcss.com/docs/margin#adding-space-between-children\n       */\n      \"space-x-reverse\": [\"space-x-reverse\"],\n      /**\n       * Space Between Y\n       * @see https://tailwindcss.com/docs/margin#adding-space-between-children\n       */\n      \"space-y\": [{\n        \"space-y\": scaleUnambiguousSpacing()\n      }],\n      /**\n       * Space Between Y Reverse\n       * @see https://tailwindcss.com/docs/margin#adding-space-between-children\n       */\n      \"space-y-reverse\": [\"space-y-reverse\"],\n      // --------------\n      // --- Sizing ---\n      // --------------\n      /**\n       * Size\n       * @see https://tailwindcss.com/docs/width#setting-both-width-and-height\n       */\n      size: [{\n        size: scaleSizing()\n      }],\n      /**\n       * Width\n       * @see https://tailwindcss.com/docs/width\n       */\n      w: [{\n        w: [themeContainer, \"screen\", ...scaleSizing()]\n      }],\n      /**\n       * Min-Width\n       * @see https://tailwindcss.com/docs/min-width\n       */\n      \"min-w\": [{\n        \"min-w\": [\n          themeContainer,\n          \"screen\",\n          /** Deprecated. @see https://github.com/tailwindlabs/tailwindcss.com/issues/2027#issuecomment-2620152757 */\n          \"none\",\n          ...scaleSizing()\n        ]\n      }],\n      /**\n       * Max-Width\n       * @see https://tailwindcss.com/docs/max-width\n       */\n      \"max-w\": [{\n        \"max-w\": [\n          themeContainer,\n          \"screen\",\n          \"none\",\n          /** Deprecated since Tailwind CSS v4.0.0. @see https://github.com/tailwindlabs/tailwindcss.com/issues/2027#issuecomment-2620152757 */\n          \"prose\",\n          /** Deprecated since Tailwind CSS v4.0.0. @see https://github.com/tailwindlabs/tailwindcss.com/issues/2027#issuecomment-2620152757 */\n          {\n            screen: [themeBreakpoint]\n          },\n          ...scaleSizing()\n        ]\n      }],\n      /**\n       * Height\n       * @see https://tailwindcss.com/docs/height\n       */\n      h: [{\n        h: [\"screen\", ...scaleSizing()]\n      }],\n      /**\n       * Min-Height\n       * @see https://tailwindcss.com/docs/min-height\n       */\n      \"min-h\": [{\n        \"min-h\": [\"screen\", \"none\", ...scaleSizing()]\n      }],\n      /**\n       * Max-Height\n       * @see https://tailwindcss.com/docs/max-height\n       */\n      \"max-h\": [{\n        \"max-h\": [\"screen\", ...scaleSizing()]\n      }],\n      // ------------------\n      // --- Typography ---\n      // ------------------\n      /**\n       * Font Size\n       * @see https://tailwindcss.com/docs/font-size\n       */\n      \"font-size\": [{\n        text: [\"base\", themeText, isArbitraryVariableLength, isArbitraryLength]\n      }],\n      /**\n       * Font Smoothing\n       * @see https://tailwindcss.com/docs/font-smoothing\n       */\n      \"font-smoothing\": [\"antialiased\", \"subpixel-antialiased\"],\n      /**\n       * Font Style\n       * @see https://tailwindcss.com/docs/font-style\n       */\n      \"font-style\": [\"italic\", \"not-italic\"],\n      /**\n       * Font Weight\n       * @see https://tailwindcss.com/docs/font-weight\n       */\n      \"font-weight\": [{\n        font: [themeFontWeight, isArbitraryVariable, isArbitraryNumber]\n      }],\n      /**\n       * Font Stretch\n       * @see https://tailwindcss.com/docs/font-stretch\n       */\n      \"font-stretch\": [{\n        \"font-stretch\": [\"ultra-condensed\", \"extra-condensed\", \"condensed\", \"semi-condensed\", \"normal\", \"semi-expanded\", \"expanded\", \"extra-expanded\", \"ultra-expanded\", isPercent, isArbitraryValue]\n      }],\n      /**\n       * Font Family\n       * @see https://tailwindcss.com/docs/font-family\n       */\n      \"font-family\": [{\n        font: [isArbitraryVariableFamilyName, isArbitraryValue, themeFont]\n      }],\n      /**\n       * Font Variant Numeric\n       * @see https://tailwindcss.com/docs/font-variant-numeric\n       */\n      \"fvn-normal\": [\"normal-nums\"],\n      /**\n       * Font Variant Numeric\n       * @see https://tailwindcss.com/docs/font-variant-numeric\n       */\n      \"fvn-ordinal\": [\"ordinal\"],\n      /**\n       * Font Variant Numeric\n       * @see https://tailwindcss.com/docs/font-variant-numeric\n       */\n      \"fvn-slashed-zero\": [\"slashed-zero\"],\n      /**\n       * Font Variant Numeric\n       * @see https://tailwindcss.com/docs/font-variant-numeric\n       */\n      \"fvn-figure\": [\"lining-nums\", \"oldstyle-nums\"],\n      /**\n       * Font Variant Numeric\n       * @see https://tailwindcss.com/docs/font-variant-numeric\n       */\n      \"fvn-spacing\": [\"proportional-nums\", \"tabular-nums\"],\n      /**\n       * Font Variant Numeric\n       * @see https://tailwindcss.com/docs/font-variant-numeric\n       */\n      \"fvn-fraction\": [\"diagonal-fractions\", \"stacked-fractions\"],\n      /**\n       * Letter Spacing\n       * @see https://tailwindcss.com/docs/letter-spacing\n       */\n      tracking: [{\n        tracking: [themeTracking, isArbitraryVariable, isArbitraryValue]\n      }],\n      /**\n       * Line Clamp\n       * @see https://tailwindcss.com/docs/line-clamp\n       */\n      \"line-clamp\": [{\n        \"line-clamp\": [isNumber, \"none\", isArbitraryVariable, isArbitraryNumber]\n      }],\n      /**\n       * Line Height\n       * @see https://tailwindcss.com/docs/line-height\n       */\n      leading: [{\n        leading: [\n          /** Deprecated since Tailwind CSS v4.0.0. @see https://github.com/tailwindlabs/tailwindcss.com/issues/2027#issuecomment-2620152757 */\n          themeLeading,\n          ...scaleUnambiguousSpacing()\n        ]\n      }],\n      /**\n       * List Style Image\n       * @see https://tailwindcss.com/docs/list-style-image\n       */\n      \"list-image\": [{\n        \"list-image\": [\"none\", isArbitraryVariable, isArbitraryValue]\n      }],\n      /**\n       * List Style Position\n       * @see https://tailwindcss.com/docs/list-style-position\n       */\n      \"list-style-position\": [{\n        list: [\"inside\", \"outside\"]\n      }],\n      /**\n       * List Style Type\n       * @see https://tailwindcss.com/docs/list-style-type\n       */\n      \"list-style-type\": [{\n        list: [\"disc\", \"decimal\", \"none\", isArbitraryVariable, isArbitraryValue]\n      }],\n      /**\n       * Text Alignment\n       * @see https://tailwindcss.com/docs/text-align\n       */\n      \"text-alignment\": [{\n        text: [\"left\", \"center\", \"right\", \"justify\", \"start\", \"end\"]\n      }],\n      /**\n       * Placeholder Color\n       * @deprecated since Tailwind CSS v3.0.0\n       * @see https://v3.tailwindcss.com/docs/placeholder-color\n       */\n      \"placeholder-color\": [{\n        placeholder: scaleColor()\n      }],\n      /**\n       * Text Color\n       * @see https://tailwindcss.com/docs/text-color\n       */\n      \"text-color\": [{\n        text: scaleColor()\n      }],\n      /**\n       * Text Decoration\n       * @see https://tailwindcss.com/docs/text-decoration\n       */\n      \"text-decoration\": [\"underline\", \"overline\", \"line-through\", \"no-underline\"],\n      /**\n       * Text Decoration Style\n       * @see https://tailwindcss.com/docs/text-decoration-style\n       */\n      \"text-decoration-style\": [{\n        decoration: [...scaleLineStyle(), \"wavy\"]\n      }],\n      /**\n       * Text Decoration Thickness\n       * @see https://tailwindcss.com/docs/text-decoration-thickness\n       */\n      \"text-decoration-thickness\": [{\n        decoration: [isNumber, \"from-font\", \"auto\", isArbitraryVariable, isArbitraryLength]\n      }],\n      /**\n       * Text Decoration Color\n       * @see https://tailwindcss.com/docs/text-decoration-color\n       */\n      \"text-decoration-color\": [{\n        decoration: scaleColor()\n      }],\n      /**\n       * Text Underline Offset\n       * @see https://tailwindcss.com/docs/text-underline-offset\n       */\n      \"underline-offset\": [{\n        \"underline-offset\": [isNumber, \"auto\", isArbitraryVariable, isArbitraryValue]\n      }],\n      /**\n       * Text Transform\n       * @see https://tailwindcss.com/docs/text-transform\n       */\n      \"text-transform\": [\"uppercase\", \"lowercase\", \"capitalize\", \"normal-case\"],\n      /**\n       * Text Overflow\n       * @see https://tailwindcss.com/docs/text-overflow\n       */\n      \"text-overflow\": [\"truncate\", \"text-ellipsis\", \"text-clip\"],\n      /**\n       * Text Wrap\n       * @see https://tailwindcss.com/docs/text-wrap\n       */\n      \"text-wrap\": [{\n        text: [\"wrap\", \"nowrap\", \"balance\", \"pretty\"]\n      }],\n      /**\n       * Text Indent\n       * @see https://tailwindcss.com/docs/text-indent\n       */\n      indent: [{\n        indent: scaleUnambiguousSpacing()\n      }],\n      /**\n       * Vertical Alignment\n       * @see https://tailwindcss.com/docs/vertical-align\n       */\n      \"vertical-align\": [{\n        align: [\"baseline\", \"top\", \"middle\", \"bottom\", \"text-top\", \"text-bottom\", \"sub\", \"super\", isArbitraryVariable, isArbitraryValue]\n      }],\n      /**\n       * Whitespace\n       * @see https://tailwindcss.com/docs/whitespace\n       */\n      whitespace: [{\n        whitespace: [\"normal\", \"nowrap\", \"pre\", \"pre-line\", \"pre-wrap\", \"break-spaces\"]\n      }],\n      /**\n       * Word Break\n       * @see https://tailwindcss.com/docs/word-break\n       */\n      break: [{\n        break: [\"normal\", \"words\", \"all\", \"keep\"]\n      }],\n      /**\n       * Overflow Wrap\n       * @see https://tailwindcss.com/docs/overflow-wrap\n       */\n      wrap: [{\n        wrap: [\"break-word\", \"anywhere\", \"normal\"]\n      }],\n      /**\n       * Hyphens\n       * @see https://tailwindcss.com/docs/hyphens\n       */\n      hyphens: [{\n        hyphens: [\"none\", \"manual\", \"auto\"]\n      }],\n      /**\n       * Content\n       * @see https://tailwindcss.com/docs/content\n       */\n      content: [{\n        content: [\"none\", isArbitraryVariable, isArbitraryValue]\n      }],\n      // -------------------\n      // --- Backgrounds ---\n      // -------------------\n      /**\n       * Background Attachment\n       * @see https://tailwindcss.com/docs/background-attachment\n       */\n      \"bg-attachment\": [{\n        bg: [\"fixed\", \"local\", \"scroll\"]\n      }],\n      /**\n       * Background Clip\n       * @see https://tailwindcss.com/docs/background-clip\n       */\n      \"bg-clip\": [{\n        \"bg-clip\": [\"border\", \"padding\", \"content\", \"text\"]\n      }],\n      /**\n       * Background Origin\n       * @see https://tailwindcss.com/docs/background-origin\n       */\n      \"bg-origin\": [{\n        \"bg-origin\": [\"border\", \"padding\", \"content\"]\n      }],\n      /**\n       * Background Position\n       * @see https://tailwindcss.com/docs/background-position\n       */\n      \"bg-position\": [{\n        bg: scaleBgPosition()\n      }],\n      /**\n       * Background Repeat\n       * @see https://tailwindcss.com/docs/background-repeat\n       */\n      \"bg-repeat\": [{\n        bg: scaleBgRepeat()\n      }],\n      /**\n       * Background Size\n       * @see https://tailwindcss.com/docs/background-size\n       */\n      \"bg-size\": [{\n        bg: scaleBgSize()\n      }],\n      /**\n       * Background Image\n       * @see https://tailwindcss.com/docs/background-image\n       */\n      \"bg-image\": [{\n        bg: [\"none\", {\n          linear: [{\n            to: [\"t\", \"tr\", \"r\", \"br\", \"b\", \"bl\", \"l\", \"tl\"]\n          }, isInteger, isArbitraryVariable, isArbitraryValue],\n          radial: [\"\", isArbitraryVariable, isArbitraryValue],\n          conic: [isInteger, isArbitraryVariable, isArbitraryValue]\n        }, isArbitraryVariableImage, isArbitraryImage]\n      }],\n      /**\n       * Background Color\n       * @see https://tailwindcss.com/docs/background-color\n       */\n      \"bg-color\": [{\n        bg: scaleColor()\n      }],\n      /**\n       * Gradient Color Stops From Position\n       * @see https://tailwindcss.com/docs/gradient-color-stops\n       */\n      \"gradient-from-pos\": [{\n        from: scaleGradientStopPosition()\n      }],\n      /**\n       * Gradient Color Stops Via Position\n       * @see https://tailwindcss.com/docs/gradient-color-stops\n       */\n      \"gradient-via-pos\": [{\n        via: scaleGradientStopPosition()\n      }],\n      /**\n       * Gradient Color Stops To Position\n       * @see https://tailwindcss.com/docs/gradient-color-stops\n       */\n      \"gradient-to-pos\": [{\n        to: scaleGradientStopPosition()\n      }],\n      /**\n       * Gradient Color Stops From\n       * @see https://tailwindcss.com/docs/gradient-color-stops\n       */\n      \"gradient-from\": [{\n        from: scaleColor()\n      }],\n      /**\n       * Gradient Color Stops Via\n       * @see https://tailwindcss.com/docs/gradient-color-stops\n       */\n      \"gradient-via\": [{\n        via: scaleColor()\n      }],\n      /**\n       * Gradient Color Stops To\n       * @see https://tailwindcss.com/docs/gradient-color-stops\n       */\n      \"gradient-to\": [{\n        to: scaleColor()\n      }],\n      // ---------------\n      // --- Borders ---\n      // ---------------\n      /**\n       * Border Radius\n       * @see https://tailwindcss.com/docs/border-radius\n       */\n      rounded: [{\n        rounded: scaleRadius()\n      }],\n      /**\n       * Border Radius Start\n       * @see https://tailwindcss.com/docs/border-radius\n       */\n      \"rounded-s\": [{\n        \"rounded-s\": scaleRadius()\n      }],\n      /**\n       * Border Radius End\n       * @see https://tailwindcss.com/docs/border-radius\n       */\n      \"rounded-e\": [{\n        \"rounded-e\": scaleRadius()\n      }],\n      /**\n       * Border Radius Top\n       * @see https://tailwindcss.com/docs/border-radius\n       */\n      \"rounded-t\": [{\n        \"rounded-t\": scaleRadius()\n      }],\n      /**\n       * Border Radius Right\n       * @see https://tailwindcss.com/docs/border-radius\n       */\n      \"rounded-r\": [{\n        \"rounded-r\": scaleRadius()\n      }],\n      /**\n       * Border Radius Bottom\n       * @see https://tailwindcss.com/docs/border-radius\n       */\n      \"rounded-b\": [{\n        \"rounded-b\": scaleRadius()\n      }],\n      /**\n       * Border Radius Left\n       * @see https://tailwindcss.com/docs/border-radius\n       */\n      \"rounded-l\": [{\n        \"rounded-l\": scaleRadius()\n      }],\n      /**\n       * Border Radius Start Start\n       * @see https://tailwindcss.com/docs/border-radius\n       */\n      \"rounded-ss\": [{\n        \"rounded-ss\": scaleRadius()\n      }],\n      /**\n       * Border Radius Start End\n       * @see https://tailwindcss.com/docs/border-radius\n       */\n      \"rounded-se\": [{\n        \"rounded-se\": scaleRadius()\n      }],\n      /**\n       * Border Radius End End\n       * @see https://tailwindcss.com/docs/border-radius\n       */\n      \"rounded-ee\": [{\n        \"rounded-ee\": scaleRadius()\n      }],\n      /**\n       * Border Radius End Start\n       * @see https://tailwindcss.com/docs/border-radius\n       */\n      \"rounded-es\": [{\n        \"rounded-es\": scaleRadius()\n      }],\n      /**\n       * Border Radius Top Left\n       * @see https://tailwindcss.com/docs/border-radius\n       */\n      \"rounded-tl\": [{\n        \"rounded-tl\": scaleRadius()\n      }],\n      /**\n       * Border Radius Top Right\n       * @see https://tailwindcss.com/docs/border-radius\n       */\n      \"rounded-tr\": [{\n        \"rounded-tr\": scaleRadius()\n      }],\n      /**\n       * Border Radius Bottom Right\n       * @see https://tailwindcss.com/docs/border-radius\n       */\n      \"rounded-br\": [{\n        \"rounded-br\": scaleRadius()\n      }],\n      /**\n       * Border Radius Bottom Left\n       * @see https://tailwindcss.com/docs/border-radius\n       */\n      \"rounded-bl\": [{\n        \"rounded-bl\": scaleRadius()\n      }],\n      /**\n       * Border Width\n       * @see https://tailwindcss.com/docs/border-width\n       */\n      \"border-w\": [{\n        border: scaleBorderWidth()\n      }],\n      /**\n       * Border Width X\n       * @see https://tailwindcss.com/docs/border-width\n       */\n      \"border-w-x\": [{\n        \"border-x\": scaleBorderWidth()\n      }],\n      /**\n       * Border Width Y\n       * @see https://tailwindcss.com/docs/border-width\n       */\n      \"border-w-y\": [{\n        \"border-y\": scaleBorderWidth()\n      }],\n      /**\n       * Border Width Start\n       * @see https://tailwindcss.com/docs/border-width\n       */\n      \"border-w-s\": [{\n        \"border-s\": scaleBorderWidth()\n      }],\n      /**\n       * Border Width End\n       * @see https://tailwindcss.com/docs/border-width\n       */\n      \"border-w-e\": [{\n        \"border-e\": scaleBorderWidth()\n      }],\n      /**\n       * Border Width Top\n       * @see https://tailwindcss.com/docs/border-width\n       */\n      \"border-w-t\": [{\n        \"border-t\": scaleBorderWidth()\n      }],\n      /**\n       * Border Width Right\n       * @see https://tailwindcss.com/docs/border-width\n       */\n      \"border-w-r\": [{\n        \"border-r\": scaleBorderWidth()\n      }],\n      /**\n       * Border Width Bottom\n       * @see https://tailwindcss.com/docs/border-width\n       */\n      \"border-w-b\": [{\n        \"border-b\": scaleBorderWidth()\n      }],\n      /**\n       * Border Width Left\n       * @see https://tailwindcss.com/docs/border-width\n       */\n      \"border-w-l\": [{\n        \"border-l\": scaleBorderWidth()\n      }],\n      /**\n       * Divide Width X\n       * @see https://tailwindcss.com/docs/border-width#between-children\n       */\n      \"divide-x\": [{\n        \"divide-x\": scaleBorderWidth()\n      }],\n      /**\n       * Divide Width X Reverse\n       * @see https://tailwindcss.com/docs/border-width#between-children\n       */\n      \"divide-x-reverse\": [\"divide-x-reverse\"],\n      /**\n       * Divide Width Y\n       * @see https://tailwindcss.com/docs/border-width#between-children\n       */\n      \"divide-y\": [{\n        \"divide-y\": scaleBorderWidth()\n      }],\n      /**\n       * Divide Width Y Reverse\n       * @see https://tailwindcss.com/docs/border-width#between-children\n       */\n      \"divide-y-reverse\": [\"divide-y-reverse\"],\n      /**\n       * Border Style\n       * @see https://tailwindcss.com/docs/border-style\n       */\n      \"border-style\": [{\n        border: [...scaleLineStyle(), \"hidden\", \"none\"]\n      }],\n      /**\n       * Divide Style\n       * @see https://tailwindcss.com/docs/border-style#setting-the-divider-style\n       */\n      \"divide-style\": [{\n        divide: [...scaleLineStyle(), \"hidden\", \"none\"]\n      }],\n      /**\n       * Border Color\n       * @see https://tailwindcss.com/docs/border-color\n       */\n      \"border-color\": [{\n        border: scaleColor()\n      }],\n      /**\n       * Border Color X\n       * @see https://tailwindcss.com/docs/border-color\n       */\n      \"border-color-x\": [{\n        \"border-x\": scaleColor()\n      }],\n      /**\n       * Border Color Y\n       * @see https://tailwindcss.com/docs/border-color\n       */\n      \"border-color-y\": [{\n        \"border-y\": scaleColor()\n      }],\n      /**\n       * Border Color S\n       * @see https://tailwindcss.com/docs/border-color\n       */\n      \"border-color-s\": [{\n        \"border-s\": scaleColor()\n      }],\n      /**\n       * Border Color E\n       * @see https://tailwindcss.com/docs/border-color\n       */\n      \"border-color-e\": [{\n        \"border-e\": scaleColor()\n      }],\n      /**\n       * Border Color Top\n       * @see https://tailwindcss.com/docs/border-color\n       */\n      \"border-color-t\": [{\n        \"border-t\": scaleColor()\n      }],\n      /**\n       * Border Color Right\n       * @see https://tailwindcss.com/docs/border-color\n       */\n      \"border-color-r\": [{\n        \"border-r\": scaleColor()\n      }],\n      /**\n       * Border Color Bottom\n       * @see https://tailwindcss.com/docs/border-color\n       */\n      \"border-color-b\": [{\n        \"border-b\": scaleColor()\n      }],\n      /**\n       * Border Color Left\n       * @see https://tailwindcss.com/docs/border-color\n       */\n      \"border-color-l\": [{\n        \"border-l\": scaleColor()\n      }],\n      /**\n       * Divide Color\n       * @see https://tailwindcss.com/docs/divide-color\n       */\n      \"divide-color\": [{\n        divide: scaleColor()\n      }],\n      /**\n       * Outline Style\n       * @see https://tailwindcss.com/docs/outline-style\n       */\n      \"outline-style\": [{\n        outline: [...scaleLineStyle(), \"none\", \"hidden\"]\n      }],\n      /**\n       * Outline Offset\n       * @see https://tailwindcss.com/docs/outline-offset\n       */\n      \"outline-offset\": [{\n        \"outline-offset\": [isNumber, isArbitraryVariable, isArbitraryValue]\n      }],\n      /**\n       * Outline Width\n       * @see https://tailwindcss.com/docs/outline-width\n       */\n      \"outline-w\": [{\n        outline: [\"\", isNumber, isArbitraryVariableLength, isArbitraryLength]\n      }],\n      /**\n       * Outline Color\n       * @see https://tailwindcss.com/docs/outline-color\n       */\n      \"outline-color\": [{\n        outline: scaleColor()\n      }],\n      // ---------------\n      // --- Effects ---\n      // ---------------\n      /**\n       * Box Shadow\n       * @see https://tailwindcss.com/docs/box-shadow\n       */\n      shadow: [{\n        shadow: [\n          // Deprecated since Tailwind CSS v4.0.0\n          \"\",\n          \"none\",\n          themeShadow,\n          isArbitraryVariableShadow,\n          isArbitraryShadow\n        ]\n      }],\n      /**\n       * Box Shadow Color\n       * @see https://tailwindcss.com/docs/box-shadow#setting-the-shadow-color\n       */\n      \"shadow-color\": [{\n        shadow: scaleColor()\n      }],\n      /**\n       * Inset Box Shadow\n       * @see https://tailwindcss.com/docs/box-shadow#adding-an-inset-shadow\n       */\n      \"inset-shadow\": [{\n        \"inset-shadow\": [\"none\", themeInsetShadow, isArbitraryVariableShadow, isArbitraryShadow]\n      }],\n      /**\n       * Inset Box Shadow Color\n       * @see https://tailwindcss.com/docs/box-shadow#setting-the-inset-shadow-color\n       */\n      \"inset-shadow-color\": [{\n        \"inset-shadow\": scaleColor()\n      }],\n      /**\n       * Ring Width\n       * @see https://tailwindcss.com/docs/box-shadow#adding-a-ring\n       */\n      \"ring-w\": [{\n        ring: scaleBorderWidth()\n      }],\n      /**\n       * Ring Width Inset\n       * @see https://v3.tailwindcss.com/docs/ring-width#inset-rings\n       * @deprecated since Tailwind CSS v4.0.0\n       * @see https://github.com/tailwindlabs/tailwindcss/blob/v4.0.0/packages/tailwindcss/src/utilities.ts#L4158\n       */\n      \"ring-w-inset\": [\"ring-inset\"],\n      /**\n       * Ring Color\n       * @see https://tailwindcss.com/docs/box-shadow#setting-the-ring-color\n       */\n      \"ring-color\": [{\n        ring: scaleColor()\n      }],\n      /**\n       * Ring Offset Width\n       * @see https://v3.tailwindcss.com/docs/ring-offset-width\n       * @deprecated since Tailwind CSS v4.0.0\n       * @see https://github.com/tailwindlabs/tailwindcss/blob/v4.0.0/packages/tailwindcss/src/utilities.ts#L4158\n       */\n      \"ring-offset-w\": [{\n        \"ring-offset\": [isNumber, isArbitraryLength]\n      }],\n      /**\n       * Ring Offset Color\n       * @see https://v3.tailwindcss.com/docs/ring-offset-color\n       * @deprecated since Tailwind CSS v4.0.0\n       * @see https://github.com/tailwindlabs/tailwindcss/blob/v4.0.0/packages/tailwindcss/src/utilities.ts#L4158\n       */\n      \"ring-offset-color\": [{\n        \"ring-offset\": scaleColor()\n      }],\n      /**\n       * Inset Ring Width\n       * @see https://tailwindcss.com/docs/box-shadow#adding-an-inset-ring\n       */\n      \"inset-ring-w\": [{\n        \"inset-ring\": scaleBorderWidth()\n      }],\n      /**\n       * Inset Ring Color\n       * @see https://tailwindcss.com/docs/box-shadow#setting-the-inset-ring-color\n       */\n      \"inset-ring-color\": [{\n        \"inset-ring\": scaleColor()\n      }],\n      /**\n       * Text Shadow\n       * @see https://tailwindcss.com/docs/text-shadow\n       */\n      \"text-shadow\": [{\n        \"text-shadow\": [\"none\", themeTextShadow, isArbitraryVariableShadow, isArbitraryShadow]\n      }],\n      /**\n       * Text Shadow Color\n       * @see https://tailwindcss.com/docs/text-shadow#setting-the-shadow-color\n       */\n      \"text-shadow-color\": [{\n        \"text-shadow\": scaleColor()\n      }],\n      /**\n       * Opacity\n       * @see https://tailwindcss.com/docs/opacity\n       */\n      opacity: [{\n        opacity: [isNumber, isArbitraryVariable, isArbitraryValue]\n      }],\n      /**\n       * Mix Blend Mode\n       * @see https://tailwindcss.com/docs/mix-blend-mode\n       */\n      \"mix-blend\": [{\n        \"mix-blend\": [...scaleBlendMode(), \"plus-darker\", \"plus-lighter\"]\n      }],\n      /**\n       * Background Blend Mode\n       * @see https://tailwindcss.com/docs/background-blend-mode\n       */\n      \"bg-blend\": [{\n        \"bg-blend\": scaleBlendMode()\n      }],\n      /**\n       * Mask Clip\n       * @see https://tailwindcss.com/docs/mask-clip\n       */\n      \"mask-clip\": [{\n        \"mask-clip\": [\"border\", \"padding\", \"content\", \"fill\", \"stroke\", \"view\"]\n      }, \"mask-no-clip\"],\n      /**\n       * Mask Composite\n       * @see https://tailwindcss.com/docs/mask-composite\n       */\n      \"mask-composite\": [{\n        mask: [\"add\", \"subtract\", \"intersect\", \"exclude\"]\n      }],\n      /**\n       * Mask Image\n       * @see https://tailwindcss.com/docs/mask-image\n       */\n      \"mask-image-linear-pos\": [{\n        \"mask-linear\": [isNumber]\n      }],\n      \"mask-image-linear-from-pos\": [{\n        \"mask-linear-from\": scaleMaskImagePosition()\n      }],\n      \"mask-image-linear-to-pos\": [{\n        \"mask-linear-to\": scaleMaskImagePosition()\n      }],\n      \"mask-image-linear-from-color\": [{\n        \"mask-linear-from\": scaleColor()\n      }],\n      \"mask-image-linear-to-color\": [{\n        \"mask-linear-to\": scaleColor()\n      }],\n      \"mask-image-t-from-pos\": [{\n        \"mask-t-from\": scaleMaskImagePosition()\n      }],\n      \"mask-image-t-to-pos\": [{\n        \"mask-t-to\": scaleMaskImagePosition()\n      }],\n      \"mask-image-t-from-color\": [{\n        \"mask-t-from\": scaleColor()\n      }],\n      \"mask-image-t-to-color\": [{\n        \"mask-t-to\": scaleColor()\n      }],\n      \"mask-image-r-from-pos\": [{\n        \"mask-r-from\": scaleMaskImagePosition()\n      }],\n      \"mask-image-r-to-pos\": [{\n        \"mask-r-to\": scaleMaskImagePosition()\n      }],\n      \"mask-image-r-from-color\": [{\n        \"mask-r-from\": scaleColor()\n      }],\n      \"mask-image-r-to-color\": [{\n        \"mask-r-to\": scaleColor()\n      }],\n      \"mask-image-b-from-pos\": [{\n        \"mask-b-from\": scaleMaskImagePosition()\n      }],\n      \"mask-image-b-to-pos\": [{\n        \"mask-b-to\": scaleMaskImagePosition()\n      }],\n      \"mask-image-b-from-color\": [{\n        \"mask-b-from\": scaleColor()\n      }],\n      \"mask-image-b-to-color\": [{\n        \"mask-b-to\": scaleColor()\n      }],\n      \"mask-image-l-from-pos\": [{\n        \"mask-l-from\": scaleMaskImagePosition()\n      }],\n      \"mask-image-l-to-pos\": [{\n        \"mask-l-to\": scaleMaskImagePosition()\n      }],\n      \"mask-image-l-from-color\": [{\n        \"mask-l-from\": scaleColor()\n      }],\n      \"mask-image-l-to-color\": [{\n        \"mask-l-to\": scaleColor()\n      }],\n      \"mask-image-x-from-pos\": [{\n        \"mask-x-from\": scaleMaskImagePosition()\n      }],\n      \"mask-image-x-to-pos\": [{\n        \"mask-x-to\": scaleMaskImagePosition()\n      }],\n      \"mask-image-x-from-color\": [{\n        \"mask-x-from\": scaleColor()\n      }],\n      \"mask-image-x-to-color\": [{\n        \"mask-x-to\": scaleColor()\n      }],\n      \"mask-image-y-from-pos\": [{\n        \"mask-y-from\": scaleMaskImagePosition()\n      }],\n      \"mask-image-y-to-pos\": [{\n        \"mask-y-to\": scaleMaskImagePosition()\n      }],\n      \"mask-image-y-from-color\": [{\n        \"mask-y-from\": scaleColor()\n      }],\n      \"mask-image-y-to-color\": [{\n        \"mask-y-to\": scaleColor()\n      }],\n      \"mask-image-radial\": [{\n        \"mask-radial\": [isArbitraryVariable, isArbitraryValue]\n      }],\n      \"mask-image-radial-from-pos\": [{\n        \"mask-radial-from\": scaleMaskImagePosition()\n      }],\n      \"mask-image-radial-to-pos\": [{\n        \"mask-radial-to\": scaleMaskImagePosition()\n      }],\n      \"mask-image-radial-from-color\": [{\n        \"mask-radial-from\": scaleColor()\n      }],\n      \"mask-image-radial-to-color\": [{\n        \"mask-radial-to\": scaleColor()\n      }],\n      \"mask-image-radial-shape\": [{\n        \"mask-radial\": [\"circle\", \"ellipse\"]\n      }],\n      \"mask-image-radial-size\": [{\n        \"mask-radial\": [{\n          closest: [\"side\", \"corner\"],\n          farthest: [\"side\", \"corner\"]\n        }]\n      }],\n      \"mask-image-radial-pos\": [{\n        \"mask-radial-at\": scalePosition()\n      }],\n      \"mask-image-conic-pos\": [{\n        \"mask-conic\": [isNumber]\n      }],\n      \"mask-image-conic-from-pos\": [{\n        \"mask-conic-from\": scaleMaskImagePosition()\n      }],\n      \"mask-image-conic-to-pos\": [{\n        \"mask-conic-to\": scaleMaskImagePosition()\n      }],\n      \"mask-image-conic-from-color\": [{\n        \"mask-conic-from\": scaleColor()\n      }],\n      \"mask-image-conic-to-color\": [{\n        \"mask-conic-to\": scaleColor()\n      }],\n      /**\n       * Mask Mode\n       * @see https://tailwindcss.com/docs/mask-mode\n       */\n      \"mask-mode\": [{\n        mask: [\"alpha\", \"luminance\", \"match\"]\n      }],\n      /**\n       * Mask Origin\n       * @see https://tailwindcss.com/docs/mask-origin\n       */\n      \"mask-origin\": [{\n        \"mask-origin\": [\"border\", \"padding\", \"content\", \"fill\", \"stroke\", \"view\"]\n      }],\n      /**\n       * Mask Position\n       * @see https://tailwindcss.com/docs/mask-position\n       */\n      \"mask-position\": [{\n        mask: scaleBgPosition()\n      }],\n      /**\n       * Mask Repeat\n       * @see https://tailwindcss.com/docs/mask-repeat\n       */\n      \"mask-repeat\": [{\n        mask: scaleBgRepeat()\n      }],\n      /**\n       * Mask Size\n       * @see https://tailwindcss.com/docs/mask-size\n       */\n      \"mask-size\": [{\n        mask: scaleBgSize()\n      }],\n      /**\n       * Mask Type\n       * @see https://tailwindcss.com/docs/mask-type\n       */\n      \"mask-type\": [{\n        \"mask-type\": [\"alpha\", \"luminance\"]\n      }],\n      /**\n       * Mask Image\n       * @see https://tailwindcss.com/docs/mask-image\n       */\n      \"mask-image\": [{\n        mask: [\"none\", isArbitraryVariable, isArbitraryValue]\n      }],\n      // ---------------\n      // --- Filters ---\n      // ---------------\n      /**\n       * Filter\n       * @see https://tailwindcss.com/docs/filter\n       */\n      filter: [{\n        filter: [\n          // Deprecated since Tailwind CSS v3.0.0\n          \"\",\n          \"none\",\n          isArbitraryVariable,\n          isArbitraryValue\n        ]\n      }],\n      /**\n       * Blur\n       * @see https://tailwindcss.com/docs/blur\n       */\n      blur: [{\n        blur: scaleBlur()\n      }],\n      /**\n       * Brightness\n       * @see https://tailwindcss.com/docs/brightness\n       */\n      brightness: [{\n        brightness: [isNumber, isArbitraryVariable, isArbitraryValue]\n      }],\n      /**\n       * Contrast\n       * @see https://tailwindcss.com/docs/contrast\n       */\n      contrast: [{\n        contrast: [isNumber, isArbitraryVariable, isArbitraryValue]\n      }],\n      /**\n       * Drop Shadow\n       * @see https://tailwindcss.com/docs/drop-shadow\n       */\n      \"drop-shadow\": [{\n        \"drop-shadow\": [\n          // Deprecated since Tailwind CSS v4.0.0\n          \"\",\n          \"none\",\n          themeDropShadow,\n          isArbitraryVariableShadow,\n          isArbitraryShadow\n        ]\n      }],\n      /**\n       * Drop Shadow Color\n       * @see https://tailwindcss.com/docs/filter-drop-shadow#setting-the-shadow-color\n       */\n      \"drop-shadow-color\": [{\n        \"drop-shadow\": scaleColor()\n      }],\n      /**\n       * Grayscale\n       * @see https://tailwindcss.com/docs/grayscale\n       */\n      grayscale: [{\n        grayscale: [\"\", isNumber, isArbitraryVariable, isArbitraryValue]\n      }],\n      /**\n       * Hue Rotate\n       * @see https://tailwindcss.com/docs/hue-rotate\n       */\n      \"hue-rotate\": [{\n        \"hue-rotate\": [isNumber, isArbitraryVariable, isArbitraryValue]\n      }],\n      /**\n       * Invert\n       * @see https://tailwindcss.com/docs/invert\n       */\n      invert: [{\n        invert: [\"\", isNumber, isArbitraryVariable, isArbitraryValue]\n      }],\n      /**\n       * Saturate\n       * @see https://tailwindcss.com/docs/saturate\n       */\n      saturate: [{\n        saturate: [isNumber, isArbitraryVariable, isArbitraryValue]\n      }],\n      /**\n       * Sepia\n       * @see https://tailwindcss.com/docs/sepia\n       */\n      sepia: [{\n        sepia: [\"\", isNumber, isArbitraryVariable, isArbitraryValue]\n      }],\n      /**\n       * Backdrop Filter\n       * @see https://tailwindcss.com/docs/backdrop-filter\n       */\n      \"backdrop-filter\": [{\n        \"backdrop-filter\": [\n          // Deprecated since Tailwind CSS v3.0.0\n          \"\",\n          \"none\",\n          isArbitraryVariable,\n          isArbitraryValue\n        ]\n      }],\n      /**\n       * Backdrop Blur\n       * @see https://tailwindcss.com/docs/backdrop-blur\n       */\n      \"backdrop-blur\": [{\n        \"backdrop-blur\": scaleBlur()\n      }],\n      /**\n       * Backdrop Brightness\n       * @see https://tailwindcss.com/docs/backdrop-brightness\n       */\n      \"backdrop-brightness\": [{\n        \"backdrop-brightness\": [isNumber, isArbitraryVariable, isArbitraryValue]\n      }],\n      /**\n       * Backdrop Contrast\n       * @see https://tailwindcss.com/docs/backdrop-contrast\n       */\n      \"backdrop-contrast\": [{\n        \"backdrop-contrast\": [isNumber, isArbitraryVariable, isArbitraryValue]\n      }],\n      /**\n       * Backdrop Grayscale\n       * @see https://tailwindcss.com/docs/backdrop-grayscale\n       */\n      \"backdrop-grayscale\": [{\n        \"backdrop-grayscale\": [\"\", isNumber, isArbitraryVariable, isArbitraryValue]\n      }],\n      /**\n       * Backdrop Hue Rotate\n       * @see https://tailwindcss.com/docs/backdrop-hue-rotate\n       */\n      \"backdrop-hue-rotate\": [{\n        \"backdrop-hue-rotate\": [isNumber, isArbitraryVariable, isArbitraryValue]\n      }],\n      /**\n       * Backdrop Invert\n       * @see https://tailwindcss.com/docs/backdrop-invert\n       */\n      \"backdrop-invert\": [{\n        \"backdrop-invert\": [\"\", isNumber, isArbitraryVariable, isArbitraryValue]\n      }],\n      /**\n       * Backdrop Opacity\n       * @see https://tailwindcss.com/docs/backdrop-opacity\n       */\n      \"backdrop-opacity\": [{\n        \"backdrop-opacity\": [isNumber, isArbitraryVariable, isArbitraryValue]\n      }],\n      /**\n       * Backdrop Saturate\n       * @see https://tailwindcss.com/docs/backdrop-saturate\n       */\n      \"backdrop-saturate\": [{\n        \"backdrop-saturate\": [isNumber, isArbitraryVariable, isArbitraryValue]\n      }],\n      /**\n       * Backdrop Sepia\n       * @see https://tailwindcss.com/docs/backdrop-sepia\n       */\n      \"backdrop-sepia\": [{\n        \"backdrop-sepia\": [\"\", isNumber, isArbitraryVariable, isArbitraryValue]\n      }],\n      // --------------\n      // --- Tables ---\n      // --------------\n      /**\n       * Border Collapse\n       * @see https://tailwindcss.com/docs/border-collapse\n       */\n      \"border-collapse\": [{\n        border: [\"collapse\", \"separate\"]\n      }],\n      /**\n       * Border Spacing\n       * @see https://tailwindcss.com/docs/border-spacing\n       */\n      \"border-spacing\": [{\n        \"border-spacing\": scaleUnambiguousSpacing()\n      }],\n      /**\n       * Border Spacing X\n       * @see https://tailwindcss.com/docs/border-spacing\n       */\n      \"border-spacing-x\": [{\n        \"border-spacing-x\": scaleUnambiguousSpacing()\n      }],\n      /**\n       * Border Spacing Y\n       * @see https://tailwindcss.com/docs/border-spacing\n       */\n      \"border-spacing-y\": [{\n        \"border-spacing-y\": scaleUnambiguousSpacing()\n      }],\n      /**\n       * Table Layout\n       * @see https://tailwindcss.com/docs/table-layout\n       */\n      \"table-layout\": [{\n        table: [\"auto\", \"fixed\"]\n      }],\n      /**\n       * Caption Side\n       * @see https://tailwindcss.com/docs/caption-side\n       */\n      caption: [{\n        caption: [\"top\", \"bottom\"]\n      }],\n      // ---------------------------------\n      // --- Transitions and Animation ---\n      // ---------------------------------\n      /**\n       * Transition Property\n       * @see https://tailwindcss.com/docs/transition-property\n       */\n      transition: [{\n        transition: [\"\", \"all\", \"colors\", \"opacity\", \"shadow\", \"transform\", \"none\", isArbitraryVariable, isArbitraryValue]\n      }],\n      /**\n       * Transition Behavior\n       * @see https://tailwindcss.com/docs/transition-behavior\n       */\n      \"transition-behavior\": [{\n        transition: [\"normal\", \"discrete\"]\n      }],\n      /**\n       * Transition Duration\n       * @see https://tailwindcss.com/docs/transition-duration\n       */\n      duration: [{\n        duration: [isNumber, \"initial\", isArbitraryVariable, isArbitraryValue]\n      }],\n      /**\n       * Transition Timing Function\n       * @see https://tailwindcss.com/docs/transition-timing-function\n       */\n      ease: [{\n        ease: [\"linear\", \"initial\", themeEase, isArbitraryVariable, isArbitraryValue]\n      }],\n      /**\n       * Transition Delay\n       * @see https://tailwindcss.com/docs/transition-delay\n       */\n      delay: [{\n        delay: [isNumber, isArbitraryVariable, isArbitraryValue]\n      }],\n      /**\n       * Animation\n       * @see https://tailwindcss.com/docs/animation\n       */\n      animate: [{\n        animate: [\"none\", themeAnimate, isArbitraryVariable, isArbitraryValue]\n      }],\n      // ------------------\n      // --- Transforms ---\n      // ------------------\n      /**\n       * Backface Visibility\n       * @see https://tailwindcss.com/docs/backface-visibility\n       */\n      backface: [{\n        backface: [\"hidden\", \"visible\"]\n      }],\n      /**\n       * Perspective\n       * @see https://tailwindcss.com/docs/perspective\n       */\n      perspective: [{\n        perspective: [themePerspective, isArbitraryVariable, isArbitraryValue]\n      }],\n      /**\n       * Perspective Origin\n       * @see https://tailwindcss.com/docs/perspective-origin\n       */\n      \"perspective-origin\": [{\n        \"perspective-origin\": scalePositionWithArbitrary()\n      }],\n      /**\n       * Rotate\n       * @see https://tailwindcss.com/docs/rotate\n       */\n      rotate: [{\n        rotate: scaleRotate()\n      }],\n      /**\n       * Rotate X\n       * @see https://tailwindcss.com/docs/rotate\n       */\n      \"rotate-x\": [{\n        \"rotate-x\": scaleRotate()\n      }],\n      /**\n       * Rotate Y\n       * @see https://tailwindcss.com/docs/rotate\n       */\n      \"rotate-y\": [{\n        \"rotate-y\": scaleRotate()\n      }],\n      /**\n       * Rotate Z\n       * @see https://tailwindcss.com/docs/rotate\n       */\n      \"rotate-z\": [{\n        \"rotate-z\": scaleRotate()\n      }],\n      /**\n       * Scale\n       * @see https://tailwindcss.com/docs/scale\n       */\n      scale: [{\n        scale: scaleScale()\n      }],\n      /**\n       * Scale X\n       * @see https://tailwindcss.com/docs/scale\n       */\n      \"scale-x\": [{\n        \"scale-x\": scaleScale()\n      }],\n      /**\n       * Scale Y\n       * @see https://tailwindcss.com/docs/scale\n       */\n      \"scale-y\": [{\n        \"scale-y\": scaleScale()\n      }],\n      /**\n       * Scale Z\n       * @see https://tailwindcss.com/docs/scale\n       */\n      \"scale-z\": [{\n        \"scale-z\": scaleScale()\n      }],\n      /**\n       * Scale 3D\n       * @see https://tailwindcss.com/docs/scale\n       */\n      \"scale-3d\": [\"scale-3d\"],\n      /**\n       * Skew\n       * @see https://tailwindcss.com/docs/skew\n       */\n      skew: [{\n        skew: scaleSkew()\n      }],\n      /**\n       * Skew X\n       * @see https://tailwindcss.com/docs/skew\n       */\n      \"skew-x\": [{\n        \"skew-x\": scaleSkew()\n      }],\n      /**\n       * Skew Y\n       * @see https://tailwindcss.com/docs/skew\n       */\n      \"skew-y\": [{\n        \"skew-y\": scaleSkew()\n      }],\n      /**\n       * Transform\n       * @see https://tailwindcss.com/docs/transform\n       */\n      transform: [{\n        transform: [isArbitraryVariable, isArbitraryValue, \"\", \"none\", \"gpu\", \"cpu\"]\n      }],\n      /**\n       * Transform Origin\n       * @see https://tailwindcss.com/docs/transform-origin\n       */\n      \"transform-origin\": [{\n        origin: scalePositionWithArbitrary()\n      }],\n      /**\n       * Transform Style\n       * @see https://tailwindcss.com/docs/transform-style\n       */\n      \"transform-style\": [{\n        transform: [\"3d\", \"flat\"]\n      }],\n      /**\n       * Translate\n       * @see https://tailwindcss.com/docs/translate\n       */\n      translate: [{\n        translate: scaleTranslate()\n      }],\n      /**\n       * Translate X\n       * @see https://tailwindcss.com/docs/translate\n       */\n      \"translate-x\": [{\n        \"translate-x\": scaleTranslate()\n      }],\n      /**\n       * Translate Y\n       * @see https://tailwindcss.com/docs/translate\n       */\n      \"translate-y\": [{\n        \"translate-y\": scaleTranslate()\n      }],\n      /**\n       * Translate Z\n       * @see https://tailwindcss.com/docs/translate\n       */\n      \"translate-z\": [{\n        \"translate-z\": scaleTranslate()\n      }],\n      /**\n       * Translate None\n       * @see https://tailwindcss.com/docs/translate\n       */\n      \"translate-none\": [\"translate-none\"],\n      // ---------------------\n      // --- Interactivity ---\n      // ---------------------\n      /**\n       * Accent Color\n       * @see https://tailwindcss.com/docs/accent-color\n       */\n      accent: [{\n        accent: scaleColor()\n      }],\n      /**\n       * Appearance\n       * @see https://tailwindcss.com/docs/appearance\n       */\n      appearance: [{\n        appearance: [\"none\", \"auto\"]\n      }],\n      /**\n       * Caret Color\n       * @see https://tailwindcss.com/docs/just-in-time-mode#caret-color-utilities\n       */\n      \"caret-color\": [{\n        caret: scaleColor()\n      }],\n      /**\n       * Color Scheme\n       * @see https://tailwindcss.com/docs/color-scheme\n       */\n      \"color-scheme\": [{\n        scheme: [\"normal\", \"dark\", \"light\", \"light-dark\", \"only-dark\", \"only-light\"]\n      }],\n      /**\n       * Cursor\n       * @see https://tailwindcss.com/docs/cursor\n       */\n      cursor: [{\n        cursor: [\"auto\", \"default\", \"pointer\", \"wait\", \"text\", \"move\", \"help\", \"not-allowed\", \"none\", \"context-menu\", \"progress\", \"cell\", \"crosshair\", \"vertical-text\", \"alias\", \"copy\", \"no-drop\", \"grab\", \"grabbing\", \"all-scroll\", \"col-resize\", \"row-resize\", \"n-resize\", \"e-resize\", \"s-resize\", \"w-resize\", \"ne-resize\", \"nw-resize\", \"se-resize\", \"sw-resize\", \"ew-resize\", \"ns-resize\", \"nesw-resize\", \"nwse-resize\", \"zoom-in\", \"zoom-out\", isArbitraryVariable, isArbitraryValue]\n      }],\n      /**\n       * Field Sizing\n       * @see https://tailwindcss.com/docs/field-sizing\n       */\n      \"field-sizing\": [{\n        \"field-sizing\": [\"fixed\", \"content\"]\n      }],\n      /**\n       * Pointer Events\n       * @see https://tailwindcss.com/docs/pointer-events\n       */\n      \"pointer-events\": [{\n        \"pointer-events\": [\"auto\", \"none\"]\n      }],\n      /**\n       * Resize\n       * @see https://tailwindcss.com/docs/resize\n       */\n      resize: [{\n        resize: [\"none\", \"\", \"y\", \"x\"]\n      }],\n      /**\n       * Scroll Behavior\n       * @see https://tailwindcss.com/docs/scroll-behavior\n       */\n      \"scroll-behavior\": [{\n        scroll: [\"auto\", \"smooth\"]\n      }],\n      /**\n       * Scroll Margin\n       * @see https://tailwindcss.com/docs/scroll-margin\n       */\n      \"scroll-m\": [{\n        \"scroll-m\": scaleUnambiguousSpacing()\n      }],\n      /**\n       * Scroll Margin X\n       * @see https://tailwindcss.com/docs/scroll-margin\n       */\n      \"scroll-mx\": [{\n        \"scroll-mx\": scaleUnambiguousSpacing()\n      }],\n      /**\n       * Scroll Margin Y\n       * @see https://tailwindcss.com/docs/scroll-margin\n       */\n      \"scroll-my\": [{\n        \"scroll-my\": scaleUnambiguousSpacing()\n      }],\n      /**\n       * Scroll Margin Start\n       * @see https://tailwindcss.com/docs/scroll-margin\n       */\n      \"scroll-ms\": [{\n        \"scroll-ms\": scaleUnambiguousSpacing()\n      }],\n      /**\n       * Scroll Margin End\n       * @see https://tailwindcss.com/docs/scroll-margin\n       */\n      \"scroll-me\": [{\n        \"scroll-me\": scaleUnambiguousSpacing()\n      }],\n      /**\n       * Scroll Margin Top\n       * @see https://tailwindcss.com/docs/scroll-margin\n       */\n      \"scroll-mt\": [{\n        \"scroll-mt\": scaleUnambiguousSpacing()\n      }],\n      /**\n       * Scroll Margin Right\n       * @see https://tailwindcss.com/docs/scroll-margin\n       */\n      \"scroll-mr\": [{\n        \"scroll-mr\": scaleUnambiguousSpacing()\n      }],\n      /**\n       * Scroll Margin Bottom\n       * @see https://tailwindcss.com/docs/scroll-margin\n       */\n      \"scroll-mb\": [{\n        \"scroll-mb\": scaleUnambiguousSpacing()\n      }],\n      /**\n       * Scroll Margin Left\n       * @see https://tailwindcss.com/docs/scroll-margin\n       */\n      \"scroll-ml\": [{\n        \"scroll-ml\": scaleUnambiguousSpacing()\n      }],\n      /**\n       * Scroll Padding\n       * @see https://tailwindcss.com/docs/scroll-padding\n       */\n      \"scroll-p\": [{\n        \"scroll-p\": scaleUnambiguousSpacing()\n      }],\n      /**\n       * Scroll Padding X\n       * @see https://tailwindcss.com/docs/scroll-padding\n       */\n      \"scroll-px\": [{\n        \"scroll-px\": scaleUnambiguousSpacing()\n      }],\n      /**\n       * Scroll Padding Y\n       * @see https://tailwindcss.com/docs/scroll-padding\n       */\n      \"scroll-py\": [{\n        \"scroll-py\": scaleUnambiguousSpacing()\n      }],\n      /**\n       * Scroll Padding Start\n       * @see https://tailwindcss.com/docs/scroll-padding\n       */\n      \"scroll-ps\": [{\n        \"scroll-ps\": scaleUnambiguousSpacing()\n      }],\n      /**\n       * Scroll Padding End\n       * @see https://tailwindcss.com/docs/scroll-padding\n       */\n      \"scroll-pe\": [{\n        \"scroll-pe\": scaleUnambiguousSpacing()\n      }],\n      /**\n       * Scroll Padding Top\n       * @see https://tailwindcss.com/docs/scroll-padding\n       */\n      \"scroll-pt\": [{\n        \"scroll-pt\": scaleUnambiguousSpacing()\n      }],\n      /**\n       * Scroll Padding Right\n       * @see https://tailwindcss.com/docs/scroll-padding\n       */\n      \"scroll-pr\": [{\n        \"scroll-pr\": scaleUnambiguousSpacing()\n      }],\n      /**\n       * Scroll Padding Bottom\n       * @see https://tailwindcss.com/docs/scroll-padding\n       */\n      \"scroll-pb\": [{\n        \"scroll-pb\": scaleUnambiguousSpacing()\n      }],\n      /**\n       * Scroll Padding Left\n       * @see https://tailwindcss.com/docs/scroll-padding\n       */\n      \"scroll-pl\": [{\n        \"scroll-pl\": scaleUnambiguousSpacing()\n      }],\n      /**\n       * Scroll Snap Align\n       * @see https://tailwindcss.com/docs/scroll-snap-align\n       */\n      \"snap-align\": [{\n        snap: [\"start\", \"end\", \"center\", \"align-none\"]\n      }],\n      /**\n       * Scroll Snap Stop\n       * @see https://tailwindcss.com/docs/scroll-snap-stop\n       */\n      \"snap-stop\": [{\n        snap: [\"normal\", \"always\"]\n      }],\n      /**\n       * Scroll Snap Type\n       * @see https://tailwindcss.com/docs/scroll-snap-type\n       */\n      \"snap-type\": [{\n        snap: [\"none\", \"x\", \"y\", \"both\"]\n      }],\n      /**\n       * Scroll Snap Type Strictness\n       * @see https://tailwindcss.com/docs/scroll-snap-type\n       */\n      \"snap-strictness\": [{\n        snap: [\"mandatory\", \"proximity\"]\n      }],\n      /**\n       * Touch Action\n       * @see https://tailwindcss.com/docs/touch-action\n       */\n      touch: [{\n        touch: [\"auto\", \"none\", \"manipulation\"]\n      }],\n      /**\n       * Touch Action X\n       * @see https://tailwindcss.com/docs/touch-action\n       */\n      \"touch-x\": [{\n        \"touch-pan\": [\"x\", \"left\", \"right\"]\n      }],\n      /**\n       * Touch Action Y\n       * @see https://tailwindcss.com/docs/touch-action\n       */\n      \"touch-y\": [{\n        \"touch-pan\": [\"y\", \"up\", \"down\"]\n      }],\n      /**\n       * Touch Action Pinch Zoom\n       * @see https://tailwindcss.com/docs/touch-action\n       */\n      \"touch-pz\": [\"touch-pinch-zoom\"],\n      /**\n       * User Select\n       * @see https://tailwindcss.com/docs/user-select\n       */\n      select: [{\n        select: [\"none\", \"text\", \"all\", \"auto\"]\n      }],\n      /**\n       * Will Change\n       * @see https://tailwindcss.com/docs/will-change\n       */\n      \"will-change\": [{\n        \"will-change\": [\"auto\", \"scroll\", \"contents\", \"transform\", isArbitraryVariable, isArbitraryValue]\n      }],\n      // -----------\n      // --- SVG ---\n      // -----------\n      /**\n       * Fill\n       * @see https://tailwindcss.com/docs/fill\n       */\n      fill: [{\n        fill: [\"none\", ...scaleColor()]\n      }],\n      /**\n       * Stroke Width\n       * @see https://tailwindcss.com/docs/stroke-width\n       */\n      \"stroke-w\": [{\n        stroke: [isNumber, isArbitraryVariableLength, isArbitraryLength, isArbitraryNumber]\n      }],\n      /**\n       * Stroke\n       * @see https://tailwindcss.com/docs/stroke\n       */\n      stroke: [{\n        stroke: [\"none\", ...scaleColor()]\n      }],\n      // ---------------------\n      // --- Accessibility ---\n      // ---------------------\n      /**\n       * Forced Color Adjust\n       * @see https://tailwindcss.com/docs/forced-color-adjust\n       */\n      \"forced-color-adjust\": [{\n        \"forced-color-adjust\": [\"auto\", \"none\"]\n      }]\n    },\n    conflictingClassGroups: {\n      overflow: [\"overflow-x\", \"overflow-y\"],\n      overscroll: [\"overscroll-x\", \"overscroll-y\"],\n      inset: [\"inset-x\", \"inset-y\", \"start\", \"end\", \"top\", \"right\", \"bottom\", \"left\"],\n      \"inset-x\": [\"right\", \"left\"],\n      \"inset-y\": [\"top\", \"bottom\"],\n      flex: [\"basis\", \"grow\", \"shrink\"],\n      gap: [\"gap-x\", \"gap-y\"],\n      p: [\"px\", \"py\", \"ps\", \"pe\", \"pt\", \"pr\", \"pb\", \"pl\"],\n      px: [\"pr\", \"pl\"],\n      py: [\"pt\", \"pb\"],\n      m: [\"mx\", \"my\", \"ms\", \"me\", \"mt\", \"mr\", \"mb\", \"ml\"],\n      mx: [\"mr\", \"ml\"],\n      my: [\"mt\", \"mb\"],\n      size: [\"w\", \"h\"],\n      \"font-size\": [\"leading\"],\n      \"fvn-normal\": [\"fvn-ordinal\", \"fvn-slashed-zero\", \"fvn-figure\", \"fvn-spacing\", \"fvn-fraction\"],\n      \"fvn-ordinal\": [\"fvn-normal\"],\n      \"fvn-slashed-zero\": [\"fvn-normal\"],\n      \"fvn-figure\": [\"fvn-normal\"],\n      \"fvn-spacing\": [\"fvn-normal\"],\n      \"fvn-fraction\": [\"fvn-normal\"],\n      \"line-clamp\": [\"display\", \"overflow\"],\n      rounded: [\"rounded-s\", \"rounded-e\", \"rounded-t\", \"rounded-r\", \"rounded-b\", \"rounded-l\", \"rounded-ss\", \"rounded-se\", \"rounded-ee\", \"rounded-es\", \"rounded-tl\", \"rounded-tr\", \"rounded-br\", \"rounded-bl\"],\n      \"rounded-s\": [\"rounded-ss\", \"rounded-es\"],\n      \"rounded-e\": [\"rounded-se\", \"rounded-ee\"],\n      \"rounded-t\": [\"rounded-tl\", \"rounded-tr\"],\n      \"rounded-r\": [\"rounded-tr\", \"rounded-br\"],\n      \"rounded-b\": [\"rounded-br\", \"rounded-bl\"],\n      \"rounded-l\": [\"rounded-tl\", \"rounded-bl\"],\n      \"border-spacing\": [\"border-spacing-x\", \"border-spacing-y\"],\n      \"border-w\": [\"border-w-x\", \"border-w-y\", \"border-w-s\", \"border-w-e\", \"border-w-t\", \"border-w-r\", \"border-w-b\", \"border-w-l\"],\n      \"border-w-x\": [\"border-w-r\", \"border-w-l\"],\n      \"border-w-y\": [\"border-w-t\", \"border-w-b\"],\n      \"border-color\": [\"border-color-x\", \"border-color-y\", \"border-color-s\", \"border-color-e\", \"border-color-t\", \"border-color-r\", \"border-color-b\", \"border-color-l\"],\n      \"border-color-x\": [\"border-color-r\", \"border-color-l\"],\n      \"border-color-y\": [\"border-color-t\", \"border-color-b\"],\n      translate: [\"translate-x\", \"translate-y\", \"translate-none\"],\n      \"translate-none\": [\"translate\", \"translate-x\", \"translate-y\", \"translate-z\"],\n      \"scroll-m\": [\"scroll-mx\", \"scroll-my\", \"scroll-ms\", \"scroll-me\", \"scroll-mt\", \"scroll-mr\", \"scroll-mb\", \"scroll-ml\"],\n      \"scroll-mx\": [\"scroll-mr\", \"scroll-ml\"],\n      \"scroll-my\": [\"scroll-mt\", \"scroll-mb\"],\n      \"scroll-p\": [\"scroll-px\", \"scroll-py\", \"scroll-ps\", \"scroll-pe\", \"scroll-pt\", \"scroll-pr\", \"scroll-pb\", \"scroll-pl\"],\n      \"scroll-px\": [\"scroll-pr\", \"scroll-pl\"],\n      \"scroll-py\": [\"scroll-pt\", \"scroll-pb\"],\n      touch: [\"touch-x\", \"touch-y\", \"touch-pz\"],\n      \"touch-x\": [\"touch\"],\n      \"touch-y\": [\"touch\"],\n      \"touch-pz\": [\"touch\"]\n    },\n    conflictingClassGroupModifiers: {\n      \"font-size\": [\"leading\"]\n    },\n    orderSensitiveModifiers: [\"*\", \"**\", \"after\", \"backdrop\", \"before\", \"details-content\", \"file\", \"first-letter\", \"first-line\", \"marker\", \"placeholder\", \"selection\"]\n  };\n};\nconst mergeConfigs = (baseConfig, {\n  cacheSize,\n  prefix,\n  experimentalParseClassName,\n  extend: extend2 = {},\n  override = {}\n}) => {\n  overrideProperty(baseConfig, \"cacheSize\", cacheSize);\n  overrideProperty(baseConfig, \"prefix\", prefix);\n  overrideProperty(baseConfig, \"experimentalParseClassName\", experimentalParseClassName);\n  overrideConfigProperties(baseConfig.theme, override.theme);\n  overrideConfigProperties(baseConfig.classGroups, override.classGroups);\n  overrideConfigProperties(baseConfig.conflictingClassGroups, override.conflictingClassGroups);\n  overrideConfigProperties(baseConfig.conflictingClassGroupModifiers, override.conflictingClassGroupModifiers);\n  overrideProperty(baseConfig, \"orderSensitiveModifiers\", override.orderSensitiveModifiers);\n  mergeConfigProperties(baseConfig.theme, extend2.theme);\n  mergeConfigProperties(baseConfig.classGroups, extend2.classGroups);\n  mergeConfigProperties(baseConfig.conflictingClassGroups, extend2.conflictingClassGroups);\n  mergeConfigProperties(baseConfig.conflictingClassGroupModifiers, extend2.conflictingClassGroupModifiers);\n  mergeArrayProperties(baseConfig, extend2, \"orderSensitiveModifiers\");\n  return baseConfig;\n};\nconst overrideProperty = (baseObject, overrideKey, overrideValue) => {\n  if (overrideValue !== void 0) {\n    baseObject[overrideKey] = overrideValue;\n  }\n};\nconst overrideConfigProperties = (baseObject, overrideObject) => {\n  if (overrideObject) {\n    for (const key in overrideObject) {\n      overrideProperty(baseObject, key, overrideObject[key]);\n    }\n  }\n};\nconst mergeConfigProperties = (baseObject, mergeObject) => {\n  if (mergeObject) {\n    for (const key in mergeObject) {\n      mergeArrayProperties(baseObject, mergeObject, key);\n    }\n  }\n};\nconst mergeArrayProperties = (baseObject, mergeObject, key) => {\n  const mergeValue = mergeObject[key];\n  if (mergeValue !== void 0) {\n    baseObject[key] = baseObject[key] ? baseObject[key].concat(mergeValue) : mergeValue;\n  }\n};\nconst extendTailwindMerge = (configExtension, ...createConfig) => typeof configExtension === \"function\" ? createTailwindMerge(getDefaultConfig, configExtension, ...createConfig) : createTailwindMerge(() => mergeConfigs(getDefaultConfig(), configExtension), ...createConfig);\nconst companionAnchorTagName = \"stagewise-companion-anchor\";\nfunction getElementAtPoint(x2, y2) {\n  const elementsBelowAnnotation = document.elementsFromPoint(x2, y2);\n  const refElement = elementsBelowAnnotation.find(\n    (element) => element.nodeName !== \"STAGEWISE-COMPANION-ANCHOR\" && !element.closest(companionAnchorTagName) && !element.closest(\"svg\") && isElementAtPoint(element, x2, y2)\n  ) || document.body;\n  return refElement;\n}\nconst isElementAtPoint = (element, clientX, clientY) => {\n  const boundingRect = element.getBoundingClientRect();\n  const isInHorizontalBounds = clientX > boundingRect.left && clientX < boundingRect.left + boundingRect.width;\n  const isInVerticalBounds = clientY > boundingRect.top && clientY < boundingRect.top + boundingRect.height;\n  return isInHorizontalBounds && isInVerticalBounds;\n};\nvar HotkeyActions = /* @__PURE__ */ ((HotkeyActions2) => {\n  HotkeyActions2[HotkeyActions2[\"ESC\"] = 0] = \"ESC\";\n  HotkeyActions2[HotkeyActions2[\"CTRL_ALT_C\"] = 1] = \"CTRL_ALT_C\";\n  return HotkeyActions2;\n})(HotkeyActions || {});\nconst hotkeyActionDefinitions = {\n  [\n    0\n    /* ESC */\n  ]: {\n    keyComboDefault: \"Esc\",\n    keyComboMac: \"esc\",\n    isEventMatching: (ev) => ev.code === \"Escape\"\n  },\n  [\n    1\n    /* CTRL_ALT_C */\n  ]: {\n    keyComboDefault: \"Ctrl+Alt+C\",\n    keyComboMac: \"⌘+⌥+C\",\n    isEventMatching: (ev) => ev.code === \"KeyC\" && (ev.ctrlKey || ev.metaKey) && ev.altKey\n  }\n};\nconst customTwMerge = extendTailwindMerge({\n  extend: {\n    classGroups: {\n      \"bg-image\": [\n        \"bg-gradient\",\n        \"bg-gradient-light-1\",\n        \"bg-gradient-light-2\",\n        \"bg-gradient-light-3\"\n      ]\n    }\n  }\n});\nfunction cn(...inputs) {\n  return customTwMerge(clsx(inputs));\n}\nfunction HotkeyListener() {\n  const { startPromptCreation, stopPromptCreation } = useChatState();\n  const hotKeyHandlerMap = T$5(\n    () => ({\n      [HotkeyActions.CTRL_ALT_C]: () => {\n        startPromptCreation();\n      },\n      [HotkeyActions.ESC]: () => {\n        stopPromptCreation();\n      }\n    }),\n    [startPromptCreation, stopPromptCreation]\n  );\n  const hotKeyListener = q$3(\n    (ev) => {\n      for (const [action, definition] of Object.entries(\n        hotkeyActionDefinitions\n      )) {\n        if (definition.isEventMatching(ev)) {\n          ev.preventDefault();\n          ev.stopPropagation();\n          hotKeyHandlerMap[action]();\n          break;\n        }\n      }\n    },\n    [hotKeyHandlerMap]\n  );\n  useEventListener(\"keydown\", hotKeyListener, {\n    capture: true\n  });\n  return null;\n}\nconst $f0a04ccd8dbdd83b$export$e5c5a5f917a5871c = typeof document !== \"undefined\" ? Rn.useLayoutEffect : () => {\n};\nfunction $8ae05eaa5c114e9c$export$7f54fc3180508a52(fn2) {\n  const ref = A$3(null);\n  $f0a04ccd8dbdd83b$export$e5c5a5f917a5871c(() => {\n    ref.current = fn2;\n  }, [\n    fn2\n  ]);\n  return q$3((...args) => {\n    const f2 = ref.current;\n    return f2 === null || f2 === void 0 ? void 0 : f2(...args);\n  }, []);\n}\nconst $431fbd86ca7dc216$export$b204af158042fbac = (el) => {\n  var _el_ownerDocument;\n  return (_el_ownerDocument = el === null || el === void 0 ? void 0 : el.ownerDocument) !== null && _el_ownerDocument !== void 0 ? _el_ownerDocument : document;\n};\nconst $431fbd86ca7dc216$export$f21a1ffae260145a = (el) => {\n  if (el && \"window\" in el && el.window === el) return el;\n  const doc = $431fbd86ca7dc216$export$b204af158042fbac(el);\n  return doc.defaultView || window;\n};\nfunction $431fbd86ca7dc216$var$isNode(value) {\n  return value !== null && typeof value === \"object\" && \"nodeType\" in value && typeof value.nodeType === \"number\";\n}\nfunction $431fbd86ca7dc216$export$af51f0f06c0f328a(node) {\n  return $431fbd86ca7dc216$var$isNode(node) && node.nodeType === Node.DOCUMENT_FRAGMENT_NODE && \"host\" in node;\n}\nlet $f4e2df6bd15f8569$var$_shadowDOM = false;\nfunction $f4e2df6bd15f8569$export$98658e8c59125e6a() {\n  return $f4e2df6bd15f8569$var$_shadowDOM;\n}\nfunction $d4ee10de306f2510$export$4282f70798064fe0(node, otherNode) {\n  if (!$f4e2df6bd15f8569$export$98658e8c59125e6a()) return otherNode && node ? node.contains(otherNode) : false;\n  if (!node || !otherNode) return false;\n  let currentNode = otherNode;\n  while (currentNode !== null) {\n    if (currentNode === node) return true;\n    if (currentNode.tagName === \"SLOT\" && currentNode.assignedSlot)\n      currentNode = currentNode.assignedSlot.parentNode;\n    else if ($431fbd86ca7dc216$export$af51f0f06c0f328a(currentNode))\n      currentNode = currentNode.host;\n    else currentNode = currentNode.parentNode;\n  }\n  return false;\n}\nconst $d4ee10de306f2510$export$cd4e5573fbe2b576 = (doc = document) => {\n  var _activeElement_shadowRoot;\n  if (!$f4e2df6bd15f8569$export$98658e8c59125e6a()) return doc.activeElement;\n  let activeElement = doc.activeElement;\n  while (activeElement && \"shadowRoot\" in activeElement && ((_activeElement_shadowRoot = activeElement.shadowRoot) === null || _activeElement_shadowRoot === void 0 ? void 0 : _activeElement_shadowRoot.activeElement)) activeElement = activeElement.shadowRoot.activeElement;\n  return activeElement;\n};\nfunction $d4ee10de306f2510$export$e58f029f0fbfdb29(event) {\n  if ($f4e2df6bd15f8569$export$98658e8c59125e6a() && event.target.shadowRoot) {\n    if (event.composedPath) return event.composedPath()[0];\n  }\n  return event.target;\n}\nfunction $c87311424ea30a05$var$testUserAgent(re) {\n  var _window_navigator_userAgentData;\n  if (typeof window === \"undefined\" || window.navigator == null) return false;\n  return ((_window_navigator_userAgentData = window.navigator[\"userAgentData\"]) === null || _window_navigator_userAgentData === void 0 ? void 0 : _window_navigator_userAgentData.brands.some((brand) => re.test(brand.brand))) || re.test(window.navigator.userAgent);\n}\nfunction $c87311424ea30a05$var$testPlatform(re) {\n  var _window_navigator_userAgentData;\n  return typeof window !== \"undefined\" && window.navigator != null ? re.test(((_window_navigator_userAgentData = window.navigator[\"userAgentData\"]) === null || _window_navigator_userAgentData === void 0 ? void 0 : _window_navigator_userAgentData.platform) || window.navigator.platform) : false;\n}\nfunction $c87311424ea30a05$var$cached(fn2) {\n  if (false) {}\n  let res = null;\n  return () => {\n    if (res == null) res = fn2();\n    return res;\n  };\n}\nconst $c87311424ea30a05$export$9ac100e40613ea10 = $c87311424ea30a05$var$cached(function() {\n  return $c87311424ea30a05$var$testPlatform(/^Mac/i);\n});\nconst $c87311424ea30a05$export$186c6964ca17d99 = $c87311424ea30a05$var$cached(function() {\n  return $c87311424ea30a05$var$testPlatform(/^iPhone/i);\n});\nconst $c87311424ea30a05$export$7bef049ce92e4224 = $c87311424ea30a05$var$cached(function() {\n  return $c87311424ea30a05$var$testPlatform(/^iPad/i) || // iPadOS 13 lies and says it's a Mac, but we can distinguish by detecting touch support.\n  $c87311424ea30a05$export$9ac100e40613ea10() && navigator.maxTouchPoints > 1;\n});\nconst $c87311424ea30a05$export$fedb369cb70207f1 = $c87311424ea30a05$var$cached(function() {\n  return $c87311424ea30a05$export$186c6964ca17d99() || $c87311424ea30a05$export$7bef049ce92e4224();\n});\n$c87311424ea30a05$var$cached(function() {\n  return $c87311424ea30a05$export$9ac100e40613ea10() || $c87311424ea30a05$export$fedb369cb70207f1();\n});\n$c87311424ea30a05$var$cached(function() {\n  return $c87311424ea30a05$var$testUserAgent(/AppleWebKit/i) && !$c87311424ea30a05$export$6446a186d09e379e();\n});\nconst $c87311424ea30a05$export$6446a186d09e379e = $c87311424ea30a05$var$cached(function() {\n  return $c87311424ea30a05$var$testUserAgent(/Chrome/i);\n});\nconst $c87311424ea30a05$export$a11b0059900ceec8 = $c87311424ea30a05$var$cached(function() {\n  return $c87311424ea30a05$var$testUserAgent(/Android/i);\n});\n$c87311424ea30a05$var$cached(function() {\n  return $c87311424ea30a05$var$testUserAgent(/Firefox/i);\n});\nfunction $03deb23ff14920c4$export$4eaf04e54aa8eed6() {\n  let globalListeners = A$3(/* @__PURE__ */ new Map());\n  let addGlobalListener = q$3((eventTarget, type, listener, options) => {\n    let fn2 = (options === null || options === void 0 ? void 0 : options.once) ? (...args) => {\n      globalListeners.current.delete(listener);\n      listener(...args);\n    } : listener;\n    globalListeners.current.set(listener, {\n      type,\n      eventTarget,\n      fn: fn2,\n      options\n    });\n    eventTarget.addEventListener(type, fn2, options);\n  }, []);\n  let removeGlobalListener = q$3((eventTarget, type, listener, options) => {\n    var _globalListeners_current_get;\n    let fn2 = ((_globalListeners_current_get = globalListeners.current.get(listener)) === null || _globalListeners_current_get === void 0 ? void 0 : _globalListeners_current_get.fn) || listener;\n    eventTarget.removeEventListener(type, fn2, options);\n    globalListeners.current.delete(listener);\n  }, []);\n  let removeAllGlobalListeners = q$3(() => {\n    globalListeners.current.forEach((value, key) => {\n      removeGlobalListener(value.eventTarget, value.type, key, value.options);\n    });\n  }, [\n    removeGlobalListener\n  ]);\n  y$6(() => {\n    return removeAllGlobalListeners;\n  }, [\n    removeAllGlobalListeners\n  ]);\n  return {\n    addGlobalListener,\n    removeGlobalListener,\n    removeAllGlobalListeners\n  };\n}\nfunction $6a7db85432448f7f$export$60278871457622de(event) {\n  if (event.mozInputSource === 0 && event.isTrusted) return true;\n  if ($c87311424ea30a05$export$a11b0059900ceec8() && event.pointerType) return event.type === \"click\" && event.buttons === 1;\n  return event.detail === 0 && !event.pointerType;\n}\nfunction $8a9cb279dc87e130$export$525bc4921d56d4a(nativeEvent) {\n  let event = nativeEvent;\n  event.nativeEvent = nativeEvent;\n  event.isDefaultPrevented = () => event.defaultPrevented;\n  event.isPropagationStopped = () => event.cancelBubble;\n  event.persist = () => {\n  };\n  return event;\n}\nfunction $8a9cb279dc87e130$export$c2b7abe5d61ec696(event, target) {\n  Object.defineProperty(event, \"target\", {\n    value: target\n  });\n  Object.defineProperty(event, \"currentTarget\", {\n    value: target\n  });\n}\nfunction $8a9cb279dc87e130$export$715c682d09d639cc(onBlur) {\n  let stateRef = A$3({\n    isFocused: false,\n    observer: null\n  });\n  $f0a04ccd8dbdd83b$export$e5c5a5f917a5871c(() => {\n    const state = stateRef.current;\n    return () => {\n      if (state.observer) {\n        state.observer.disconnect();\n        state.observer = null;\n      }\n    };\n  }, []);\n  let dispatchBlur = $8ae05eaa5c114e9c$export$7f54fc3180508a52((e2) => {\n    onBlur === null || onBlur === void 0 ? void 0 : onBlur(e2);\n  });\n  return q$3((e2) => {\n    if (e2.target instanceof HTMLButtonElement || e2.target instanceof HTMLInputElement || e2.target instanceof HTMLTextAreaElement || e2.target instanceof HTMLSelectElement) {\n      stateRef.current.isFocused = true;\n      let target = e2.target;\n      let onBlurHandler = (e3) => {\n        stateRef.current.isFocused = false;\n        if (target.disabled) {\n          let event = $8a9cb279dc87e130$export$525bc4921d56d4a(e3);\n          dispatchBlur(event);\n        }\n        if (stateRef.current.observer) {\n          stateRef.current.observer.disconnect();\n          stateRef.current.observer = null;\n        }\n      };\n      target.addEventListener(\"focusout\", onBlurHandler, {\n        once: true\n      });\n      stateRef.current.observer = new MutationObserver(() => {\n        if (stateRef.current.isFocused && target.disabled) {\n          var _stateRef_current_observer;\n          (_stateRef_current_observer = stateRef.current.observer) === null || _stateRef_current_observer === void 0 ? void 0 : _stateRef_current_observer.disconnect();\n          let relatedTargetEl = target === document.activeElement ? null : document.activeElement;\n          target.dispatchEvent(new FocusEvent(\"blur\", {\n            relatedTarget: relatedTargetEl\n          }));\n          target.dispatchEvent(new FocusEvent(\"focusout\", {\n            bubbles: true,\n            relatedTarget: relatedTargetEl\n          }));\n        }\n      });\n      stateRef.current.observer.observe(target, {\n        attributes: true,\n        attributeFilter: [\n          \"disabled\"\n        ]\n      });\n    }\n  }, [\n    dispatchBlur\n  ]);\n}\nlet $8a9cb279dc87e130$export$fda7da73ab5d4c48 = false;\nlet $507fabe10e71c6fb$var$currentModality = null;\nlet $507fabe10e71c6fb$var$changeHandlers = /* @__PURE__ */ new Set();\nlet $507fabe10e71c6fb$export$d90243b58daecda7 = /* @__PURE__ */ new Map();\nlet $507fabe10e71c6fb$var$hasEventBeforeFocus = false;\nlet $507fabe10e71c6fb$var$hasBlurredWindowRecently = false;\nconst $507fabe10e71c6fb$var$FOCUS_VISIBLE_INPUT_KEYS = {\n  Tab: true,\n  Escape: true\n};\nfunction $507fabe10e71c6fb$var$triggerChangeHandlers(modality, e2) {\n  for (let handler of $507fabe10e71c6fb$var$changeHandlers) handler(modality, e2);\n}\nfunction $507fabe10e71c6fb$var$isValidKey(e2) {\n  return !(e2.metaKey || !$c87311424ea30a05$export$9ac100e40613ea10() && e2.altKey || e2.ctrlKey || e2.key === \"Control\" || e2.key === \"Shift\" || e2.key === \"Meta\");\n}\nfunction $507fabe10e71c6fb$var$handleKeyboardEvent(e2) {\n  $507fabe10e71c6fb$var$hasEventBeforeFocus = true;\n  if ($507fabe10e71c6fb$var$isValidKey(e2)) {\n    $507fabe10e71c6fb$var$currentModality = \"keyboard\";\n    $507fabe10e71c6fb$var$triggerChangeHandlers(\"keyboard\", e2);\n  }\n}\nfunction $507fabe10e71c6fb$var$handlePointerEvent(e2) {\n  $507fabe10e71c6fb$var$currentModality = \"pointer\";\n  if (e2.type === \"mousedown\" || e2.type === \"pointerdown\") {\n    $507fabe10e71c6fb$var$hasEventBeforeFocus = true;\n    $507fabe10e71c6fb$var$triggerChangeHandlers(\"pointer\", e2);\n  }\n}\nfunction $507fabe10e71c6fb$var$handleClickEvent(e2) {\n  if ($6a7db85432448f7f$export$60278871457622de(e2)) {\n    $507fabe10e71c6fb$var$hasEventBeforeFocus = true;\n    $507fabe10e71c6fb$var$currentModality = \"virtual\";\n  }\n}\nfunction $507fabe10e71c6fb$var$handleFocusEvent(e2) {\n  if (e2.target === window || e2.target === document || $8a9cb279dc87e130$export$fda7da73ab5d4c48 || !e2.isTrusted) return;\n  if (!$507fabe10e71c6fb$var$hasEventBeforeFocus && !$507fabe10e71c6fb$var$hasBlurredWindowRecently) {\n    $507fabe10e71c6fb$var$currentModality = \"virtual\";\n    $507fabe10e71c6fb$var$triggerChangeHandlers(\"virtual\", e2);\n  }\n  $507fabe10e71c6fb$var$hasEventBeforeFocus = false;\n  $507fabe10e71c6fb$var$hasBlurredWindowRecently = false;\n}\nfunction $507fabe10e71c6fb$var$handleWindowBlur() {\n  $507fabe10e71c6fb$var$hasEventBeforeFocus = false;\n  $507fabe10e71c6fb$var$hasBlurredWindowRecently = true;\n}\nfunction $507fabe10e71c6fb$var$setupGlobalFocusEvents(element) {\n  if (typeof window === \"undefined\" || $507fabe10e71c6fb$export$d90243b58daecda7.get($431fbd86ca7dc216$export$f21a1ffae260145a(element))) return;\n  const windowObject = $431fbd86ca7dc216$export$f21a1ffae260145a(element);\n  const documentObject = $431fbd86ca7dc216$export$b204af158042fbac(element);\n  let focus = windowObject.HTMLElement.prototype.focus;\n  windowObject.HTMLElement.prototype.focus = function() {\n    $507fabe10e71c6fb$var$hasEventBeforeFocus = true;\n    focus.apply(this, arguments);\n  };\n  documentObject.addEventListener(\"keydown\", $507fabe10e71c6fb$var$handleKeyboardEvent, true);\n  documentObject.addEventListener(\"keyup\", $507fabe10e71c6fb$var$handleKeyboardEvent, true);\n  documentObject.addEventListener(\"click\", $507fabe10e71c6fb$var$handleClickEvent, true);\n  windowObject.addEventListener(\"focus\", $507fabe10e71c6fb$var$handleFocusEvent, true);\n  windowObject.addEventListener(\"blur\", $507fabe10e71c6fb$var$handleWindowBlur, false);\n  if (typeof PointerEvent !== \"undefined\") {\n    documentObject.addEventListener(\"pointerdown\", $507fabe10e71c6fb$var$handlePointerEvent, true);\n    documentObject.addEventListener(\"pointermove\", $507fabe10e71c6fb$var$handlePointerEvent, true);\n    documentObject.addEventListener(\"pointerup\", $507fabe10e71c6fb$var$handlePointerEvent, true);\n  } else if (false) {}\n  windowObject.addEventListener(\"beforeunload\", () => {\n    $507fabe10e71c6fb$var$tearDownWindowFocusTracking(element);\n  }, {\n    once: true\n  });\n  $507fabe10e71c6fb$export$d90243b58daecda7.set(windowObject, {\n    focus\n  });\n}\nconst $507fabe10e71c6fb$var$tearDownWindowFocusTracking = (element, loadListener) => {\n  const windowObject = $431fbd86ca7dc216$export$f21a1ffae260145a(element);\n  const documentObject = $431fbd86ca7dc216$export$b204af158042fbac(element);\n  if (loadListener) documentObject.removeEventListener(\"DOMContentLoaded\", loadListener);\n  if (!$507fabe10e71c6fb$export$d90243b58daecda7.has(windowObject)) return;\n  windowObject.HTMLElement.prototype.focus = $507fabe10e71c6fb$export$d90243b58daecda7.get(windowObject).focus;\n  documentObject.removeEventListener(\"keydown\", $507fabe10e71c6fb$var$handleKeyboardEvent, true);\n  documentObject.removeEventListener(\"keyup\", $507fabe10e71c6fb$var$handleKeyboardEvent, true);\n  documentObject.removeEventListener(\"click\", $507fabe10e71c6fb$var$handleClickEvent, true);\n  windowObject.removeEventListener(\"focus\", $507fabe10e71c6fb$var$handleFocusEvent, true);\n  windowObject.removeEventListener(\"blur\", $507fabe10e71c6fb$var$handleWindowBlur, false);\n  if (typeof PointerEvent !== \"undefined\") {\n    documentObject.removeEventListener(\"pointerdown\", $507fabe10e71c6fb$var$handlePointerEvent, true);\n    documentObject.removeEventListener(\"pointermove\", $507fabe10e71c6fb$var$handlePointerEvent, true);\n    documentObject.removeEventListener(\"pointerup\", $507fabe10e71c6fb$var$handlePointerEvent, true);\n  } else if (false) {}\n  $507fabe10e71c6fb$export$d90243b58daecda7.delete(windowObject);\n};\nfunction $507fabe10e71c6fb$export$2f1888112f558a7d(element) {\n  const documentObject = $431fbd86ca7dc216$export$b204af158042fbac(element);\n  let loadListener;\n  if (documentObject.readyState !== \"loading\") $507fabe10e71c6fb$var$setupGlobalFocusEvents(element);\n  else {\n    loadListener = () => {\n      $507fabe10e71c6fb$var$setupGlobalFocusEvents(element);\n    };\n    documentObject.addEventListener(\"DOMContentLoaded\", loadListener);\n  }\n  return () => $507fabe10e71c6fb$var$tearDownWindowFocusTracking(element, loadListener);\n}\nif (typeof document !== \"undefined\") $507fabe10e71c6fb$export$2f1888112f558a7d();\nfunction $507fabe10e71c6fb$export$b9b3dfddab17db27() {\n  return $507fabe10e71c6fb$var$currentModality !== \"pointer\";\n}\nconst $507fabe10e71c6fb$var$nonTextInputTypes = /* @__PURE__ */ new Set([\n  \"checkbox\",\n  \"radio\",\n  \"range\",\n  \"color\",\n  \"file\",\n  \"image\",\n  \"button\",\n  \"submit\",\n  \"reset\"\n]);\nfunction $507fabe10e71c6fb$var$isKeyboardFocusEvent(isTextInput, modality, e2) {\n  let document1 = $431fbd86ca7dc216$export$b204af158042fbac(e2 === null || e2 === void 0 ? void 0 : e2.target);\n  const IHTMLInputElement = typeof window !== \"undefined\" ? $431fbd86ca7dc216$export$f21a1ffae260145a(e2 === null || e2 === void 0 ? void 0 : e2.target).HTMLInputElement : HTMLInputElement;\n  const IHTMLTextAreaElement = typeof window !== \"undefined\" ? $431fbd86ca7dc216$export$f21a1ffae260145a(e2 === null || e2 === void 0 ? void 0 : e2.target).HTMLTextAreaElement : HTMLTextAreaElement;\n  const IHTMLElement = typeof window !== \"undefined\" ? $431fbd86ca7dc216$export$f21a1ffae260145a(e2 === null || e2 === void 0 ? void 0 : e2.target).HTMLElement : HTMLElement;\n  const IKeyboardEvent = typeof window !== \"undefined\" ? $431fbd86ca7dc216$export$f21a1ffae260145a(e2 === null || e2 === void 0 ? void 0 : e2.target).KeyboardEvent : KeyboardEvent;\n  isTextInput = isTextInput || document1.activeElement instanceof IHTMLInputElement && !$507fabe10e71c6fb$var$nonTextInputTypes.has(document1.activeElement.type) || document1.activeElement instanceof IHTMLTextAreaElement || document1.activeElement instanceof IHTMLElement && document1.activeElement.isContentEditable;\n  return !(isTextInput && modality === \"keyboard\" && e2 instanceof IKeyboardEvent && !$507fabe10e71c6fb$var$FOCUS_VISIBLE_INPUT_KEYS[e2.key]);\n}\nfunction $507fabe10e71c6fb$export$ec71b4b83ac08ec3(fn2, deps, opts) {\n  $507fabe10e71c6fb$var$setupGlobalFocusEvents();\n  y$6(() => {\n    let handler = (modality, e2) => {\n      if (!$507fabe10e71c6fb$var$isKeyboardFocusEvent(!!(opts === null || opts === void 0 ? void 0 : opts.isTextInput), modality, e2)) return;\n      fn2($507fabe10e71c6fb$export$b9b3dfddab17db27());\n    };\n    $507fabe10e71c6fb$var$changeHandlers.add(handler);\n    return () => {\n      $507fabe10e71c6fb$var$changeHandlers.delete(handler);\n    };\n  }, deps);\n}\nfunction $a1ea59d68270f0dd$export$f8168d8dd8fd66e6(props) {\n  let { isDisabled, onFocus: onFocusProp, onBlur: onBlurProp, onFocusChange } = props;\n  const onBlur = q$3((e2) => {\n    if (e2.target === e2.currentTarget) {\n      if (onBlurProp) onBlurProp(e2);\n      if (onFocusChange) onFocusChange(false);\n      return true;\n    }\n  }, [\n    onBlurProp,\n    onFocusChange\n  ]);\n  const onSyntheticFocus = $8a9cb279dc87e130$export$715c682d09d639cc(onBlur);\n  const onFocus = q$3((e2) => {\n    const ownerDocument = $431fbd86ca7dc216$export$b204af158042fbac(e2.target);\n    const activeElement = ownerDocument ? $d4ee10de306f2510$export$cd4e5573fbe2b576(ownerDocument) : $d4ee10de306f2510$export$cd4e5573fbe2b576();\n    if (e2.target === e2.currentTarget && activeElement === $d4ee10de306f2510$export$e58f029f0fbfdb29(e2.nativeEvent)) {\n      if (onFocusProp) onFocusProp(e2);\n      if (onFocusChange) onFocusChange(true);\n      onSyntheticFocus(e2);\n    }\n  }, [\n    onFocusChange,\n    onFocusProp,\n    onSyntheticFocus\n  ]);\n  return {\n    focusProps: {\n      onFocus: !isDisabled && (onFocusProp || onFocusChange || onBlurProp) ? onFocus : void 0,\n      onBlur: !isDisabled && (onBlurProp || onFocusChange) ? onBlur : void 0\n    }\n  };\n}\nfunction $9ab94262bd0047c7$export$420e68273165f4ec(props) {\n  let { isDisabled, onBlurWithin, onFocusWithin, onFocusWithinChange } = props;\n  let state = A$3({\n    isFocusWithin: false\n  });\n  let { addGlobalListener, removeAllGlobalListeners } = $03deb23ff14920c4$export$4eaf04e54aa8eed6();\n  let onBlur = q$3((e2) => {\n    if (!e2.currentTarget.contains(e2.target)) return;\n    if (state.current.isFocusWithin && !e2.currentTarget.contains(e2.relatedTarget)) {\n      state.current.isFocusWithin = false;\n      removeAllGlobalListeners();\n      if (onBlurWithin) onBlurWithin(e2);\n      if (onFocusWithinChange) onFocusWithinChange(false);\n    }\n  }, [\n    onBlurWithin,\n    onFocusWithinChange,\n    state,\n    removeAllGlobalListeners\n  ]);\n  let onSyntheticFocus = $8a9cb279dc87e130$export$715c682d09d639cc(onBlur);\n  let onFocus = q$3((e2) => {\n    if (!e2.currentTarget.contains(e2.target)) return;\n    const ownerDocument = $431fbd86ca7dc216$export$b204af158042fbac(e2.target);\n    const activeElement = $d4ee10de306f2510$export$cd4e5573fbe2b576(ownerDocument);\n    if (!state.current.isFocusWithin && activeElement === $d4ee10de306f2510$export$e58f029f0fbfdb29(e2.nativeEvent)) {\n      if (onFocusWithin) onFocusWithin(e2);\n      if (onFocusWithinChange) onFocusWithinChange(true);\n      state.current.isFocusWithin = true;\n      onSyntheticFocus(e2);\n      let currentTarget = e2.currentTarget;\n      addGlobalListener(ownerDocument, \"focus\", (e3) => {\n        if (state.current.isFocusWithin && !$d4ee10de306f2510$export$4282f70798064fe0(currentTarget, e3.target)) {\n          let nativeEvent = new ownerDocument.defaultView.FocusEvent(\"blur\", {\n            relatedTarget: e3.target\n          });\n          $8a9cb279dc87e130$export$c2b7abe5d61ec696(nativeEvent, currentTarget);\n          let event = $8a9cb279dc87e130$export$525bc4921d56d4a(nativeEvent);\n          onBlur(event);\n        }\n      }, {\n        capture: true\n      });\n    }\n  }, [\n    onFocusWithin,\n    onFocusWithinChange,\n    onSyntheticFocus,\n    addGlobalListener,\n    onBlur\n  ]);\n  if (isDisabled) return {\n    focusWithinProps: {\n      // These cannot be null, that would conflict in mergeProps\n      onFocus: void 0,\n      onBlur: void 0\n    }\n  };\n  return {\n    focusWithinProps: {\n      onFocus,\n      onBlur\n    }\n  };\n}\nlet $6179b936705e76d3$var$globalIgnoreEmulatedMouseEvents = false;\nlet $6179b936705e76d3$var$hoverCount = 0;\nfunction $6179b936705e76d3$var$setGlobalIgnoreEmulatedMouseEvents() {\n  $6179b936705e76d3$var$globalIgnoreEmulatedMouseEvents = true;\n  setTimeout(() => {\n    $6179b936705e76d3$var$globalIgnoreEmulatedMouseEvents = false;\n  }, 50);\n}\nfunction $6179b936705e76d3$var$handleGlobalPointerEvent(e2) {\n  if (e2.pointerType === \"touch\") $6179b936705e76d3$var$setGlobalIgnoreEmulatedMouseEvents();\n}\nfunction $6179b936705e76d3$var$setupGlobalTouchEvents() {\n  if (typeof document === \"undefined\") return;\n  if (typeof PointerEvent !== \"undefined\") document.addEventListener(\"pointerup\", $6179b936705e76d3$var$handleGlobalPointerEvent);\n  else if (false) {}\n  $6179b936705e76d3$var$hoverCount++;\n  return () => {\n    $6179b936705e76d3$var$hoverCount--;\n    if ($6179b936705e76d3$var$hoverCount > 0) return;\n    if (typeof PointerEvent !== \"undefined\") document.removeEventListener(\"pointerup\", $6179b936705e76d3$var$handleGlobalPointerEvent);\n    else if (false) {}\n  };\n}\nfunction $6179b936705e76d3$export$ae780daf29e6d456(props) {\n  let { onHoverStart, onHoverChange, onHoverEnd, isDisabled } = props;\n  let [isHovered, setHovered] = d$4(false);\n  let state = A$3({\n    isHovered: false,\n    ignoreEmulatedMouseEvents: false,\n    pointerType: \"\",\n    target: null\n  }).current;\n  y$6($6179b936705e76d3$var$setupGlobalTouchEvents, []);\n  let { addGlobalListener, removeAllGlobalListeners } = $03deb23ff14920c4$export$4eaf04e54aa8eed6();\n  let { hoverProps, triggerHoverEnd } = T$5(() => {\n    let triggerHoverStart = (event, pointerType) => {\n      state.pointerType = pointerType;\n      if (isDisabled || pointerType === \"touch\" || state.isHovered || !event.currentTarget.contains(event.target)) return;\n      state.isHovered = true;\n      let target = event.currentTarget;\n      state.target = target;\n      addGlobalListener($431fbd86ca7dc216$export$b204af158042fbac(event.target), \"pointerover\", (e2) => {\n        if (state.isHovered && state.target && !$d4ee10de306f2510$export$4282f70798064fe0(state.target, e2.target)) triggerHoverEnd2(e2, e2.pointerType);\n      }, {\n        capture: true\n      });\n      if (onHoverStart) onHoverStart({\n        type: \"hoverstart\",\n        target,\n        pointerType\n      });\n      if (onHoverChange) onHoverChange(true);\n      setHovered(true);\n    };\n    let triggerHoverEnd2 = (event, pointerType) => {\n      let target = state.target;\n      state.pointerType = \"\";\n      state.target = null;\n      if (pointerType === \"touch\" || !state.isHovered || !target) return;\n      state.isHovered = false;\n      removeAllGlobalListeners();\n      if (onHoverEnd) onHoverEnd({\n        type: \"hoverend\",\n        target,\n        pointerType\n      });\n      if (onHoverChange) onHoverChange(false);\n      setHovered(false);\n    };\n    let hoverProps2 = {};\n    if (typeof PointerEvent !== \"undefined\") {\n      hoverProps2.onPointerEnter = (e2) => {\n        if ($6179b936705e76d3$var$globalIgnoreEmulatedMouseEvents && e2.pointerType === \"mouse\") return;\n        triggerHoverStart(e2, e2.pointerType);\n      };\n      hoverProps2.onPointerLeave = (e2) => {\n        if (!isDisabled && e2.currentTarget.contains(e2.target)) triggerHoverEnd2(e2, e2.pointerType);\n      };\n    } else if (false) {}\n    return {\n      hoverProps: hoverProps2,\n      triggerHoverEnd: triggerHoverEnd2\n    };\n  }, [\n    onHoverStart,\n    onHoverChange,\n    onHoverEnd,\n    isDisabled,\n    state,\n    addGlobalListener,\n    removeAllGlobalListeners\n  ]);\n  y$6(() => {\n    if (isDisabled) triggerHoverEnd({\n      currentTarget: state.target\n    }, state.pointerType);\n  }, [\n    isDisabled\n  ]);\n  return {\n    hoverProps,\n    isHovered\n  };\n}\nfunction $f7dceffc5ad7768b$export$4e328f61c538687f(props = {}) {\n  let { autoFocus = false, isTextInput, within } = props;\n  let state = A$3({\n    isFocused: false,\n    isFocusVisible: autoFocus || $507fabe10e71c6fb$export$b9b3dfddab17db27()\n  });\n  let [isFocused, setFocused] = d$4(false);\n  let [isFocusVisibleState, setFocusVisible] = d$4(() => state.current.isFocused && state.current.isFocusVisible);\n  let updateState = q$3(() => setFocusVisible(state.current.isFocused && state.current.isFocusVisible), []);\n  let onFocusChange = q$3((isFocused2) => {\n    state.current.isFocused = isFocused2;\n    setFocused(isFocused2);\n    updateState();\n  }, [\n    updateState\n  ]);\n  $507fabe10e71c6fb$export$ec71b4b83ac08ec3((isFocusVisible) => {\n    state.current.isFocusVisible = isFocusVisible;\n    updateState();\n  }, [], {\n    isTextInput\n  });\n  let { focusProps } = $a1ea59d68270f0dd$export$f8168d8dd8fd66e6({\n    isDisabled: within,\n    onFocusChange\n  });\n  let { focusWithinProps } = $9ab94262bd0047c7$export$420e68273165f4ec({\n    isDisabled: !within,\n    onFocusWithinChange: onFocusChange\n  });\n  return {\n    isFocused,\n    isFocusVisible: isFocusVisibleState,\n    focusProps: within ? focusWithinProps : focusProps\n  };\n}\nvar i$6 = Object.defineProperty;\nvar d$3 = (t2, e2, n2) => e2 in t2 ? i$6(t2, e2, { enumerable: true, configurable: true, writable: true, value: n2 }) : t2[e2] = n2;\nvar r$2 = (t2, e2, n2) => (d$3(t2, typeof e2 != \"symbol\" ? e2 + \"\" : e2, n2), n2);\nlet o$7 = class o {\n  constructor() {\n    r$2(this, \"current\", this.detect());\n    r$2(this, \"handoffState\", \"pending\");\n    r$2(this, \"currentId\", 0);\n  }\n  set(e2) {\n    this.current !== e2 && (this.handoffState = \"pending\", this.currentId = 0, this.current = e2);\n  }\n  reset() {\n    this.set(this.detect());\n  }\n  nextId() {\n    return ++this.currentId;\n  }\n  get isServer() {\n    return this.current === \"server\";\n  }\n  get isClient() {\n    return this.current === \"client\";\n  }\n  detect() {\n    return typeof window == \"undefined\" || typeof document == \"undefined\" ? \"server\" : \"client\";\n  }\n  handoff() {\n    this.handoffState === \"pending\" && (this.handoffState = \"complete\");\n  }\n  get isHandoffComplete() {\n    return this.handoffState === \"complete\";\n  }\n};\nlet s$7 = new o$7();\nfunction o$6(n2) {\n  var e2, r2;\n  return s$7.isServer ? null : n2 ? \"ownerDocument\" in n2 ? n2.ownerDocument : \"current\" in n2 ? (r2 = (e2 = n2.current) == null ? void 0 : e2.ownerDocument) != null ? r2 : document : null : document;\n}\nfunction t$3(e2) {\n  typeof queueMicrotask == \"function\" ? queueMicrotask(e2) : Promise.resolve().then(e2).catch((o3) => setTimeout(() => {\n    throw o3;\n  }));\n}\nfunction o$5() {\n  let n2 = [], r2 = { addEventListener(e2, t2, s2, a3) {\n    return e2.addEventListener(t2, s2, a3), r2.add(() => e2.removeEventListener(t2, s2, a3));\n  }, requestAnimationFrame(...e2) {\n    let t2 = requestAnimationFrame(...e2);\n    return r2.add(() => cancelAnimationFrame(t2));\n  }, nextFrame(...e2) {\n    return r2.requestAnimationFrame(() => r2.requestAnimationFrame(...e2));\n  }, setTimeout(...e2) {\n    let t2 = setTimeout(...e2);\n    return r2.add(() => clearTimeout(t2));\n  }, microTask(...e2) {\n    let t2 = { current: true };\n    return t$3(() => {\n      t2.current && e2[0]();\n    }), r2.add(() => {\n      t2.current = false;\n    });\n  }, style(e2, t2, s2) {\n    let a3 = e2.style.getPropertyValue(t2);\n    return Object.assign(e2.style, { [t2]: s2 }), this.add(() => {\n      Object.assign(e2.style, { [t2]: a3 });\n    });\n  }, group(e2) {\n    let t2 = o$5();\n    return e2(t2), this.add(() => t2.dispose());\n  }, add(e2) {\n    return n2.includes(e2) || n2.push(e2), () => {\n      let t2 = n2.indexOf(e2);\n      if (t2 >= 0) for (let s2 of n2.splice(t2, 1)) s2();\n    };\n  }, dispose() {\n    for (let e2 of n2.splice(0)) e2();\n  } };\n  return r2;\n}\nfunction p$2() {\n  let [e2] = d$4(o$5);\n  return y$6(() => () => e2.dispose(), [e2]), e2;\n}\nlet n$3 = (e2, t2) => {\n  s$7.isServer ? y$6(e2, t2) : _$3(e2, t2);\n};\nfunction s$6(e2) {\n  let r2 = A$3(e2);\n  return n$3(() => {\n    r2.current = e2;\n  }, [e2]), r2;\n}\nlet o$4 = function(t2) {\n  let e2 = s$6(t2);\n  return Rn.useCallback((...r2) => e2.current(...r2), [e2]);\n};\nfunction E$1(e2) {\n  let t2 = e2.width / 2, n2 = e2.height / 2;\n  return { top: e2.clientY - n2, right: e2.clientX + t2, bottom: e2.clientY + n2, left: e2.clientX - t2 };\n}\nfunction P$3(e2, t2) {\n  return !(!e2 || !t2 || e2.right < t2.left || e2.left > t2.right || e2.bottom < t2.top || e2.top > t2.bottom);\n}\nfunction w$2({ disabled: e2 = false } = {}) {\n  let t2 = A$3(null), [n2, l2] = d$4(false), r2 = p$2(), o3 = o$4(() => {\n    t2.current = null, l2(false), r2.dispose();\n  }), f2 = o$4((s2) => {\n    if (r2.dispose(), t2.current === null) {\n      t2.current = s2.currentTarget, l2(true);\n      {\n        let i2 = o$6(s2.currentTarget);\n        r2.addEventListener(i2, \"pointerup\", o3, false), r2.addEventListener(i2, \"pointermove\", (c2) => {\n          if (t2.current) {\n            let p2 = E$1(c2);\n            l2(P$3(p2, t2.current.getBoundingClientRect()));\n          }\n        }, false), r2.addEventListener(i2, \"pointercancel\", o3, false);\n      }\n    }\n  });\n  return { pressed: n2, pressProps: e2 ? {} : { onPointerDown: f2, onPointerUp: o3, onClick: o3 } };\n}\nlet e$3 = K$3(void 0);\nfunction a$9() {\n  return x$4(e$3);\n}\nfunction t$2(...r2) {\n  return Array.from(new Set(r2.flatMap((n2) => typeof n2 == \"string\" ? n2.split(\" \") : []))).filter(Boolean).join(\" \");\n}\nfunction u$7(r2, n2, ...a3) {\n  if (r2 in n2) {\n    let e2 = n2[r2];\n    return typeof e2 == \"function\" ? e2(...a3) : e2;\n  }\n  let t2 = new Error(`Tried to handle \"${r2}\" but there is no handler defined. Only defined handlers are: ${Object.keys(n2).map((e2) => `\"${e2}\"`).join(\", \")}.`);\n  throw Error.captureStackTrace && Error.captureStackTrace(t2, u$7), t2;\n}\nvar O$1 = ((a3) => (a3[a3.None = 0] = \"None\", a3[a3.RenderStrategy = 1] = \"RenderStrategy\", a3[a3.Static = 2] = \"Static\", a3))(O$1 || {}), A$1 = ((e2) => (e2[e2.Unmount = 0] = \"Unmount\", e2[e2.Hidden = 1] = \"Hidden\", e2))(A$1 || {});\nfunction L$2() {\n  let n2 = U$2();\n  return q$3((r2) => C$2({ mergeRefs: n2, ...r2 }), [n2]);\n}\nfunction C$2({ ourProps: n2, theirProps: r2, slot: e2, defaultTag: a3, features: s2, visible: t2 = true, name: l2, mergeRefs: i2 }) {\n  i2 = i2 != null ? i2 : $;\n  let o3 = P$2(r2, n2);\n  if (t2) return F$3(o3, e2, a3, l2, i2);\n  let y2 = s2 != null ? s2 : 0;\n  if (y2 & 2) {\n    let { static: f2 = false, ...u2 } = o3;\n    if (f2) return F$3(u2, e2, a3, l2, i2);\n  }\n  if (y2 & 1) {\n    let { unmount: f2 = true, ...u2 } = o3;\n    return u$7(f2 ? 0 : 1, { [0]() {\n      return null;\n    }, [1]() {\n      return F$3({ ...u2, hidden: true, style: { display: \"none\" } }, e2, a3, l2, i2);\n    } });\n  }\n  return F$3(o3, e2, a3, l2, i2);\n}\nfunction F$3(n2, r2 = {}, e2, a3, s2) {\n  let { as: t2 = e2, children: l2, refName: i2 = \"ref\", ...o3 } = h$4(n2, [\"unmount\", \"static\"]), y2 = n2.ref !== void 0 ? { [i2]: n2.ref } : {}, f2 = typeof l2 == \"function\" ? l2(r2) : l2;\n  \"className\" in o3 && o3.className && typeof o3.className == \"function\" && (o3.className = o3.className(r2)), o3[\"aria-labelledby\"] && o3[\"aria-labelledby\"] === o3.id && (o3[\"aria-labelledby\"] = void 0);\n  let u2 = {};\n  if (r2) {\n    let d2 = false, p2 = [];\n    for (let [c2, T2] of Object.entries(r2)) typeof T2 == \"boolean\" && (d2 = true), T2 === true && p2.push(c2.replace(/([A-Z])/g, (g2) => `-${g2.toLowerCase()}`));\n    if (d2) {\n      u2[\"data-headlessui-state\"] = p2.join(\" \");\n      for (let c2 of p2) u2[`data-${c2}`] = \"\";\n    }\n  }\n  if (t2 === k$3 && (Object.keys(m$4(o3)).length > 0 || Object.keys(m$4(u2)).length > 0)) if (!mn(f2) || Array.isArray(f2) && f2.length > 1) {\n    if (Object.keys(m$4(o3)).length > 0) throw new Error(['Passing props on \"Fragment\"!', \"\", `The current component <${a3} /> is rendering a \"Fragment\".`, \"However we need to passthrough the following props:\", Object.keys(m$4(o3)).concat(Object.keys(m$4(u2))).map((d2) => `  - ${d2}`).join(`\n`), \"\", \"You can apply a few solutions:\", ['Add an `as=\"...\"` prop, to ensure that we render an actual element instead of a \"Fragment\".', \"Render a single element as the child so that we can forward the props onto that element.\"].map((d2) => `  - ${d2}`).join(`\n`)].join(`\n`));\n  } else {\n    let d2 = f2.props, p2 = d2 == null ? void 0 : d2.className, c2 = typeof p2 == \"function\" ? (...R2) => t$2(p2(...R2), o3.className) : t$2(p2, o3.className), T2 = c2 ? { className: c2 } : {}, g2 = P$2(f2.props, m$4(h$4(o3, [\"ref\"])));\n    for (let R2 in u2) R2 in g2 && delete u2[R2];\n    return _n(f2, Object.assign({}, g2, u2, y2, { ref: s2(H$4(f2), y2.ref) }, T2));\n  }\n  return _$4(t2, Object.assign({}, h$4(o3, [\"ref\"]), t2 !== k$3 && y2, t2 !== k$3 && u2), f2);\n}\nfunction U$2() {\n  let n2 = A$3([]), r2 = q$3((e2) => {\n    for (let a3 of n2.current) a3 != null && (typeof a3 == \"function\" ? a3(e2) : a3.current = e2);\n  }, []);\n  return (...e2) => {\n    if (!e2.every((a3) => a3 == null)) return n2.current = e2, r2;\n  };\n}\nfunction $(...n2) {\n  return n2.every((r2) => r2 == null) ? void 0 : (r2) => {\n    for (let e2 of n2) e2 != null && (typeof e2 == \"function\" ? e2(r2) : e2.current = r2);\n  };\n}\nfunction P$2(...n2) {\n  if (n2.length === 0) return {};\n  if (n2.length === 1) return n2[0];\n  let r2 = {}, e2 = {};\n  for (let s2 of n2) for (let t2 in s2) t2.startsWith(\"on\") && typeof s2[t2] == \"function\" ? (e2[t2] != null || (e2[t2] = []), e2[t2].push(s2[t2])) : r2[t2] = s2[t2];\n  if (r2.disabled || r2[\"aria-disabled\"]) for (let s2 in e2) /^(on(?:Click|Pointer|Mouse|Key)(?:Down|Up|Press)?)$/.test(s2) && (e2[s2] = [(t2) => {\n    var l2;\n    return (l2 = t2 == null ? void 0 : t2.preventDefault) == null ? void 0 : l2.call(t2);\n  }]);\n  for (let s2 in e2) Object.assign(r2, { [s2](t2, ...l2) {\n    let i2 = e2[s2];\n    for (let o3 of i2) {\n      if ((t2 instanceof Event || (t2 == null ? void 0 : t2.nativeEvent) instanceof Event) && t2.defaultPrevented) return;\n      o3(t2, ...l2);\n    }\n  } });\n  return r2;\n}\nfunction _$2(...n2) {\n  if (n2.length === 0) return {};\n  if (n2.length === 1) return n2[0];\n  let r2 = {}, e2 = {};\n  for (let s2 of n2) for (let t2 in s2) t2.startsWith(\"on\") && typeof s2[t2] == \"function\" ? (e2[t2] != null || (e2[t2] = []), e2[t2].push(s2[t2])) : r2[t2] = s2[t2];\n  for (let s2 in e2) Object.assign(r2, { [s2](...t2) {\n    let l2 = e2[s2];\n    for (let i2 of l2) i2 == null || i2(...t2);\n  } });\n  return r2;\n}\nfunction K$1(n2) {\n  var r2;\n  return Object.assign(D$1(n2), { displayName: (r2 = n2.displayName) != null ? r2 : n2.name });\n}\nfunction m$4(n2) {\n  let r2 = Object.assign({}, n2);\n  for (let e2 in r2) r2[e2] === void 0 && delete r2[e2];\n  return r2;\n}\nfunction h$4(n2, r2 = []) {\n  let e2 = Object.assign({}, n2);\n  for (let a3 of r2) a3 in e2 && delete e2[a3];\n  return e2;\n}\nfunction H$4(n2) {\n  return Rn.version.split(\".\")[0] >= \"19\" ? n2.props.ref : n2.ref;\n}\nlet R$2 = \"button\";\nfunction v$1(a3, u2) {\n  var p2;\n  let l2 = a$9(), { disabled: e2 = l2 || false, autoFocus: t2 = false, ...o3 } = a3, { isFocusVisible: r2, focusProps: i2 } = $f7dceffc5ad7768b$export$4e328f61c538687f({ autoFocus: t2 }), { isHovered: s2, hoverProps: T2 } = $6179b936705e76d3$export$ae780daf29e6d456({ isDisabled: e2 }), { pressed: n2, pressProps: d2 } = w$2({ disabled: e2 }), f2 = _$2({ ref: u2, type: (p2 = o3.type) != null ? p2 : \"button\", disabled: e2 || void 0, autoFocus: t2 }, i2, T2, d2), m2 = T$5(() => ({ disabled: e2, hover: s2, focus: r2, active: n2, autofocus: t2 }), [e2, s2, r2, n2, t2]);\n  return L$2()({ ourProps: f2, theirProps: o3, slot: m2, defaultTag: R$2, name: \"Button\" });\n}\nlet H$3 = K$1(v$1);\nlet e$2 = K$3(void 0);\nfunction u$6() {\n  return x$4(e$2);\n}\nfunction r$1(n2) {\n  let e2 = n2.parentElement, l2 = null;\n  for (; e2 && !(e2 instanceof HTMLFieldSetElement); ) e2 instanceof HTMLLegendElement && (l2 = e2), e2 = e2.parentElement;\n  let t2 = (e2 == null ? void 0 : e2.getAttribute(\"disabled\")) === \"\";\n  return t2 && i$5(l2) ? false : t2;\n}\nfunction i$5(n2) {\n  if (!n2) return false;\n  let e2 = n2.previousElementSibling;\n  for (; e2 !== null; ) {\n    if (e2 instanceof HTMLLegendElement) return false;\n    e2 = e2.previousElementSibling;\n  }\n  return true;\n}\nlet u$5 = Symbol();\nfunction T$3(t2, n2 = true) {\n  return Object.assign(t2, { [u$5]: n2 });\n}\nfunction y$5(...t2) {\n  let n2 = A$3(t2);\n  y$6(() => {\n    n2.current = t2;\n  }, [t2]);\n  let c2 = o$4((e2) => {\n    for (let o3 of n2.current) o3 != null && (typeof o3 == \"function\" ? o3(e2) : o3.current = e2);\n  });\n  return t2.every((e2) => e2 == null || (e2 == null ? void 0 : e2[u$5])) ? void 0 : c2;\n}\nlet a$8 = K$3(null);\na$8.displayName = \"DescriptionContext\";\nfunction f$6() {\n  let r2 = x$4(a$8);\n  if (r2 === null) {\n    let e2 = new Error(\"You used a <Description /> component, but it is not inside a relevant parent.\");\n    throw Error.captureStackTrace && Error.captureStackTrace(e2, f$6), e2;\n  }\n  return r2;\n}\nfunction U$1() {\n  var r2, e2;\n  return (e2 = (r2 = x$4(a$8)) == null ? void 0 : r2.value) != null ? e2 : void 0;\n}\nfunction w$1() {\n  let [r2, e2] = d$4([]);\n  return [r2.length > 0 ? r2.join(\" \") : void 0, T$5(() => function(t2) {\n    let i2 = o$4((n2) => (e2((s2) => [...s2, n2]), () => e2((s2) => {\n      let o3 = s2.slice(), p2 = o3.indexOf(n2);\n      return p2 !== -1 && o3.splice(p2, 1), o3;\n    }))), l2 = T$5(() => ({ register: i2, slot: t2.slot, name: t2.name, props: t2.props, value: t2.value }), [i2, t2.slot, t2.name, t2.props, t2.value]);\n    return Rn.createElement(a$8.Provider, { value: l2 }, t2.children);\n  }, [e2])];\n}\nlet S$4 = \"p\";\nfunction C$1(r2, e2) {\n  let d2 = g$3(), t2 = a$9(), { id: i2 = `headlessui-description-${d2}`, ...l2 } = r2, n2 = f$6(), s2 = y$5(e2);\n  n$3(() => n2.register(i2), [i2, n2.register]);\n  let o3 = t2 || false, p2 = T$5(() => ({ ...n2.slot, disabled: o3 }), [n2.slot, o3]), D2 = { ref: s2, ...n2.props, id: i2 };\n  return L$2()({ ourProps: D2, theirProps: l2, slot: p2, defaultTag: S$4, name: n2.name || \"Description\" });\n}\nlet _$1 = K$1(C$1);\nObject.assign(_$1, {});\nvar o$3 = ((r2) => (r2.Space = \" \", r2.Enter = \"Enter\", r2.Escape = \"Escape\", r2.Backspace = \"Backspace\", r2.Delete = \"Delete\", r2.ArrowLeft = \"ArrowLeft\", r2.ArrowUp = \"ArrowUp\", r2.ArrowRight = \"ArrowRight\", r2.ArrowDown = \"ArrowDown\", r2.Home = \"Home\", r2.End = \"End\", r2.PageUp = \"PageUp\", r2.PageDown = \"PageDown\", r2.Tab = \"Tab\", r2))(o$3 || {});\nlet c$5 = K$3(null);\nc$5.displayName = \"LabelContext\";\nfunction P$1() {\n  let r2 = x$4(c$5);\n  if (r2 === null) {\n    let l2 = new Error(\"You used a <Label /> component, but it is not inside a relevant parent.\");\n    throw Error.captureStackTrace && Error.captureStackTrace(l2, P$1), l2;\n  }\n  return r2;\n}\nfunction I$2(r2) {\n  var a3, e2, o3;\n  let l2 = (e2 = (a3 = x$4(c$5)) == null ? void 0 : a3.value) != null ? e2 : void 0;\n  return ((o3 = void 0) != null ? o3 : 0) > 0 ? [l2, ...r2].filter(Boolean).join(\" \") : l2;\n}\nfunction K({ inherit: r2 = false } = {}) {\n  let l2 = I$2(), [a3, e2] = d$4([]), o3 = r2 ? [l2, ...a3].filter(Boolean) : a3;\n  return [o3.length > 0 ? o3.join(\" \") : void 0, T$5(() => function(t2) {\n    let s2 = o$4((i2) => (e2((p2) => [...p2, i2]), () => e2((p2) => {\n      let u2 = p2.slice(), d2 = u2.indexOf(i2);\n      return d2 !== -1 && u2.splice(d2, 1), u2;\n    }))), m2 = T$5(() => ({ register: s2, slot: t2.slot, name: t2.name, props: t2.props, value: t2.value }), [s2, t2.slot, t2.name, t2.props, t2.value]);\n    return Rn.createElement(c$5.Provider, { value: m2 }, t2.children);\n  }, [e2])];\n}\nlet N = \"label\";\nfunction G$1(r2, l2) {\n  var y2;\n  let a3 = g$3(), e2 = P$1(), o3 = u$6(), g2 = a$9(), { id: t2 = `headlessui-label-${a3}`, htmlFor: s2 = o3 != null ? o3 : (y2 = e2.props) == null ? void 0 : y2.htmlFor, passive: m2 = false, ...i2 } = r2, p2 = y$5(l2);\n  n$3(() => e2.register(t2), [t2, e2.register]);\n  let u2 = o$4((L2) => {\n    let b2 = L2.currentTarget;\n    if (b2 instanceof HTMLLabelElement && L2.preventDefault(), e2.props && \"onClick\" in e2.props && typeof e2.props.onClick == \"function\" && e2.props.onClick(L2), b2 instanceof HTMLLabelElement) {\n      let n2 = document.getElementById(b2.htmlFor);\n      if (n2) {\n        let E2 = n2.getAttribute(\"disabled\");\n        if (E2 === \"true\" || E2 === \"\") return;\n        let x2 = n2.getAttribute(\"aria-disabled\");\n        if (x2 === \"true\" || x2 === \"\") return;\n        (n2 instanceof HTMLInputElement && (n2.type === \"radio\" || n2.type === \"checkbox\") || n2.role === \"radio\" || n2.role === \"checkbox\" || n2.role === \"switch\") && n2.click(), n2.focus({ preventScroll: true });\n      }\n    }\n  }), d2 = g2 || false, C2 = T$5(() => ({ ...e2.slot, disabled: d2 }), [e2.slot, d2]), f2 = { ref: p2, ...e2.props, id: t2, htmlFor: s2, onClick: u2 };\n  return m2 && (\"onClick\" in f2 && (delete f2.htmlFor, delete f2.onClick), \"onClick\" in i2 && delete i2.onClick), L$2()({ ourProps: f2, theirProps: i2, slot: C2, defaultTag: s2 ? N : \"div\", name: e2.name || \"Label\" });\n}\nlet U = K$1(G$1);\nObject.assign(U, {});\nfunction f$5(e2) {\n  if (e2 === null) return { width: 0, height: 0 };\n  let { width: t2, height: r2 } = e2.getBoundingClientRect();\n  return { width: t2, height: r2 };\n}\nfunction d$2(e2, t2 = false) {\n  let [r2, u2] = h$5(() => ({}), {}), i2 = T$5(() => f$5(e2), [e2, r2]);\n  return n$3(() => {\n    if (!e2) return;\n    let n2 = new ResizeObserver(u2);\n    return n2.observe(e2), () => {\n      n2.disconnect();\n    };\n  }, [e2]), t2 ? { width: `${i2.width}px`, height: `${i2.height}px` } : i2;\n}\nlet a$7 = class a extends Map {\n  constructor(t2) {\n    super();\n    this.factory = t2;\n  }\n  get(t2) {\n    let e2 = super.get(t2);\n    return e2 === void 0 && (e2 = this.factory(t2), this.set(t2, e2)), e2;\n  }\n};\nfunction a$6(o3, r2) {\n  let t2 = o3(), n2 = /* @__PURE__ */ new Set();\n  return { getSnapshot() {\n    return t2;\n  }, subscribe(e2) {\n    return n2.add(e2), () => n2.delete(e2);\n  }, dispatch(e2, ...s2) {\n    let i2 = r2[e2].call(t2, ...s2);\n    i2 && (t2 = i2, n2.forEach((c2) => c2()));\n  } };\n}\nfunction o$2(t2) {\n  return C$3(t2.subscribe, t2.getSnapshot, t2.getSnapshot);\n}\nlet p$1 = new a$7(() => a$6(() => [], { ADD(r2) {\n  return this.includes(r2) ? this : [...this, r2];\n}, REMOVE(r2) {\n  let e2 = this.indexOf(r2);\n  if (e2 === -1) return this;\n  let t2 = this.slice();\n  return t2.splice(e2, 1), t2;\n} }));\nfunction x$2(r2, e2) {\n  let t2 = p$1.get(e2), i2 = g$3(), h2 = o$2(t2);\n  if (n$3(() => {\n    if (r2) return t2.dispatch(\"ADD\", i2), () => t2.dispatch(\"REMOVE\", i2);\n  }, [t2, r2]), !r2) return false;\n  let s2 = h2.indexOf(i2), o3 = h2.length;\n  return s2 === -1 && (s2 = o3, o3 += 1), s2 === o3 - 1;\n}\nlet f$4 = /* @__PURE__ */ new Map(), u$4 = /* @__PURE__ */ new Map();\nfunction h$3(t2) {\n  var e2;\n  let r2 = (e2 = u$4.get(t2)) != null ? e2 : 0;\n  return u$4.set(t2, r2 + 1), r2 !== 0 ? () => m$3(t2) : (f$4.set(t2, { \"aria-hidden\": t2.getAttribute(\"aria-hidden\"), inert: t2.inert }), t2.setAttribute(\"aria-hidden\", \"true\"), t2.inert = true, () => m$3(t2));\n}\nfunction m$3(t2) {\n  var i2;\n  let r2 = (i2 = u$4.get(t2)) != null ? i2 : 1;\n  if (r2 === 1 ? u$4.delete(t2) : u$4.set(t2, r2 - 1), r2 !== 1) return;\n  let e2 = f$4.get(t2);\n  e2 && (e2[\"aria-hidden\"] === null ? t2.removeAttribute(\"aria-hidden\") : t2.setAttribute(\"aria-hidden\", e2[\"aria-hidden\"]), t2.inert = e2.inert, f$4.delete(t2));\n}\nfunction y$4(t2, { allowed: r2, disallowed: e2 } = {}) {\n  let i2 = x$2(t2, \"inert-others\");\n  n$3(() => {\n    var d2, c2;\n    if (!i2) return;\n    let a3 = o$5();\n    for (let n2 of (d2 = e2 == null ? void 0 : e2()) != null ? d2 : []) n2 && a3.add(h$3(n2));\n    let s2 = (c2 = r2 == null ? void 0 : r2()) != null ? c2 : [];\n    for (let n2 of s2) {\n      if (!n2) continue;\n      let l2 = o$6(n2);\n      if (!l2) continue;\n      let o3 = n2.parentElement;\n      for (; o3 && o3 !== l2.body; ) {\n        for (let p2 of o3.children) s2.some((E2) => p2.contains(E2)) || a3.add(h$3(p2));\n        o3 = o3.parentElement;\n      }\n    }\n    return a3.dispose;\n  }, [i2, r2, e2]);\n}\nfunction m$2(s2, n2, l2) {\n  let i2 = s$6((t2) => {\n    let e2 = t2.getBoundingClientRect();\n    e2.x === 0 && e2.y === 0 && e2.width === 0 && e2.height === 0 && l2();\n  });\n  y$6(() => {\n    if (!s2) return;\n    let t2 = n2 === null ? null : n2 instanceof HTMLElement ? n2 : n2.current;\n    if (!t2) return;\n    let e2 = o$5();\n    if (typeof ResizeObserver != \"undefined\") {\n      let r2 = new ResizeObserver(() => i2.current(t2));\n      r2.observe(t2), e2.add(() => r2.disconnect());\n    }\n    if (typeof IntersectionObserver != \"undefined\") {\n      let r2 = new IntersectionObserver(() => i2.current(t2));\n      r2.observe(t2), e2.add(() => r2.disconnect());\n    }\n    return () => e2.dispose();\n  }, [n2, i2, s2]);\n}\nlet f$3 = [\"[contentEditable=true]\", \"[tabindex]\", \"a[href]\", \"area[href]\", \"button:not([disabled])\", \"iframe\", \"input:not([disabled])\", \"select:not([disabled])\", \"textarea:not([disabled])\"].map((e2) => `${e2}:not([tabindex='-1'])`).join(\",\"), p = [\"[data-autofocus]\"].map((e2) => `${e2}:not([tabindex='-1'])`).join(\",\");\nvar F$2 = ((n2) => (n2[n2.First = 1] = \"First\", n2[n2.Previous = 2] = \"Previous\", n2[n2.Next = 4] = \"Next\", n2[n2.Last = 8] = \"Last\", n2[n2.WrapAround = 16] = \"WrapAround\", n2[n2.NoScroll = 32] = \"NoScroll\", n2[n2.AutoFocus = 64] = \"AutoFocus\", n2))(F$2 || {}), T$2 = ((o3) => (o3[o3.Error = 0] = \"Error\", o3[o3.Overflow = 1] = \"Overflow\", o3[o3.Success = 2] = \"Success\", o3[o3.Underflow = 3] = \"Underflow\", o3))(T$2 || {}), y$3 = ((t2) => (t2[t2.Previous = -1] = \"Previous\", t2[t2.Next = 1] = \"Next\", t2))(y$3 || {});\nfunction b$3(e2 = document.body) {\n  return e2 == null ? [] : Array.from(e2.querySelectorAll(f$3)).sort((r2, t2) => Math.sign((r2.tabIndex || Number.MAX_SAFE_INTEGER) - (t2.tabIndex || Number.MAX_SAFE_INTEGER)));\n}\nfunction S$3(e2 = document.body) {\n  return e2 == null ? [] : Array.from(e2.querySelectorAll(p)).sort((r2, t2) => Math.sign((r2.tabIndex || Number.MAX_SAFE_INTEGER) - (t2.tabIndex || Number.MAX_SAFE_INTEGER)));\n}\nvar h$2 = ((t2) => (t2[t2.Strict = 0] = \"Strict\", t2[t2.Loose = 1] = \"Loose\", t2))(h$2 || {});\nfunction A(e2, r2 = 0) {\n  var t2;\n  return e2 === ((t2 = o$6(e2)) == null ? void 0 : t2.body) ? false : u$7(r2, { [0]() {\n    return e2.matches(f$3);\n  }, [1]() {\n    let u2 = e2;\n    for (; u2 !== null; ) {\n      if (u2.matches(f$3)) return true;\n      u2 = u2.parentElement;\n    }\n    return false;\n  } });\n}\nfunction G(e2) {\n  let r2 = o$6(e2);\n  o$5().nextFrame(() => {\n    r2 && !A(r2.activeElement, 0) && I$1(e2);\n  });\n}\nvar H$2 = ((t2) => (t2[t2.Keyboard = 0] = \"Keyboard\", t2[t2.Mouse = 1] = \"Mouse\", t2))(H$2 || {});\ntypeof window != \"undefined\" && typeof document != \"undefined\" && (document.addEventListener(\"keydown\", (e2) => {\n  e2.metaKey || e2.altKey || e2.ctrlKey || (document.documentElement.dataset.headlessuiFocusVisible = \"\");\n}, true), document.addEventListener(\"click\", (e2) => {\n  e2.detail === 1 ? delete document.documentElement.dataset.headlessuiFocusVisible : e2.detail === 0 && (document.documentElement.dataset.headlessuiFocusVisible = \"\");\n}, true));\nfunction I$1(e2) {\n  e2 == null || e2.focus({ preventScroll: true });\n}\nlet w = [\"textarea\", \"input\"].join(\",\");\nfunction O(e2) {\n  var r2, t2;\n  return (t2 = (r2 = e2 == null ? void 0 : e2.matches) == null ? void 0 : r2.call(e2, w)) != null ? t2 : false;\n}\nfunction _(e2, r2 = (t2) => t2) {\n  return e2.slice().sort((t2, u2) => {\n    let o3 = r2(t2), c2 = r2(u2);\n    if (o3 === null || c2 === null) return 0;\n    let l2 = o3.compareDocumentPosition(c2);\n    return l2 & Node.DOCUMENT_POSITION_FOLLOWING ? -1 : l2 & Node.DOCUMENT_POSITION_PRECEDING ? 1 : 0;\n  });\n}\nfunction j$2(e2, r2) {\n  return P(b$3(), r2, { relativeTo: e2 });\n}\nfunction P(e2, r2, { sorted: t2 = true, relativeTo: u2 = null, skipElements: o3 = [] } = {}) {\n  let c2 = Array.isArray(e2) ? e2.length > 0 ? e2[0].ownerDocument : document : e2.ownerDocument, l2 = Array.isArray(e2) ? t2 ? _(e2) : e2 : r2 & 64 ? S$3(e2) : b$3(e2);\n  o3.length > 0 && l2.length > 1 && (l2 = l2.filter((s2) => !o3.some((a3) => a3 != null && \"current\" in a3 ? (a3 == null ? void 0 : a3.current) === s2 : a3 === s2))), u2 = u2 != null ? u2 : c2.activeElement;\n  let n2 = (() => {\n    if (r2 & 5) return 1;\n    if (r2 & 10) return -1;\n    throw new Error(\"Missing Focus.First, Focus.Previous, Focus.Next or Focus.Last\");\n  })(), x2 = (() => {\n    if (r2 & 1) return 0;\n    if (r2 & 2) return Math.max(0, l2.indexOf(u2)) - 1;\n    if (r2 & 4) return Math.max(0, l2.indexOf(u2)) + 1;\n    if (r2 & 8) return l2.length - 1;\n    throw new Error(\"Missing Focus.First, Focus.Previous, Focus.Next or Focus.Last\");\n  })(), M2 = r2 & 32 ? { preventScroll: true } : {}, m2 = 0, d2 = l2.length, i2;\n  do {\n    if (m2 >= d2 || m2 + d2 <= 0) return 0;\n    let s2 = x2 + m2;\n    if (r2 & 16) s2 = (s2 + d2) % d2;\n    else {\n      if (s2 < 0) return 3;\n      if (s2 >= d2) return 1;\n    }\n    i2 = l2[s2], i2 == null || i2.focus(M2), m2 += n2;\n  } while (i2 !== c2.activeElement);\n  return r2 & 6 && O(i2) && i2.select(), 2;\n}\nfunction t$1() {\n  return /iPhone/gi.test(window.navigator.platform) || /Mac/gi.test(window.navigator.platform) && window.navigator.maxTouchPoints > 0;\n}\nfunction i$4() {\n  return /Android/gi.test(window.navigator.userAgent);\n}\nfunction n$2() {\n  return t$1() || i$4();\n}\nfunction i$3(t2, e2, o3, n2) {\n  let u2 = s$6(o3);\n  y$6(() => {\n    if (!t2) return;\n    function r2(m2) {\n      u2.current(m2);\n    }\n    return document.addEventListener(e2, r2, n2), () => document.removeEventListener(e2, r2, n2);\n  }, [t2, e2, n2]);\n}\nfunction s$5(t2, e2, o3, n2) {\n  let i2 = s$6(o3);\n  y$6(() => {\n    if (!t2) return;\n    function r2(d2) {\n      i2.current(d2);\n    }\n    return window.addEventListener(e2, r2, n2), () => window.removeEventListener(e2, r2, n2);\n  }, [t2, e2, n2]);\n}\nconst E = 30;\nfunction R$1(p2, f2, C2) {\n  let u2 = x$2(p2, \"outside-click\"), m2 = s$6(C2), s2 = q$3(function(e2, n2) {\n    if (e2.defaultPrevented) return;\n    let r2 = n2(e2);\n    if (r2 === null || !r2.getRootNode().contains(r2) || !r2.isConnected) return;\n    let h2 = function l2(o3) {\n      return typeof o3 == \"function\" ? l2(o3()) : Array.isArray(o3) || o3 instanceof Set ? o3 : [o3];\n    }(f2);\n    for (let l2 of h2) if (l2 !== null && (l2.contains(r2) || e2.composed && e2.composedPath().includes(l2))) return;\n    return !A(r2, h$2.Loose) && r2.tabIndex !== -1 && e2.preventDefault(), m2.current(e2, r2);\n  }, [m2, f2]), i2 = A$3(null);\n  i$3(u2, \"pointerdown\", (t2) => {\n    var e2, n2;\n    i2.current = ((n2 = (e2 = t2.composedPath) == null ? void 0 : e2.call(t2)) == null ? void 0 : n2[0]) || t2.target;\n  }, true), i$3(u2, \"mousedown\", (t2) => {\n    var e2, n2;\n    i2.current = ((n2 = (e2 = t2.composedPath) == null ? void 0 : e2.call(t2)) == null ? void 0 : n2[0]) || t2.target;\n  }, true), i$3(u2, \"click\", (t2) => {\n    n$2() || i2.current && (s2(t2, () => i2.current), i2.current = null);\n  }, true);\n  let a3 = A$3({ x: 0, y: 0 });\n  i$3(u2, \"touchstart\", (t2) => {\n    a3.current.x = t2.touches[0].clientX, a3.current.y = t2.touches[0].clientY;\n  }, true), i$3(u2, \"touchend\", (t2) => {\n    let e2 = { x: t2.changedTouches[0].clientX, y: t2.changedTouches[0].clientY };\n    if (!(Math.abs(e2.x - a3.current.x) >= E || Math.abs(e2.y - a3.current.y) >= E)) return s2(t2, () => t2.target instanceof HTMLElement ? t2.target : null);\n  }, true), s$5(u2, \"blur\", (t2) => s2(t2, () => window.document.activeElement instanceof HTMLIFrameElement ? window.document.activeElement : null), true);\n}\nfunction n$1(...e2) {\n  return T$5(() => o$6(...e2), [...e2]);\n}\nfunction e$1(t2, u2) {\n  return T$5(() => {\n    var n2;\n    if (t2.type) return t2.type;\n    let r2 = (n2 = t2.as) != null ? n2 : \"button\";\n    if (typeof r2 == \"string\" && r2.toLowerCase() === \"button\" || (u2 == null ? void 0 : u2.tagName) === \"BUTTON\" && !u2.hasAttribute(\"type\")) return \"button\";\n  }, [t2.type, t2.as, u2]);\n}\nfunction d$1() {\n  let r2;\n  return { before({ doc: e2 }) {\n    var l2;\n    let o3 = e2.documentElement, t2 = (l2 = e2.defaultView) != null ? l2 : window;\n    r2 = Math.max(0, t2.innerWidth - o3.clientWidth);\n  }, after({ doc: e2, d: o3 }) {\n    let t2 = e2.documentElement, l2 = Math.max(0, t2.clientWidth - t2.offsetWidth), n2 = Math.max(0, r2 - l2);\n    o3.style(t2, \"paddingRight\", `${n2}px`);\n  } };\n}\nfunction d() {\n  return t$1() ? { before({ doc: r2, d: n2, meta: c2 }) {\n    function o3(a3) {\n      return c2.containers.flatMap((l2) => l2()).some((l2) => l2.contains(a3));\n    }\n    n2.microTask(() => {\n      var s2;\n      if (window.getComputedStyle(r2.documentElement).scrollBehavior !== \"auto\") {\n        let t2 = o$5();\n        t2.style(r2.documentElement, \"scrollBehavior\", \"auto\"), n2.add(() => n2.microTask(() => t2.dispose()));\n      }\n      let a3 = (s2 = window.scrollY) != null ? s2 : window.pageYOffset, l2 = null;\n      n2.addEventListener(r2, \"click\", (t2) => {\n        if (t2.target instanceof HTMLElement) try {\n          let e2 = t2.target.closest(\"a\");\n          if (!e2) return;\n          let { hash: f2 } = new URL(e2.href), i2 = r2.querySelector(f2);\n          i2 && !o3(i2) && (l2 = i2);\n        } catch {\n        }\n      }, true), n2.addEventListener(r2, \"touchstart\", (t2) => {\n        if (t2.target instanceof HTMLElement) if (o3(t2.target)) {\n          let e2 = t2.target;\n          for (; e2.parentElement && o3(e2.parentElement); ) e2 = e2.parentElement;\n          n2.style(e2, \"overscrollBehavior\", \"contain\");\n        } else n2.style(t2.target, \"touchAction\", \"none\");\n      }), n2.addEventListener(r2, \"touchmove\", (t2) => {\n        if (t2.target instanceof HTMLElement) {\n          if (t2.target.tagName === \"INPUT\") return;\n          if (o3(t2.target)) {\n            let e2 = t2.target;\n            for (; e2.parentElement && e2.dataset.headlessuiPortal !== \"\" && !(e2.scrollHeight > e2.clientHeight || e2.scrollWidth > e2.clientWidth); ) e2 = e2.parentElement;\n            e2.dataset.headlessuiPortal === \"\" && t2.preventDefault();\n          } else t2.preventDefault();\n        }\n      }, { passive: false }), n2.add(() => {\n        var e2;\n        let t2 = (e2 = window.scrollY) != null ? e2 : window.pageYOffset;\n        a3 !== t2 && window.scrollTo(0, a3), l2 && l2.isConnected && (l2.scrollIntoView({ block: \"nearest\" }), l2 = null);\n      });\n    });\n  } } : {};\n}\nfunction r() {\n  return { before({ doc: e2, d: o3 }) {\n    o3.style(e2.documentElement, \"overflow\", \"hidden\");\n  } };\n}\nfunction m$1(e2) {\n  let n2 = {};\n  for (let t2 of e2) Object.assign(n2, t2(n2));\n  return n2;\n}\nlet a$5 = a$6(() => /* @__PURE__ */ new Map(), { PUSH(e2, n2) {\n  var o3;\n  let t2 = (o3 = this.get(e2)) != null ? o3 : { doc: e2, count: 0, d: o$5(), meta: /* @__PURE__ */ new Set() };\n  return t2.count++, t2.meta.add(n2), this.set(e2, t2), this;\n}, POP(e2, n2) {\n  let t2 = this.get(e2);\n  return t2 && (t2.count--, t2.meta.delete(n2)), this;\n}, SCROLL_PREVENT({ doc: e2, d: n2, meta: t2 }) {\n  let o3 = { doc: e2, d: n2, meta: m$1(t2) }, c2 = [d(), d$1(), r()];\n  c2.forEach(({ before: r2 }) => r2 == null ? void 0 : r2(o3)), c2.forEach(({ after: r2 }) => r2 == null ? void 0 : r2(o3));\n}, SCROLL_ALLOW({ d: e2 }) {\n  e2.dispose();\n}, TEARDOWN({ doc: e2 }) {\n  this.delete(e2);\n} });\na$5.subscribe(() => {\n  let e2 = a$5.getSnapshot(), n2 = /* @__PURE__ */ new Map();\n  for (let [t2] of e2) n2.set(t2, t2.documentElement.style.overflow);\n  for (let t2 of e2.values()) {\n    let o3 = n2.get(t2.doc) === \"hidden\", c2 = t2.count !== 0;\n    (c2 && !o3 || !c2 && o3) && a$5.dispatch(t2.count > 0 ? \"SCROLL_PREVENT\" : \"SCROLL_ALLOW\", t2), t2.count === 0 && a$5.dispatch(\"TEARDOWN\", t2);\n  }\n});\nfunction a$4(r2, e2, n2 = () => ({ containers: [] })) {\n  let f2 = o$2(a$5), o3 = e2 ? f2.get(e2) : void 0, i2 = o3 ? o3.count > 0 : false;\n  return n$3(() => {\n    if (!(!e2 || !r2)) return a$5.dispatch(\"PUSH\", e2, n2), () => a$5.dispatch(\"POP\", e2, n2);\n  }, [r2, e2]), i2;\n}\nfunction f$2(e2, c2, n2 = () => [document.body]) {\n  let r2 = x$2(e2, \"scroll-lock\");\n  a$4(r2, c2, (t2) => {\n    var o3;\n    return { containers: [...(o3 = t2.containers) != null ? o3 : [], n2] };\n  });\n}\nfunction t(e2) {\n  return [e2.screenX, e2.screenY];\n}\nfunction u$3() {\n  let e2 = A$3([-1, -1]);\n  return { wasMoved(r2) {\n    let n2 = t(r2);\n    return e2.current[0] === n2[0] && e2.current[1] === n2[1] ? false : (e2.current = n2, true);\n  }, update(r2) {\n    e2.current = t(r2);\n  } };\n}\nfunction c$4(u2 = 0) {\n  let [t2, l2] = d$4(u2), g2 = q$3((e2) => l2(e2), [t2]), s2 = q$3((e2) => l2((a3) => a3 | e2), [t2]), m2 = q$3((e2) => (t2 & e2) === e2, [t2]), n2 = q$3((e2) => l2((a3) => a3 & ~e2), [l2]), F2 = q$3((e2) => l2((a3) => a3 ^ e2), [l2]);\n  return { flags: t2, setFlag: g2, addFlag: s2, hasFlag: m2, removeFlag: n2, toggleFlag: F2 };\n}\nvar T$1, b$2;\ntypeof process != \"undefined\" && typeof globalThis != \"undefined\" && typeof Element != \"undefined\" && ((T$1 = process == null ? void 0 : process.env) == null ? void 0 : T$1[\"NODE_ENV\"]) === \"test\" && typeof ((b$2 = Element == null ? void 0 : Element.prototype) == null ? void 0 : b$2.getAnimations) == \"undefined\" && (Element.prototype.getAnimations = function() {\n  return console.warn([\"Headless UI has polyfilled `Element.prototype.getAnimations` for your tests.\", \"Please install a proper polyfill e.g. `jsdom-testing-mocks`, to silence these warnings.\", \"\", \"Example usage:\", \"```js\", \"import { mockAnimationsApi } from 'jsdom-testing-mocks'\", \"mockAnimationsApi()\", \"```\"].join(`\n`)), [];\n});\nvar L$1 = ((r2) => (r2[r2.None = 0] = \"None\", r2[r2.Closed = 1] = \"Closed\", r2[r2.Enter = 2] = \"Enter\", r2[r2.Leave = 4] = \"Leave\", r2))(L$1 || {});\nfunction R(t2) {\n  let n2 = {};\n  for (let e2 in t2) t2[e2] === true && (n2[`data-${e2}`] = \"\");\n  return n2;\n}\nfunction x$1(t2, n2, e2, i2) {\n  let [r2, o3] = d$4(e2), { hasFlag: s2, addFlag: a3, removeFlag: l2 } = c$4(t2 && r2 ? 3 : 0), u2 = A$3(false), f2 = A$3(false), E2 = p$2();\n  return n$3(() => {\n    var d2;\n    if (t2) {\n      if (e2 && o3(true), !n2) {\n        e2 && a3(3);\n        return;\n      }\n      return (d2 = void 0) == null || d2.call(i2, e2), C(n2, { inFlight: u2, prepare() {\n        f2.current ? f2.current = false : f2.current = u2.current, u2.current = true, !f2.current && (e2 ? (a3(3), l2(4)) : (a3(4), l2(2)));\n      }, run() {\n        f2.current ? e2 ? (l2(3), a3(4)) : (l2(4), a3(3)) : e2 ? l2(1) : a3(1);\n      }, done() {\n        var p2;\n        f2.current && typeof n2.getAnimations == \"function\" && n2.getAnimations().length > 0 || (u2.current = false, l2(7), e2 || o3(false), (p2 = void 0) == null || p2.call(i2, e2));\n      } });\n    }\n  }, [t2, e2, n2, E2]), t2 ? [r2, { closed: s2(1), enter: s2(2), leave: s2(4), transition: s2(2) || s2(4) }] : [e2, { closed: void 0, enter: void 0, leave: void 0, transition: void 0 }];\n}\nfunction C(t2, { prepare: n2, run: e2, done: i2, inFlight: r2 }) {\n  let o3 = o$5();\n  return j$1(t2, { prepare: n2, inFlight: r2 }), o3.nextFrame(() => {\n    e2(), o3.requestAnimationFrame(() => {\n      o3.add(M$2(t2, i2));\n    });\n  }), o3.dispose;\n}\nfunction M$2(t2, n2) {\n  var o3, s2;\n  let e2 = o$5();\n  if (!t2) return e2.dispose;\n  let i2 = false;\n  e2.add(() => {\n    i2 = true;\n  });\n  let r2 = (s2 = (o3 = t2.getAnimations) == null ? void 0 : o3.call(t2).filter((a3) => a3 instanceof CSSTransition)) != null ? s2 : [];\n  return r2.length === 0 ? (n2(), e2.dispose) : (Promise.allSettled(r2.map((a3) => a3.finished)).then(() => {\n    i2 || n2();\n  }), e2.dispose);\n}\nfunction j$1(t2, { inFlight: n2, prepare: e2 }) {\n  if (n2 != null && n2.current) {\n    e2();\n    return;\n  }\n  let i2 = t2.style.transition;\n  t2.style.transition = \"none\", e2(), t2.offsetHeight, t2.style.transition = i2;\n}\nfunction F$1(c2, { container: e2, accept: t2, walk: r2 }) {\n  let o3 = A$3(t2), l2 = A$3(r2);\n  y$6(() => {\n    o3.current = t2, l2.current = r2;\n  }, [t2, r2]), n$3(() => {\n    if (!e2 || !c2) return;\n    let n2 = o$6(e2);\n    if (!n2) return;\n    let f2 = o3.current, p2 = l2.current, i2 = Object.assign((m2) => f2(m2), { acceptNode: f2 }), u2 = n2.createTreeWalker(e2, NodeFilter.SHOW_ELEMENT, i2, false);\n    for (; u2.nextNode(); ) p2(u2.currentNode);\n  }, [e2, c2, o3, l2]);\n}\nfunction hasWindow() {\n  return typeof window !== \"undefined\";\n}\nfunction getNodeName(node) {\n  if (isNode(node)) {\n    return (node.nodeName || \"\").toLowerCase();\n  }\n  return \"#document\";\n}\nfunction getWindow(node) {\n  var _node$ownerDocument;\n  return (node == null || (_node$ownerDocument = node.ownerDocument) == null ? void 0 : _node$ownerDocument.defaultView) || window;\n}\nfunction getDocumentElement(node) {\n  var _ref;\n  return (_ref = (isNode(node) ? node.ownerDocument : node.document) || window.document) == null ? void 0 : _ref.documentElement;\n}\nfunction isNode(value) {\n  if (!hasWindow()) {\n    return false;\n  }\n  return value instanceof Node || value instanceof getWindow(value).Node;\n}\nfunction isElement(value) {\n  if (!hasWindow()) {\n    return false;\n  }\n  return value instanceof Element || value instanceof getWindow(value).Element;\n}\nfunction isHTMLElement(value) {\n  if (!hasWindow()) {\n    return false;\n  }\n  return value instanceof HTMLElement || value instanceof getWindow(value).HTMLElement;\n}\nfunction isShadowRoot(value) {\n  if (!hasWindow() || typeof ShadowRoot === \"undefined\") {\n    return false;\n  }\n  return value instanceof ShadowRoot || value instanceof getWindow(value).ShadowRoot;\n}\nfunction isOverflowElement(element) {\n  const {\n    overflow,\n    overflowX,\n    overflowY,\n    display\n  } = getComputedStyle$1(element);\n  return /auto|scroll|overlay|hidden|clip/.test(overflow + overflowY + overflowX) && ![\"inline\", \"contents\"].includes(display);\n}\nfunction isTableElement(element) {\n  return [\"table\", \"td\", \"th\"].includes(getNodeName(element));\n}\nfunction isTopLayer(element) {\n  return [\":popover-open\", \":modal\"].some((selector) => {\n    try {\n      return element.matches(selector);\n    } catch (e2) {\n      return false;\n    }\n  });\n}\nfunction isContainingBlock(elementOrCss) {\n  const webkit = isWebKit();\n  const css = isElement(elementOrCss) ? getComputedStyle$1(elementOrCss) : elementOrCss;\n  return [\"transform\", \"translate\", \"scale\", \"rotate\", \"perspective\"].some((value) => css[value] ? css[value] !== \"none\" : false) || (css.containerType ? css.containerType !== \"normal\" : false) || !webkit && (css.backdropFilter ? css.backdropFilter !== \"none\" : false) || !webkit && (css.filter ? css.filter !== \"none\" : false) || [\"transform\", \"translate\", \"scale\", \"rotate\", \"perspective\", \"filter\"].some((value) => (css.willChange || \"\").includes(value)) || [\"paint\", \"layout\", \"strict\", \"content\"].some((value) => (css.contain || \"\").includes(value));\n}\nfunction getContainingBlock(element) {\n  let currentNode = getParentNode(element);\n  while (isHTMLElement(currentNode) && !isLastTraversableNode(currentNode)) {\n    if (isContainingBlock(currentNode)) {\n      return currentNode;\n    } else if (isTopLayer(currentNode)) {\n      return null;\n    }\n    currentNode = getParentNode(currentNode);\n  }\n  return null;\n}\nfunction isWebKit() {\n  if (typeof CSS === \"undefined\" || !CSS.supports) return false;\n  return CSS.supports(\"-webkit-backdrop-filter\", \"none\");\n}\nfunction isLastTraversableNode(node) {\n  return [\"html\", \"body\", \"#document\"].includes(getNodeName(node));\n}\nfunction getComputedStyle$1(element) {\n  return getWindow(element).getComputedStyle(element);\n}\nfunction getNodeScroll(element) {\n  if (isElement(element)) {\n    return {\n      scrollLeft: element.scrollLeft,\n      scrollTop: element.scrollTop\n    };\n  }\n  return {\n    scrollLeft: element.scrollX,\n    scrollTop: element.scrollY\n  };\n}\nfunction getParentNode(node) {\n  if (getNodeName(node) === \"html\") {\n    return node;\n  }\n  const result = (\n    // Step into the shadow DOM of the parent of a slotted node.\n    node.assignedSlot || // DOM Element detected.\n    node.parentNode || // ShadowRoot detected.\n    isShadowRoot(node) && node.host || // Fallback.\n    getDocumentElement(node)\n  );\n  return isShadowRoot(result) ? result.host : result;\n}\nfunction getNearestOverflowAncestor(node) {\n  const parentNode = getParentNode(node);\n  if (isLastTraversableNode(parentNode)) {\n    return node.ownerDocument ? node.ownerDocument.body : node.body;\n  }\n  if (isHTMLElement(parentNode) && isOverflowElement(parentNode)) {\n    return parentNode;\n  }\n  return getNearestOverflowAncestor(parentNode);\n}\nfunction getOverflowAncestors(node, list, traverseIframes) {\n  var _node$ownerDocument2;\n  if (list === void 0) {\n    list = [];\n  }\n  if (traverseIframes === void 0) {\n    traverseIframes = true;\n  }\n  const scrollableAncestor = getNearestOverflowAncestor(node);\n  const isBody = scrollableAncestor === ((_node$ownerDocument2 = node.ownerDocument) == null ? void 0 : _node$ownerDocument2.body);\n  const win = getWindow(scrollableAncestor);\n  if (isBody) {\n    const frameElement = getFrameElement(win);\n    return list.concat(win, win.visualViewport || [], isOverflowElement(scrollableAncestor) ? scrollableAncestor : [], frameElement && traverseIframes ? getOverflowAncestors(frameElement) : []);\n  }\n  return list.concat(scrollableAncestor, getOverflowAncestors(scrollableAncestor, [], traverseIframes));\n}\nfunction getFrameElement(win) {\n  return win.parent && Object.getPrototypeOf(win.parent) ? win.frameElement : null;\n}\nfunction getUserAgent() {\n  const uaData = navigator.userAgentData;\n  if (uaData && Array.isArray(uaData.brands)) {\n    return uaData.brands.map((_ref) => {\n      let {\n        brand,\n        version\n      } = _ref;\n      return brand + \"/\" + version;\n    }).join(\" \");\n  }\n  return navigator.userAgent;\n}\nconst min = Math.min;\nconst max = Math.max;\nconst round = Math.round;\nconst floor = Math.floor;\nconst createCoords = (v2) => ({\n  x: v2,\n  y: v2\n});\nconst oppositeSideMap = {\n  left: \"right\",\n  right: \"left\",\n  bottom: \"top\",\n  top: \"bottom\"\n};\nconst oppositeAlignmentMap = {\n  start: \"end\",\n  end: \"start\"\n};\nfunction clamp(start, value, end) {\n  return max(start, min(value, end));\n}\nfunction evaluate(value, param) {\n  return typeof value === \"function\" ? value(param) : value;\n}\nfunction getSide(placement) {\n  return placement.split(\"-\")[0];\n}\nfunction getAlignment(placement) {\n  return placement.split(\"-\")[1];\n}\nfunction getOppositeAxis(axis) {\n  return axis === \"x\" ? \"y\" : \"x\";\n}\nfunction getAxisLength(axis) {\n  return axis === \"y\" ? \"height\" : \"width\";\n}\nfunction getSideAxis(placement) {\n  return [\"top\", \"bottom\"].includes(getSide(placement)) ? \"y\" : \"x\";\n}\nfunction getAlignmentAxis(placement) {\n  return getOppositeAxis(getSideAxis(placement));\n}\nfunction getAlignmentSides(placement, rects, rtl) {\n  if (rtl === void 0) {\n    rtl = false;\n  }\n  const alignment = getAlignment(placement);\n  const alignmentAxis = getAlignmentAxis(placement);\n  const length = getAxisLength(alignmentAxis);\n  let mainAlignmentSide = alignmentAxis === \"x\" ? alignment === (rtl ? \"end\" : \"start\") ? \"right\" : \"left\" : alignment === \"start\" ? \"bottom\" : \"top\";\n  if (rects.reference[length] > rects.floating[length]) {\n    mainAlignmentSide = getOppositePlacement(mainAlignmentSide);\n  }\n  return [mainAlignmentSide, getOppositePlacement(mainAlignmentSide)];\n}\nfunction getExpandedPlacements(placement) {\n  const oppositePlacement = getOppositePlacement(placement);\n  return [getOppositeAlignmentPlacement(placement), oppositePlacement, getOppositeAlignmentPlacement(oppositePlacement)];\n}\nfunction getOppositeAlignmentPlacement(placement) {\n  return placement.replace(/start|end/g, (alignment) => oppositeAlignmentMap[alignment]);\n}\nfunction getSideList(side, isStart, rtl) {\n  const lr = [\"left\", \"right\"];\n  const rl = [\"right\", \"left\"];\n  const tb = [\"top\", \"bottom\"];\n  const bt = [\"bottom\", \"top\"];\n  switch (side) {\n    case \"top\":\n    case \"bottom\":\n      if (rtl) return isStart ? rl : lr;\n      return isStart ? lr : rl;\n    case \"left\":\n    case \"right\":\n      return isStart ? tb : bt;\n    default:\n      return [];\n  }\n}\nfunction getOppositeAxisPlacements(placement, flipAlignment, direction, rtl) {\n  const alignment = getAlignment(placement);\n  let list = getSideList(getSide(placement), direction === \"start\", rtl);\n  if (alignment) {\n    list = list.map((side) => side + \"-\" + alignment);\n    if (flipAlignment) {\n      list = list.concat(list.map(getOppositeAlignmentPlacement));\n    }\n  }\n  return list;\n}\nfunction getOppositePlacement(placement) {\n  return placement.replace(/left|right|bottom|top/g, (side) => oppositeSideMap[side]);\n}\nfunction expandPaddingObject(padding) {\n  return {\n    top: 0,\n    right: 0,\n    bottom: 0,\n    left: 0,\n    ...padding\n  };\n}\nfunction getPaddingObject(padding) {\n  return typeof padding !== \"number\" ? expandPaddingObject(padding) : {\n    top: padding,\n    right: padding,\n    bottom: padding,\n    left: padding\n  };\n}\nfunction rectToClientRect(rect) {\n  const {\n    x: x2,\n    y: y2,\n    width,\n    height\n  } = rect;\n  return {\n    width,\n    height,\n    top: y2,\n    left: x2,\n    right: x2 + width,\n    bottom: y2 + height,\n    x: x2,\n    y: y2\n  };\n}\nfunction computeCoordsFromPlacement(_ref, placement, rtl) {\n  let {\n    reference,\n    floating\n  } = _ref;\n  const sideAxis = getSideAxis(placement);\n  const alignmentAxis = getAlignmentAxis(placement);\n  const alignLength = getAxisLength(alignmentAxis);\n  const side = getSide(placement);\n  const isVertical = sideAxis === \"y\";\n  const commonX = reference.x + reference.width / 2 - floating.width / 2;\n  const commonY = reference.y + reference.height / 2 - floating.height / 2;\n  const commonAlign = reference[alignLength] / 2 - floating[alignLength] / 2;\n  let coords;\n  switch (side) {\n    case \"top\":\n      coords = {\n        x: commonX,\n        y: reference.y - floating.height\n      };\n      break;\n    case \"bottom\":\n      coords = {\n        x: commonX,\n        y: reference.y + reference.height\n      };\n      break;\n    case \"right\":\n      coords = {\n        x: reference.x + reference.width,\n        y: commonY\n      };\n      break;\n    case \"left\":\n      coords = {\n        x: reference.x - floating.width,\n        y: commonY\n      };\n      break;\n    default:\n      coords = {\n        x: reference.x,\n        y: reference.y\n      };\n  }\n  switch (getAlignment(placement)) {\n    case \"start\":\n      coords[alignmentAxis] -= commonAlign * (rtl && isVertical ? -1 : 1);\n      break;\n    case \"end\":\n      coords[alignmentAxis] += commonAlign * (rtl && isVertical ? -1 : 1);\n      break;\n  }\n  return coords;\n}\nconst computePosition$1 = async (reference, floating, config) => {\n  const {\n    placement = \"bottom\",\n    strategy = \"absolute\",\n    middleware = [],\n    platform: platform2\n  } = config;\n  const validMiddleware = middleware.filter(Boolean);\n  const rtl = await (platform2.isRTL == null ? void 0 : platform2.isRTL(floating));\n  let rects = await platform2.getElementRects({\n    reference,\n    floating,\n    strategy\n  });\n  let {\n    x: x2,\n    y: y2\n  } = computeCoordsFromPlacement(rects, placement, rtl);\n  let statefulPlacement = placement;\n  let middlewareData = {};\n  let resetCount = 0;\n  for (let i2 = 0; i2 < validMiddleware.length; i2++) {\n    const {\n      name,\n      fn: fn2\n    } = validMiddleware[i2];\n    const {\n      x: nextX,\n      y: nextY,\n      data,\n      reset\n    } = await fn2({\n      x: x2,\n      y: y2,\n      initialPlacement: placement,\n      placement: statefulPlacement,\n      strategy,\n      middlewareData,\n      rects,\n      platform: platform2,\n      elements: {\n        reference,\n        floating\n      }\n    });\n    x2 = nextX != null ? nextX : x2;\n    y2 = nextY != null ? nextY : y2;\n    middlewareData = {\n      ...middlewareData,\n      [name]: {\n        ...middlewareData[name],\n        ...data\n      }\n    };\n    if (reset && resetCount <= 50) {\n      resetCount++;\n      if (typeof reset === \"object\") {\n        if (reset.placement) {\n          statefulPlacement = reset.placement;\n        }\n        if (reset.rects) {\n          rects = reset.rects === true ? await platform2.getElementRects({\n            reference,\n            floating,\n            strategy\n          }) : reset.rects;\n        }\n        ({\n          x: x2,\n          y: y2\n        } = computeCoordsFromPlacement(rects, statefulPlacement, rtl));\n      }\n      i2 = -1;\n    }\n  }\n  return {\n    x: x2,\n    y: y2,\n    placement: statefulPlacement,\n    strategy,\n    middlewareData\n  };\n};\nasync function detectOverflow$1(state, options) {\n  var _await$platform$isEle;\n  if (options === void 0) {\n    options = {};\n  }\n  const {\n    x: x2,\n    y: y2,\n    platform: platform2,\n    rects,\n    elements,\n    strategy\n  } = state;\n  const {\n    boundary = \"clippingAncestors\",\n    rootBoundary = \"viewport\",\n    elementContext = \"floating\",\n    altBoundary = false,\n    padding = 0\n  } = evaluate(options, state);\n  const paddingObject = getPaddingObject(padding);\n  const altContext = elementContext === \"floating\" ? \"reference\" : \"floating\";\n  const element = elements[altBoundary ? altContext : elementContext];\n  const clippingClientRect = rectToClientRect(await platform2.getClippingRect({\n    element: ((_await$platform$isEle = await (platform2.isElement == null ? void 0 : platform2.isElement(element))) != null ? _await$platform$isEle : true) ? element : element.contextElement || await (platform2.getDocumentElement == null ? void 0 : platform2.getDocumentElement(elements.floating)),\n    boundary,\n    rootBoundary,\n    strategy\n  }));\n  const rect = elementContext === \"floating\" ? {\n    x: x2,\n    y: y2,\n    width: rects.floating.width,\n    height: rects.floating.height\n  } : rects.reference;\n  const offsetParent = await (platform2.getOffsetParent == null ? void 0 : platform2.getOffsetParent(elements.floating));\n  const offsetScale = await (platform2.isElement == null ? void 0 : platform2.isElement(offsetParent)) ? await (platform2.getScale == null ? void 0 : platform2.getScale(offsetParent)) || {\n    x: 1,\n    y: 1\n  } : {\n    x: 1,\n    y: 1\n  };\n  const elementClientRect = rectToClientRect(platform2.convertOffsetParentRelativeRectToViewportRelativeRect ? await platform2.convertOffsetParentRelativeRectToViewportRelativeRect({\n    elements,\n    rect,\n    offsetParent,\n    strategy\n  }) : rect);\n  return {\n    top: (clippingClientRect.top - elementClientRect.top + paddingObject.top) / offsetScale.y,\n    bottom: (elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom) / offsetScale.y,\n    left: (clippingClientRect.left - elementClientRect.left + paddingObject.left) / offsetScale.x,\n    right: (elementClientRect.right - clippingClientRect.right + paddingObject.right) / offsetScale.x\n  };\n}\nconst flip$2 = function(options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    name: \"flip\",\n    options,\n    async fn(state) {\n      var _middlewareData$arrow, _middlewareData$flip;\n      const {\n        placement,\n        middlewareData,\n        rects,\n        initialPlacement,\n        platform: platform2,\n        elements\n      } = state;\n      const {\n        mainAxis: checkMainAxis = true,\n        crossAxis: checkCrossAxis = true,\n        fallbackPlacements: specifiedFallbackPlacements,\n        fallbackStrategy = \"bestFit\",\n        fallbackAxisSideDirection = \"none\",\n        flipAlignment = true,\n        ...detectOverflowOptions\n      } = evaluate(options, state);\n      if ((_middlewareData$arrow = middlewareData.arrow) != null && _middlewareData$arrow.alignmentOffset) {\n        return {};\n      }\n      const side = getSide(placement);\n      const initialSideAxis = getSideAxis(initialPlacement);\n      const isBasePlacement = getSide(initialPlacement) === initialPlacement;\n      const rtl = await (platform2.isRTL == null ? void 0 : platform2.isRTL(elements.floating));\n      const fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipAlignment ? [getOppositePlacement(initialPlacement)] : getExpandedPlacements(initialPlacement));\n      const hasFallbackAxisSideDirection = fallbackAxisSideDirection !== \"none\";\n      if (!specifiedFallbackPlacements && hasFallbackAxisSideDirection) {\n        fallbackPlacements.push(...getOppositeAxisPlacements(initialPlacement, flipAlignment, fallbackAxisSideDirection, rtl));\n      }\n      const placements = [initialPlacement, ...fallbackPlacements];\n      const overflow = await detectOverflow$1(state, detectOverflowOptions);\n      const overflows = [];\n      let overflowsData = ((_middlewareData$flip = middlewareData.flip) == null ? void 0 : _middlewareData$flip.overflows) || [];\n      if (checkMainAxis) {\n        overflows.push(overflow[side]);\n      }\n      if (checkCrossAxis) {\n        const sides = getAlignmentSides(placement, rects, rtl);\n        overflows.push(overflow[sides[0]], overflow[sides[1]]);\n      }\n      overflowsData = [...overflowsData, {\n        placement,\n        overflows\n      }];\n      if (!overflows.every((side2) => side2 <= 0)) {\n        var _middlewareData$flip2, _overflowsData$filter;\n        const nextIndex = (((_middlewareData$flip2 = middlewareData.flip) == null ? void 0 : _middlewareData$flip2.index) || 0) + 1;\n        const nextPlacement = placements[nextIndex];\n        if (nextPlacement) {\n          var _overflowsData$;\n          const ignoreCrossAxisOverflow = checkCrossAxis === \"alignment\" ? initialSideAxis !== getSideAxis(nextPlacement) : false;\n          const hasInitialMainAxisOverflow = ((_overflowsData$ = overflowsData[0]) == null ? void 0 : _overflowsData$.overflows[0]) > 0;\n          if (!ignoreCrossAxisOverflow || hasInitialMainAxisOverflow) {\n            return {\n              data: {\n                index: nextIndex,\n                overflows: overflowsData\n              },\n              reset: {\n                placement: nextPlacement\n              }\n            };\n          }\n        }\n        let resetPlacement = (_overflowsData$filter = overflowsData.filter((d2) => d2.overflows[0] <= 0).sort((a3, b2) => a3.overflows[1] - b2.overflows[1])[0]) == null ? void 0 : _overflowsData$filter.placement;\n        if (!resetPlacement) {\n          switch (fallbackStrategy) {\n            case \"bestFit\": {\n              var _overflowsData$filter2;\n              const placement2 = (_overflowsData$filter2 = overflowsData.filter((d2) => {\n                if (hasFallbackAxisSideDirection) {\n                  const currentSideAxis = getSideAxis(d2.placement);\n                  return currentSideAxis === initialSideAxis || // Create a bias to the `y` side axis due to horizontal\n                  // reading directions favoring greater width.\n                  currentSideAxis === \"y\";\n                }\n                return true;\n              }).map((d2) => [d2.placement, d2.overflows.filter((overflow2) => overflow2 > 0).reduce((acc, overflow2) => acc + overflow2, 0)]).sort((a3, b2) => a3[1] - b2[1])[0]) == null ? void 0 : _overflowsData$filter2[0];\n              if (placement2) {\n                resetPlacement = placement2;\n              }\n              break;\n            }\n            case \"initialPlacement\":\n              resetPlacement = initialPlacement;\n              break;\n          }\n        }\n        if (placement !== resetPlacement) {\n          return {\n            reset: {\n              placement: resetPlacement\n            }\n          };\n        }\n      }\n      return {};\n    }\n  };\n};\nasync function convertValueToCoords(state, options) {\n  const {\n    placement,\n    platform: platform2,\n    elements\n  } = state;\n  const rtl = await (platform2.isRTL == null ? void 0 : platform2.isRTL(elements.floating));\n  const side = getSide(placement);\n  const alignment = getAlignment(placement);\n  const isVertical = getSideAxis(placement) === \"y\";\n  const mainAxisMulti = [\"left\", \"top\"].includes(side) ? -1 : 1;\n  const crossAxisMulti = rtl && isVertical ? -1 : 1;\n  const rawValue = evaluate(options, state);\n  let {\n    mainAxis,\n    crossAxis,\n    alignmentAxis\n  } = typeof rawValue === \"number\" ? {\n    mainAxis: rawValue,\n    crossAxis: 0,\n    alignmentAxis: null\n  } : {\n    mainAxis: rawValue.mainAxis || 0,\n    crossAxis: rawValue.crossAxis || 0,\n    alignmentAxis: rawValue.alignmentAxis\n  };\n  if (alignment && typeof alignmentAxis === \"number\") {\n    crossAxis = alignment === \"end\" ? alignmentAxis * -1 : alignmentAxis;\n  }\n  return isVertical ? {\n    x: crossAxis * crossAxisMulti,\n    y: mainAxis * mainAxisMulti\n  } : {\n    x: mainAxis * mainAxisMulti,\n    y: crossAxis * crossAxisMulti\n  };\n}\nconst offset$2 = function(options) {\n  if (options === void 0) {\n    options = 0;\n  }\n  return {\n    name: \"offset\",\n    options,\n    async fn(state) {\n      var _middlewareData$offse, _middlewareData$arrow;\n      const {\n        x: x2,\n        y: y2,\n        placement,\n        middlewareData\n      } = state;\n      const diffCoords = await convertValueToCoords(state, options);\n      if (placement === ((_middlewareData$offse = middlewareData.offset) == null ? void 0 : _middlewareData$offse.placement) && (_middlewareData$arrow = middlewareData.arrow) != null && _middlewareData$arrow.alignmentOffset) {\n        return {};\n      }\n      return {\n        x: x2 + diffCoords.x,\n        y: y2 + diffCoords.y,\n        data: {\n          ...diffCoords,\n          placement\n        }\n      };\n    }\n  };\n};\nconst shift$2 = function(options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    name: \"shift\",\n    options,\n    async fn(state) {\n      const {\n        x: x2,\n        y: y2,\n        placement\n      } = state;\n      const {\n        mainAxis: checkMainAxis = true,\n        crossAxis: checkCrossAxis = false,\n        limiter = {\n          fn: (_ref) => {\n            let {\n              x: x3,\n              y: y3\n            } = _ref;\n            return {\n              x: x3,\n              y: y3\n            };\n          }\n        },\n        ...detectOverflowOptions\n      } = evaluate(options, state);\n      const coords = {\n        x: x2,\n        y: y2\n      };\n      const overflow = await detectOverflow$1(state, detectOverflowOptions);\n      const crossAxis = getSideAxis(getSide(placement));\n      const mainAxis = getOppositeAxis(crossAxis);\n      let mainAxisCoord = coords[mainAxis];\n      let crossAxisCoord = coords[crossAxis];\n      if (checkMainAxis) {\n        const minSide = mainAxis === \"y\" ? \"top\" : \"left\";\n        const maxSide = mainAxis === \"y\" ? \"bottom\" : \"right\";\n        const min2 = mainAxisCoord + overflow[minSide];\n        const max2 = mainAxisCoord - overflow[maxSide];\n        mainAxisCoord = clamp(min2, mainAxisCoord, max2);\n      }\n      if (checkCrossAxis) {\n        const minSide = crossAxis === \"y\" ? \"top\" : \"left\";\n        const maxSide = crossAxis === \"y\" ? \"bottom\" : \"right\";\n        const min2 = crossAxisCoord + overflow[minSide];\n        const max2 = crossAxisCoord - overflow[maxSide];\n        crossAxisCoord = clamp(min2, crossAxisCoord, max2);\n      }\n      const limitedCoords = limiter.fn({\n        ...state,\n        [mainAxis]: mainAxisCoord,\n        [crossAxis]: crossAxisCoord\n      });\n      return {\n        ...limitedCoords,\n        data: {\n          x: limitedCoords.x - x2,\n          y: limitedCoords.y - y2,\n          enabled: {\n            [mainAxis]: checkMainAxis,\n            [crossAxis]: checkCrossAxis\n          }\n        }\n      };\n    }\n  };\n};\nconst size$2 = function(options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    name: \"size\",\n    options,\n    async fn(state) {\n      var _state$middlewareData, _state$middlewareData2;\n      const {\n        placement,\n        rects,\n        platform: platform2,\n        elements\n      } = state;\n      const {\n        apply = () => {\n        },\n        ...detectOverflowOptions\n      } = evaluate(options, state);\n      const overflow = await detectOverflow$1(state, detectOverflowOptions);\n      const side = getSide(placement);\n      const alignment = getAlignment(placement);\n      const isYAxis = getSideAxis(placement) === \"y\";\n      const {\n        width,\n        height\n      } = rects.floating;\n      let heightSide;\n      let widthSide;\n      if (side === \"top\" || side === \"bottom\") {\n        heightSide = side;\n        widthSide = alignment === (await (platform2.isRTL == null ? void 0 : platform2.isRTL(elements.floating)) ? \"start\" : \"end\") ? \"left\" : \"right\";\n      } else {\n        widthSide = side;\n        heightSide = alignment === \"end\" ? \"top\" : \"bottom\";\n      }\n      const maximumClippingHeight = height - overflow.top - overflow.bottom;\n      const maximumClippingWidth = width - overflow.left - overflow.right;\n      const overflowAvailableHeight = min(height - overflow[heightSide], maximumClippingHeight);\n      const overflowAvailableWidth = min(width - overflow[widthSide], maximumClippingWidth);\n      const noShift = !state.middlewareData.shift;\n      let availableHeight = overflowAvailableHeight;\n      let availableWidth = overflowAvailableWidth;\n      if ((_state$middlewareData = state.middlewareData.shift) != null && _state$middlewareData.enabled.x) {\n        availableWidth = maximumClippingWidth;\n      }\n      if ((_state$middlewareData2 = state.middlewareData.shift) != null && _state$middlewareData2.enabled.y) {\n        availableHeight = maximumClippingHeight;\n      }\n      if (noShift && !alignment) {\n        const xMin = max(overflow.left, 0);\n        const xMax = max(overflow.right, 0);\n        const yMin = max(overflow.top, 0);\n        const yMax = max(overflow.bottom, 0);\n        if (isYAxis) {\n          availableWidth = width - 2 * (xMin !== 0 || xMax !== 0 ? xMin + xMax : max(overflow.left, overflow.right));\n        } else {\n          availableHeight = height - 2 * (yMin !== 0 || yMax !== 0 ? yMin + yMax : max(overflow.top, overflow.bottom));\n        }\n      }\n      await apply({\n        ...state,\n        availableWidth,\n        availableHeight\n      });\n      const nextDimensions = await platform2.getDimensions(elements.floating);\n      if (width !== nextDimensions.width || height !== nextDimensions.height) {\n        return {\n          reset: {\n            rects: true\n          }\n        };\n      }\n      return {};\n    }\n  };\n};\nfunction getCssDimensions(element) {\n  const css = getComputedStyle$1(element);\n  let width = parseFloat(css.width) || 0;\n  let height = parseFloat(css.height) || 0;\n  const hasOffset = isHTMLElement(element);\n  const offsetWidth = hasOffset ? element.offsetWidth : width;\n  const offsetHeight = hasOffset ? element.offsetHeight : height;\n  const shouldFallback = round(width) !== offsetWidth || round(height) !== offsetHeight;\n  if (shouldFallback) {\n    width = offsetWidth;\n    height = offsetHeight;\n  }\n  return {\n    width,\n    height,\n    $: shouldFallback\n  };\n}\nfunction unwrapElement(element) {\n  return !isElement(element) ? element.contextElement : element;\n}\nfunction getScale(element) {\n  const domElement = unwrapElement(element);\n  if (!isHTMLElement(domElement)) {\n    return createCoords(1);\n  }\n  const rect = domElement.getBoundingClientRect();\n  const {\n    width,\n    height,\n    $: $2\n  } = getCssDimensions(domElement);\n  let x2 = ($2 ? round(rect.width) : rect.width) / width;\n  let y2 = ($2 ? round(rect.height) : rect.height) / height;\n  if (!x2 || !Number.isFinite(x2)) {\n    x2 = 1;\n  }\n  if (!y2 || !Number.isFinite(y2)) {\n    y2 = 1;\n  }\n  return {\n    x: x2,\n    y: y2\n  };\n}\nconst noOffsets = /* @__PURE__ */ createCoords(0);\nfunction getVisualOffsets(element) {\n  const win = getWindow(element);\n  if (!isWebKit() || !win.visualViewport) {\n    return noOffsets;\n  }\n  return {\n    x: win.visualViewport.offsetLeft,\n    y: win.visualViewport.offsetTop\n  };\n}\nfunction shouldAddVisualOffsets(element, isFixed, floatingOffsetParent) {\n  if (isFixed === void 0) {\n    isFixed = false;\n  }\n  if (!floatingOffsetParent || isFixed && floatingOffsetParent !== getWindow(element)) {\n    return false;\n  }\n  return isFixed;\n}\nfunction getBoundingClientRect(element, includeScale, isFixedStrategy, offsetParent) {\n  if (includeScale === void 0) {\n    includeScale = false;\n  }\n  if (isFixedStrategy === void 0) {\n    isFixedStrategy = false;\n  }\n  const clientRect = element.getBoundingClientRect();\n  const domElement = unwrapElement(element);\n  let scale = createCoords(1);\n  if (includeScale) {\n    if (offsetParent) {\n      if (isElement(offsetParent)) {\n        scale = getScale(offsetParent);\n      }\n    } else {\n      scale = getScale(element);\n    }\n  }\n  const visualOffsets = shouldAddVisualOffsets(domElement, isFixedStrategy, offsetParent) ? getVisualOffsets(domElement) : createCoords(0);\n  let x2 = (clientRect.left + visualOffsets.x) / scale.x;\n  let y2 = (clientRect.top + visualOffsets.y) / scale.y;\n  let width = clientRect.width / scale.x;\n  let height = clientRect.height / scale.y;\n  if (domElement) {\n    const win = getWindow(domElement);\n    const offsetWin = offsetParent && isElement(offsetParent) ? getWindow(offsetParent) : offsetParent;\n    let currentWin = win;\n    let currentIFrame = getFrameElement(currentWin);\n    while (currentIFrame && offsetParent && offsetWin !== currentWin) {\n      const iframeScale = getScale(currentIFrame);\n      const iframeRect = currentIFrame.getBoundingClientRect();\n      const css = getComputedStyle$1(currentIFrame);\n      const left = iframeRect.left + (currentIFrame.clientLeft + parseFloat(css.paddingLeft)) * iframeScale.x;\n      const top = iframeRect.top + (currentIFrame.clientTop + parseFloat(css.paddingTop)) * iframeScale.y;\n      x2 *= iframeScale.x;\n      y2 *= iframeScale.y;\n      width *= iframeScale.x;\n      height *= iframeScale.y;\n      x2 += left;\n      y2 += top;\n      currentWin = getWindow(currentIFrame);\n      currentIFrame = getFrameElement(currentWin);\n    }\n  }\n  return rectToClientRect({\n    width,\n    height,\n    x: x2,\n    y: y2\n  });\n}\nfunction getWindowScrollBarX(element, rect) {\n  const leftScroll = getNodeScroll(element).scrollLeft;\n  if (!rect) {\n    return getBoundingClientRect(getDocumentElement(element)).left + leftScroll;\n  }\n  return rect.left + leftScroll;\n}\nfunction getHTMLOffset(documentElement, scroll, ignoreScrollbarX) {\n  if (ignoreScrollbarX === void 0) {\n    ignoreScrollbarX = false;\n  }\n  const htmlRect = documentElement.getBoundingClientRect();\n  const x2 = htmlRect.left + scroll.scrollLeft - (ignoreScrollbarX ? 0 : (\n    // RTL <body> scrollbar.\n    getWindowScrollBarX(documentElement, htmlRect)\n  ));\n  const y2 = htmlRect.top + scroll.scrollTop;\n  return {\n    x: x2,\n    y: y2\n  };\n}\nfunction convertOffsetParentRelativeRectToViewportRelativeRect(_ref) {\n  let {\n    elements,\n    rect,\n    offsetParent,\n    strategy\n  } = _ref;\n  const isFixed = strategy === \"fixed\";\n  const documentElement = getDocumentElement(offsetParent);\n  const topLayer = elements ? isTopLayer(elements.floating) : false;\n  if (offsetParent === documentElement || topLayer && isFixed) {\n    return rect;\n  }\n  let scroll = {\n    scrollLeft: 0,\n    scrollTop: 0\n  };\n  let scale = createCoords(1);\n  const offsets = createCoords(0);\n  const isOffsetParentAnElement = isHTMLElement(offsetParent);\n  if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {\n    if (getNodeName(offsetParent) !== \"body\" || isOverflowElement(documentElement)) {\n      scroll = getNodeScroll(offsetParent);\n    }\n    if (isHTMLElement(offsetParent)) {\n      const offsetRect = getBoundingClientRect(offsetParent);\n      scale = getScale(offsetParent);\n      offsets.x = offsetRect.x + offsetParent.clientLeft;\n      offsets.y = offsetRect.y + offsetParent.clientTop;\n    }\n  }\n  const htmlOffset = documentElement && !isOffsetParentAnElement && !isFixed ? getHTMLOffset(documentElement, scroll, true) : createCoords(0);\n  return {\n    width: rect.width * scale.x,\n    height: rect.height * scale.y,\n    x: rect.x * scale.x - scroll.scrollLeft * scale.x + offsets.x + htmlOffset.x,\n    y: rect.y * scale.y - scroll.scrollTop * scale.y + offsets.y + htmlOffset.y\n  };\n}\nfunction getClientRects(element) {\n  return Array.from(element.getClientRects());\n}\nfunction getDocumentRect(element) {\n  const html = getDocumentElement(element);\n  const scroll = getNodeScroll(element);\n  const body = element.ownerDocument.body;\n  const width = max(html.scrollWidth, html.clientWidth, body.scrollWidth, body.clientWidth);\n  const height = max(html.scrollHeight, html.clientHeight, body.scrollHeight, body.clientHeight);\n  let x2 = -scroll.scrollLeft + getWindowScrollBarX(element);\n  const y2 = -scroll.scrollTop;\n  if (getComputedStyle$1(body).direction === \"rtl\") {\n    x2 += max(html.clientWidth, body.clientWidth) - width;\n  }\n  return {\n    width,\n    height,\n    x: x2,\n    y: y2\n  };\n}\nfunction getViewportRect(element, strategy) {\n  const win = getWindow(element);\n  const html = getDocumentElement(element);\n  const visualViewport = win.visualViewport;\n  let width = html.clientWidth;\n  let height = html.clientHeight;\n  let x2 = 0;\n  let y2 = 0;\n  if (visualViewport) {\n    width = visualViewport.width;\n    height = visualViewport.height;\n    const visualViewportBased = isWebKit();\n    if (!visualViewportBased || visualViewportBased && strategy === \"fixed\") {\n      x2 = visualViewport.offsetLeft;\n      y2 = visualViewport.offsetTop;\n    }\n  }\n  return {\n    width,\n    height,\n    x: x2,\n    y: y2\n  };\n}\nfunction getInnerBoundingClientRect(element, strategy) {\n  const clientRect = getBoundingClientRect(element, true, strategy === \"fixed\");\n  const top = clientRect.top + element.clientTop;\n  const left = clientRect.left + element.clientLeft;\n  const scale = isHTMLElement(element) ? getScale(element) : createCoords(1);\n  const width = element.clientWidth * scale.x;\n  const height = element.clientHeight * scale.y;\n  const x2 = left * scale.x;\n  const y2 = top * scale.y;\n  return {\n    width,\n    height,\n    x: x2,\n    y: y2\n  };\n}\nfunction getClientRectFromClippingAncestor(element, clippingAncestor, strategy) {\n  let rect;\n  if (clippingAncestor === \"viewport\") {\n    rect = getViewportRect(element, strategy);\n  } else if (clippingAncestor === \"document\") {\n    rect = getDocumentRect(getDocumentElement(element));\n  } else if (isElement(clippingAncestor)) {\n    rect = getInnerBoundingClientRect(clippingAncestor, strategy);\n  } else {\n    const visualOffsets = getVisualOffsets(element);\n    rect = {\n      x: clippingAncestor.x - visualOffsets.x,\n      y: clippingAncestor.y - visualOffsets.y,\n      width: clippingAncestor.width,\n      height: clippingAncestor.height\n    };\n  }\n  return rectToClientRect(rect);\n}\nfunction hasFixedPositionAncestor(element, stopNode) {\n  const parentNode = getParentNode(element);\n  if (parentNode === stopNode || !isElement(parentNode) || isLastTraversableNode(parentNode)) {\n    return false;\n  }\n  return getComputedStyle$1(parentNode).position === \"fixed\" || hasFixedPositionAncestor(parentNode, stopNode);\n}\nfunction getClippingElementAncestors(element, cache) {\n  const cachedResult = cache.get(element);\n  if (cachedResult) {\n    return cachedResult;\n  }\n  let result = getOverflowAncestors(element, [], false).filter((el) => isElement(el) && getNodeName(el) !== \"body\");\n  let currentContainingBlockComputedStyle = null;\n  const elementIsFixed = getComputedStyle$1(element).position === \"fixed\";\n  let currentNode = elementIsFixed ? getParentNode(element) : element;\n  while (isElement(currentNode) && !isLastTraversableNode(currentNode)) {\n    const computedStyle = getComputedStyle$1(currentNode);\n    const currentNodeIsContaining = isContainingBlock(currentNode);\n    if (!currentNodeIsContaining && computedStyle.position === \"fixed\") {\n      currentContainingBlockComputedStyle = null;\n    }\n    const shouldDropCurrentNode = elementIsFixed ? !currentNodeIsContaining && !currentContainingBlockComputedStyle : !currentNodeIsContaining && computedStyle.position === \"static\" && !!currentContainingBlockComputedStyle && [\"absolute\", \"fixed\"].includes(currentContainingBlockComputedStyle.position) || isOverflowElement(currentNode) && !currentNodeIsContaining && hasFixedPositionAncestor(element, currentNode);\n    if (shouldDropCurrentNode) {\n      result = result.filter((ancestor) => ancestor !== currentNode);\n    } else {\n      currentContainingBlockComputedStyle = computedStyle;\n    }\n    currentNode = getParentNode(currentNode);\n  }\n  cache.set(element, result);\n  return result;\n}\nfunction getClippingRect(_ref) {\n  let {\n    element,\n    boundary,\n    rootBoundary,\n    strategy\n  } = _ref;\n  const elementClippingAncestors = boundary === \"clippingAncestors\" ? isTopLayer(element) ? [] : getClippingElementAncestors(element, this._c) : [].concat(boundary);\n  const clippingAncestors = [...elementClippingAncestors, rootBoundary];\n  const firstClippingAncestor = clippingAncestors[0];\n  const clippingRect = clippingAncestors.reduce((accRect, clippingAncestor) => {\n    const rect = getClientRectFromClippingAncestor(element, clippingAncestor, strategy);\n    accRect.top = max(rect.top, accRect.top);\n    accRect.right = min(rect.right, accRect.right);\n    accRect.bottom = min(rect.bottom, accRect.bottom);\n    accRect.left = max(rect.left, accRect.left);\n    return accRect;\n  }, getClientRectFromClippingAncestor(element, firstClippingAncestor, strategy));\n  return {\n    width: clippingRect.right - clippingRect.left,\n    height: clippingRect.bottom - clippingRect.top,\n    x: clippingRect.left,\n    y: clippingRect.top\n  };\n}\nfunction getDimensions(element) {\n  const {\n    width,\n    height\n  } = getCssDimensions(element);\n  return {\n    width,\n    height\n  };\n}\nfunction getRectRelativeToOffsetParent(element, offsetParent, strategy) {\n  const isOffsetParentAnElement = isHTMLElement(offsetParent);\n  const documentElement = getDocumentElement(offsetParent);\n  const isFixed = strategy === \"fixed\";\n  const rect = getBoundingClientRect(element, true, isFixed, offsetParent);\n  let scroll = {\n    scrollLeft: 0,\n    scrollTop: 0\n  };\n  const offsets = createCoords(0);\n  function setLeftRTLScrollbarOffset() {\n    offsets.x = getWindowScrollBarX(documentElement);\n  }\n  if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {\n    if (getNodeName(offsetParent) !== \"body\" || isOverflowElement(documentElement)) {\n      scroll = getNodeScroll(offsetParent);\n    }\n    if (isOffsetParentAnElement) {\n      const offsetRect = getBoundingClientRect(offsetParent, true, isFixed, offsetParent);\n      offsets.x = offsetRect.x + offsetParent.clientLeft;\n      offsets.y = offsetRect.y + offsetParent.clientTop;\n    } else if (documentElement) {\n      setLeftRTLScrollbarOffset();\n    }\n  }\n  if (isFixed && !isOffsetParentAnElement && documentElement) {\n    setLeftRTLScrollbarOffset();\n  }\n  const htmlOffset = documentElement && !isOffsetParentAnElement && !isFixed ? getHTMLOffset(documentElement, scroll) : createCoords(0);\n  const x2 = rect.left + scroll.scrollLeft - offsets.x - htmlOffset.x;\n  const y2 = rect.top + scroll.scrollTop - offsets.y - htmlOffset.y;\n  return {\n    x: x2,\n    y: y2,\n    width: rect.width,\n    height: rect.height\n  };\n}\nfunction isStaticPositioned(element) {\n  return getComputedStyle$1(element).position === \"static\";\n}\nfunction getTrueOffsetParent(element, polyfill) {\n  if (!isHTMLElement(element) || getComputedStyle$1(element).position === \"fixed\") {\n    return null;\n  }\n  if (polyfill) {\n    return polyfill(element);\n  }\n  let rawOffsetParent = element.offsetParent;\n  if (getDocumentElement(element) === rawOffsetParent) {\n    rawOffsetParent = rawOffsetParent.ownerDocument.body;\n  }\n  return rawOffsetParent;\n}\nfunction getOffsetParent(element, polyfill) {\n  const win = getWindow(element);\n  if (isTopLayer(element)) {\n    return win;\n  }\n  if (!isHTMLElement(element)) {\n    let svgOffsetParent = getParentNode(element);\n    while (svgOffsetParent && !isLastTraversableNode(svgOffsetParent)) {\n      if (isElement(svgOffsetParent) && !isStaticPositioned(svgOffsetParent)) {\n        return svgOffsetParent;\n      }\n      svgOffsetParent = getParentNode(svgOffsetParent);\n    }\n    return win;\n  }\n  let offsetParent = getTrueOffsetParent(element, polyfill);\n  while (offsetParent && isTableElement(offsetParent) && isStaticPositioned(offsetParent)) {\n    offsetParent = getTrueOffsetParent(offsetParent, polyfill);\n  }\n  if (offsetParent && isLastTraversableNode(offsetParent) && isStaticPositioned(offsetParent) && !isContainingBlock(offsetParent)) {\n    return win;\n  }\n  return offsetParent || getContainingBlock(element) || win;\n}\nconst getElementRects = async function(data) {\n  const getOffsetParentFn = this.getOffsetParent || getOffsetParent;\n  const getDimensionsFn = this.getDimensions;\n  const floatingDimensions = await getDimensionsFn(data.floating);\n  return {\n    reference: getRectRelativeToOffsetParent(data.reference, await getOffsetParentFn(data.floating), data.strategy),\n    floating: {\n      x: 0,\n      y: 0,\n      width: floatingDimensions.width,\n      height: floatingDimensions.height\n    }\n  };\n};\nfunction isRTL(element) {\n  return getComputedStyle$1(element).direction === \"rtl\";\n}\nconst platform = {\n  convertOffsetParentRelativeRectToViewportRelativeRect,\n  getDocumentElement,\n  getClippingRect,\n  getOffsetParent,\n  getElementRects,\n  getClientRects,\n  getDimensions,\n  getScale,\n  isElement,\n  isRTL\n};\nfunction rectsAreEqual(a3, b2) {\n  return a3.x === b2.x && a3.y === b2.y && a3.width === b2.width && a3.height === b2.height;\n}\nfunction observeMove(element, onMove) {\n  let io = null;\n  let timeoutId;\n  const root = getDocumentElement(element);\n  function cleanup() {\n    var _io;\n    clearTimeout(timeoutId);\n    (_io = io) == null || _io.disconnect();\n    io = null;\n  }\n  function refresh(skip, threshold) {\n    if (skip === void 0) {\n      skip = false;\n    }\n    if (threshold === void 0) {\n      threshold = 1;\n    }\n    cleanup();\n    const elementRectForRootMargin = element.getBoundingClientRect();\n    const {\n      left,\n      top,\n      width,\n      height\n    } = elementRectForRootMargin;\n    if (!skip) {\n      onMove();\n    }\n    if (!width || !height) {\n      return;\n    }\n    const insetTop = floor(top);\n    const insetRight = floor(root.clientWidth - (left + width));\n    const insetBottom = floor(root.clientHeight - (top + height));\n    const insetLeft = floor(left);\n    const rootMargin = -insetTop + \"px \" + -insetRight + \"px \" + -insetBottom + \"px \" + -insetLeft + \"px\";\n    const options = {\n      rootMargin,\n      threshold: max(0, min(1, threshold)) || 1\n    };\n    let isFirstUpdate = true;\n    function handleObserve(entries) {\n      const ratio = entries[0].intersectionRatio;\n      if (ratio !== threshold) {\n        if (!isFirstUpdate) {\n          return refresh();\n        }\n        if (!ratio) {\n          timeoutId = setTimeout(() => {\n            refresh(false, 1e-7);\n          }, 1e3);\n        } else {\n          refresh(false, ratio);\n        }\n      }\n      if (ratio === 1 && !rectsAreEqual(elementRectForRootMargin, element.getBoundingClientRect())) {\n        refresh();\n      }\n      isFirstUpdate = false;\n    }\n    try {\n      io = new IntersectionObserver(handleObserve, {\n        ...options,\n        // Handle <iframe>s\n        root: root.ownerDocument\n      });\n    } catch (_e) {\n      io = new IntersectionObserver(handleObserve, options);\n    }\n    io.observe(element);\n  }\n  refresh(true);\n  return cleanup;\n}\nfunction autoUpdate(reference, floating, update, options) {\n  if (options === void 0) {\n    options = {};\n  }\n  const {\n    ancestorScroll = true,\n    ancestorResize = true,\n    elementResize = typeof ResizeObserver === \"function\",\n    layoutShift = typeof IntersectionObserver === \"function\",\n    animationFrame = false\n  } = options;\n  const referenceEl = unwrapElement(reference);\n  const ancestors = ancestorScroll || ancestorResize ? [...referenceEl ? getOverflowAncestors(referenceEl) : [], ...getOverflowAncestors(floating)] : [];\n  ancestors.forEach((ancestor) => {\n    ancestorScroll && ancestor.addEventListener(\"scroll\", update, {\n      passive: true\n    });\n    ancestorResize && ancestor.addEventListener(\"resize\", update);\n  });\n  const cleanupIo = referenceEl && layoutShift ? observeMove(referenceEl, update) : null;\n  let reobserveFrame = -1;\n  let resizeObserver = null;\n  if (elementResize) {\n    resizeObserver = new ResizeObserver((_ref) => {\n      let [firstEntry] = _ref;\n      if (firstEntry && firstEntry.target === referenceEl && resizeObserver) {\n        resizeObserver.unobserve(floating);\n        cancelAnimationFrame(reobserveFrame);\n        reobserveFrame = requestAnimationFrame(() => {\n          var _resizeObserver;\n          (_resizeObserver = resizeObserver) == null || _resizeObserver.observe(floating);\n        });\n      }\n      update();\n    });\n    if (referenceEl && !animationFrame) {\n      resizeObserver.observe(referenceEl);\n    }\n    resizeObserver.observe(floating);\n  }\n  let frameId;\n  let prevRefRect = animationFrame ? getBoundingClientRect(reference) : null;\n  if (animationFrame) {\n    frameLoop();\n  }\n  function frameLoop() {\n    const nextRefRect = getBoundingClientRect(reference);\n    if (prevRefRect && !rectsAreEqual(prevRefRect, nextRefRect)) {\n      update();\n    }\n    prevRefRect = nextRefRect;\n    frameId = requestAnimationFrame(frameLoop);\n  }\n  update();\n  return () => {\n    var _resizeObserver2;\n    ancestors.forEach((ancestor) => {\n      ancestorScroll && ancestor.removeEventListener(\"scroll\", update);\n      ancestorResize && ancestor.removeEventListener(\"resize\", update);\n    });\n    cleanupIo == null || cleanupIo();\n    (_resizeObserver2 = resizeObserver) == null || _resizeObserver2.disconnect();\n    resizeObserver = null;\n    if (animationFrame) {\n      cancelAnimationFrame(frameId);\n    }\n  };\n}\nconst detectOverflow = detectOverflow$1;\nconst offset$1 = offset$2;\nconst shift$1 = shift$2;\nconst flip$1 = flip$2;\nconst size$1 = size$2;\nconst computePosition = (reference, floating, options) => {\n  const cache = /* @__PURE__ */ new Map();\n  const mergedOptions = {\n    platform,\n    ...options\n  };\n  const platformWithCache = {\n    ...mergedOptions.platform,\n    _c: cache\n  };\n  return computePosition$1(reference, floating, {\n    ...mergedOptions,\n    platform: platformWithCache\n  });\n};\nvar index$1 = typeof document !== \"undefined\" ? _$3 : y$6;\nfunction deepEqual(a3, b2) {\n  if (a3 === b2) {\n    return true;\n  }\n  if (typeof a3 !== typeof b2) {\n    return false;\n  }\n  if (typeof a3 === \"function\" && a3.toString() === b2.toString()) {\n    return true;\n  }\n  let length;\n  let i2;\n  let keys;\n  if (a3 && b2 && typeof a3 === \"object\") {\n    if (Array.isArray(a3)) {\n      length = a3.length;\n      if (length !== b2.length) return false;\n      for (i2 = length; i2-- !== 0; ) {\n        if (!deepEqual(a3[i2], b2[i2])) {\n          return false;\n        }\n      }\n      return true;\n    }\n    keys = Object.keys(a3);\n    length = keys.length;\n    if (length !== Object.keys(b2).length) {\n      return false;\n    }\n    for (i2 = length; i2-- !== 0; ) {\n      if (!{}.hasOwnProperty.call(b2, keys[i2])) {\n        return false;\n      }\n    }\n    for (i2 = length; i2-- !== 0; ) {\n      const key = keys[i2];\n      if (key === \"_owner\" && a3.$$typeof) {\n        continue;\n      }\n      if (!deepEqual(a3[key], b2[key])) {\n        return false;\n      }\n    }\n    return true;\n  }\n  return a3 !== a3 && b2 !== b2;\n}\nfunction getDPR(element) {\n  if (typeof window === \"undefined\") {\n    return 1;\n  }\n  const win = element.ownerDocument.defaultView || window;\n  return win.devicePixelRatio || 1;\n}\nfunction roundByDPR(element, value) {\n  const dpr = getDPR(element);\n  return Math.round(value * dpr) / dpr;\n}\nfunction useLatestRef(value) {\n  const ref = A$3(value);\n  index$1(() => {\n    ref.current = value;\n  });\n  return ref;\n}\nfunction useFloating$1(options) {\n  if (options === void 0) {\n    options = {};\n  }\n  const {\n    placement = \"bottom\",\n    strategy = \"absolute\",\n    middleware = [],\n    platform: platform2,\n    elements: {\n      reference: externalReference,\n      floating: externalFloating\n    } = {},\n    transform = true,\n    whileElementsMounted,\n    open\n  } = options;\n  const [data, setData] = d$4({\n    x: 0,\n    y: 0,\n    strategy,\n    placement,\n    middlewareData: {},\n    isPositioned: false\n  });\n  const [latestMiddleware, setLatestMiddleware] = d$4(middleware);\n  if (!deepEqual(latestMiddleware, middleware)) {\n    setLatestMiddleware(middleware);\n  }\n  const [_reference, _setReference] = d$4(null);\n  const [_floating, _setFloating] = d$4(null);\n  const setReference = q$3((node) => {\n    if (node !== referenceRef.current) {\n      referenceRef.current = node;\n      _setReference(node);\n    }\n  }, []);\n  const setFloating = q$3((node) => {\n    if (node !== floatingRef.current) {\n      floatingRef.current = node;\n      _setFloating(node);\n    }\n  }, []);\n  const referenceEl = externalReference || _reference;\n  const floatingEl = externalFloating || _floating;\n  const referenceRef = A$3(null);\n  const floatingRef = A$3(null);\n  const dataRef = A$3(data);\n  const hasWhileElementsMounted = whileElementsMounted != null;\n  const whileElementsMountedRef = useLatestRef(whileElementsMounted);\n  const platformRef = useLatestRef(platform2);\n  const openRef = useLatestRef(open);\n  const update = q$3(() => {\n    if (!referenceRef.current || !floatingRef.current) {\n      return;\n    }\n    const config = {\n      placement,\n      strategy,\n      middleware: latestMiddleware\n    };\n    if (platformRef.current) {\n      config.platform = platformRef.current;\n    }\n    computePosition(referenceRef.current, floatingRef.current, config).then((data2) => {\n      const fullData = {\n        ...data2,\n        // The floating element's position may be recomputed while it's closed\n        // but still mounted (such as when transitioning out). To ensure\n        // `isPositioned` will be `false` initially on the next open, avoid\n        // setting it to `true` when `open === false` (must be specified).\n        isPositioned: openRef.current !== false\n      };\n      if (isMountedRef.current && !deepEqual(dataRef.current, fullData)) {\n        dataRef.current = fullData;\n        En(() => {\n          setData(fullData);\n        });\n      }\n    });\n  }, [latestMiddleware, placement, strategy, platformRef, openRef]);\n  index$1(() => {\n    if (open === false && dataRef.current.isPositioned) {\n      dataRef.current.isPositioned = false;\n      setData((data2) => ({\n        ...data2,\n        isPositioned: false\n      }));\n    }\n  }, [open]);\n  const isMountedRef = A$3(false);\n  index$1(() => {\n    isMountedRef.current = true;\n    return () => {\n      isMountedRef.current = false;\n    };\n  }, []);\n  index$1(() => {\n    if (referenceEl) referenceRef.current = referenceEl;\n    if (floatingEl) floatingRef.current = floatingEl;\n    if (referenceEl && floatingEl) {\n      if (whileElementsMountedRef.current) {\n        return whileElementsMountedRef.current(referenceEl, floatingEl, update);\n      }\n      update();\n    }\n  }, [referenceEl, floatingEl, update, whileElementsMountedRef, hasWhileElementsMounted]);\n  const refs = T$5(() => ({\n    reference: referenceRef,\n    floating: floatingRef,\n    setReference,\n    setFloating\n  }), [setReference, setFloating]);\n  const elements = T$5(() => ({\n    reference: referenceEl,\n    floating: floatingEl\n  }), [referenceEl, floatingEl]);\n  const floatingStyles = T$5(() => {\n    const initialStyles = {\n      position: strategy,\n      left: 0,\n      top: 0\n    };\n    if (!elements.floating) {\n      return initialStyles;\n    }\n    const x2 = roundByDPR(elements.floating, data.x);\n    const y2 = roundByDPR(elements.floating, data.y);\n    if (transform) {\n      return {\n        ...initialStyles,\n        transform: \"translate(\" + x2 + \"px, \" + y2 + \"px)\",\n        ...getDPR(elements.floating) >= 1.5 && {\n          willChange: \"transform\"\n        }\n      };\n    }\n    return {\n      position: strategy,\n      left: x2,\n      top: y2\n    };\n  }, [strategy, transform, elements.floating, data.x, data.y]);\n  return T$5(() => ({\n    ...data,\n    update,\n    refs,\n    elements,\n    floatingStyles\n  }), [data, update, refs, elements, floatingStyles]);\n}\nconst offset = (options, deps) => ({\n  ...offset$1(options),\n  options: [options, deps]\n});\nconst shift = (options, deps) => ({\n  ...shift$1(options),\n  options: [options, deps]\n});\nconst flip = (options, deps) => ({\n  ...flip$1(options),\n  options: [options, deps]\n});\nconst size = (options, deps) => ({\n  ...size$1(options),\n  options: [options, deps]\n});\nconst SafeReact = {\n  ...t$4\n};\nconst useInsertionEffect = SafeReact.useInsertionEffect;\nconst useSafeInsertionEffect = useInsertionEffect || ((fn2) => fn2());\nfunction useEffectEvent(callback) {\n  const ref = A$3(() => {\n    if (true) {\n      throw new Error(\"Cannot call an event handler while rendering.\");\n    }\n  });\n  useSafeInsertionEffect(() => {\n    ref.current = callback;\n  });\n  return q$3(function() {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    return ref.current == null ? void 0 : ref.current(...args);\n  }, []);\n}\nvar index = typeof document !== \"undefined\" ? _$3 : y$6;\nlet serverHandoffComplete = false;\nlet count = 0;\nconst genId = () => (\n  // Ensure the id is unique with multiple independent versions of Floating UI\n  // on <React 18\n  \"floating-ui-\" + Math.random().toString(36).slice(2, 6) + count++\n);\nfunction useFloatingId() {\n  const [id, setId] = d$4(() => serverHandoffComplete ? genId() : void 0);\n  index(() => {\n    if (id == null) {\n      setId(genId());\n    }\n  }, []);\n  y$6(() => {\n    serverHandoffComplete = true;\n  }, []);\n  return id;\n}\nconst useReactId = SafeReact.useId;\nconst useId = useReactId || useFloatingId;\nlet devMessageSet;\nif (true) {\n  devMessageSet = /* @__PURE__ */ new Set();\n}\nfunction warn() {\n  var _devMessageSet;\n  for (var _len = arguments.length, messages = new Array(_len), _key = 0; _key < _len; _key++) {\n    messages[_key] = arguments[_key];\n  }\n  const message = \"Floating UI: \" + messages.join(\" \");\n  if (!((_devMessageSet = devMessageSet) != null && _devMessageSet.has(message))) {\n    var _devMessageSet2;\n    (_devMessageSet2 = devMessageSet) == null || _devMessageSet2.add(message);\n    console.warn(message);\n  }\n}\nfunction error() {\n  var _devMessageSet3;\n  for (var _len2 = arguments.length, messages = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n    messages[_key2] = arguments[_key2];\n  }\n  const message = \"Floating UI: \" + messages.join(\" \");\n  if (!((_devMessageSet3 = devMessageSet) != null && _devMessageSet3.has(message))) {\n    var _devMessageSet4;\n    (_devMessageSet4 = devMessageSet) == null || _devMessageSet4.add(message);\n    console.error(message);\n  }\n}\nfunction createPubSub() {\n  const map = /* @__PURE__ */ new Map();\n  return {\n    emit(event, data) {\n      var _map$get;\n      (_map$get = map.get(event)) == null || _map$get.forEach((handler) => handler(data));\n    },\n    on(event, listener) {\n      map.set(event, [...map.get(event) || [], listener]);\n    },\n    off(event, listener) {\n      var _map$get2;\n      map.set(event, ((_map$get2 = map.get(event)) == null ? void 0 : _map$get2.filter((l2) => l2 !== listener)) || []);\n    }\n  };\n}\nconst FloatingNodeContext = /* @__PURE__ */ K$3(null);\nconst FloatingTreeContext = /* @__PURE__ */ K$3(null);\nconst useFloatingParentNodeId = () => {\n  var _React$useContext;\n  return ((_React$useContext = x$4(FloatingNodeContext)) == null ? void 0 : _React$useContext.id) || null;\n};\nconst useFloatingTree = () => x$4(FloatingTreeContext);\nconst FOCUSABLE_ATTRIBUTE = \"data-floating-ui-focusable\";\nfunction useFloatingRootContext(options) {\n  const {\n    open = false,\n    onOpenChange: onOpenChangeProp,\n    elements: elementsProp\n  } = options;\n  const floatingId = useId();\n  const dataRef = A$3({});\n  const [events] = d$4(() => createPubSub());\n  const nested = useFloatingParentNodeId() != null;\n  if (true) {\n    const optionDomReference = elementsProp.reference;\n    if (optionDomReference && !isElement(optionDomReference)) {\n      error(\"Cannot pass a virtual element to the `elements.reference` option,\", \"as it must be a real DOM element. Use `refs.setPositionReference()`\", \"instead.\");\n    }\n  }\n  const [positionReference, setPositionReference] = d$4(elementsProp.reference);\n  const onOpenChange = useEffectEvent((open2, event, reason) => {\n    dataRef.current.openEvent = open2 ? event : void 0;\n    events.emit(\"openchange\", {\n      open: open2,\n      event,\n      reason,\n      nested\n    });\n    onOpenChangeProp == null || onOpenChangeProp(open2, event, reason);\n  });\n  const refs = T$5(() => ({\n    setPositionReference\n  }), []);\n  const elements = T$5(() => ({\n    reference: positionReference || elementsProp.reference || null,\n    floating: elementsProp.floating || null,\n    domReference: elementsProp.reference\n  }), [positionReference, elementsProp.reference, elementsProp.floating]);\n  return T$5(() => ({\n    dataRef,\n    open,\n    onOpenChange,\n    elements,\n    events,\n    floatingId,\n    refs\n  }), [open, onOpenChange, elements, events, floatingId, refs]);\n}\nfunction useFloating(options) {\n  if (options === void 0) {\n    options = {};\n  }\n  const {\n    nodeId\n  } = options;\n  const internalRootContext = useFloatingRootContext({\n    ...options,\n    elements: {\n      reference: null,\n      floating: null,\n      ...options.elements\n    }\n  });\n  const rootContext = options.rootContext || internalRootContext;\n  const computedElements = rootContext.elements;\n  const [_domReference, setDomReference] = d$4(null);\n  const [positionReference, _setPositionReference] = d$4(null);\n  const optionDomReference = computedElements == null ? void 0 : computedElements.domReference;\n  const domReference = optionDomReference || _domReference;\n  const domReferenceRef = A$3(null);\n  const tree = useFloatingTree();\n  index(() => {\n    if (domReference) {\n      domReferenceRef.current = domReference;\n    }\n  }, [domReference]);\n  const position = useFloating$1({\n    ...options,\n    elements: {\n      ...computedElements,\n      ...positionReference && {\n        reference: positionReference\n      }\n    }\n  });\n  const setPositionReference = q$3((node) => {\n    const computedPositionReference = isElement(node) ? {\n      getBoundingClientRect: () => node.getBoundingClientRect(),\n      contextElement: node\n    } : node;\n    _setPositionReference(computedPositionReference);\n    position.refs.setReference(computedPositionReference);\n  }, [position.refs]);\n  const setReference = q$3((node) => {\n    if (isElement(node) || node === null) {\n      domReferenceRef.current = node;\n      setDomReference(node);\n    }\n    if (isElement(position.refs.reference.current) || position.refs.reference.current === null || // Don't allow setting virtual elements using the old technique back to\n    // `null` to support `positionReference` + an unstable `reference`\n    // callback ref.\n    node !== null && !isElement(node)) {\n      position.refs.setReference(node);\n    }\n  }, [position.refs]);\n  const refs = T$5(() => ({\n    ...position.refs,\n    setReference,\n    setPositionReference,\n    domReference: domReferenceRef\n  }), [position.refs, setReference, setPositionReference]);\n  const elements = T$5(() => ({\n    ...position.elements,\n    domReference\n  }), [position.elements, domReference]);\n  const context = T$5(() => ({\n    ...position,\n    ...rootContext,\n    refs,\n    elements,\n    nodeId\n  }), [position, refs, elements, nodeId, rootContext]);\n  index(() => {\n    rootContext.dataRef.current.floatingContext = context;\n    const node = tree == null ? void 0 : tree.nodesRef.current.find((node2) => node2.id === nodeId);\n    if (node) {\n      node.context = context;\n    }\n  });\n  return T$5(() => ({\n    ...position,\n    context,\n    refs,\n    elements\n  }), [position, refs, elements, context]);\n}\nconst ACTIVE_KEY = \"active\";\nconst SELECTED_KEY = \"selected\";\nfunction mergeProps(userProps, propsList, elementKey) {\n  const map = /* @__PURE__ */ new Map();\n  const isItem = elementKey === \"item\";\n  let domUserProps = userProps;\n  if (isItem && userProps) {\n    const {\n      [ACTIVE_KEY]: _2,\n      [SELECTED_KEY]: __,\n      ...validProps\n    } = userProps;\n    domUserProps = validProps;\n  }\n  return {\n    ...elementKey === \"floating\" && {\n      tabIndex: -1,\n      [FOCUSABLE_ATTRIBUTE]: \"\"\n    },\n    ...domUserProps,\n    ...propsList.map((value) => {\n      const propsOrGetProps = value ? value[elementKey] : null;\n      if (typeof propsOrGetProps === \"function\") {\n        return userProps ? propsOrGetProps(userProps) : null;\n      }\n      return propsOrGetProps;\n    }).concat(userProps).reduce((acc, props) => {\n      if (!props) {\n        return acc;\n      }\n      Object.entries(props).forEach((_ref) => {\n        let [key, value] = _ref;\n        if (isItem && [ACTIVE_KEY, SELECTED_KEY].includes(key)) {\n          return;\n        }\n        if (key.indexOf(\"on\") === 0) {\n          if (!map.has(key)) {\n            map.set(key, []);\n          }\n          if (typeof value === \"function\") {\n            var _map$get;\n            (_map$get = map.get(key)) == null || _map$get.push(value);\n            acc[key] = function() {\n              var _map$get2;\n              for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n                args[_key] = arguments[_key];\n              }\n              return (_map$get2 = map.get(key)) == null ? void 0 : _map$get2.map((fn2) => fn2(...args)).find((val) => val !== void 0);\n            };\n          }\n        } else {\n          acc[key] = value;\n        }\n      });\n      return acc;\n    }, {})\n  };\n}\nfunction useInteractions(propsList) {\n  if (propsList === void 0) {\n    propsList = [];\n  }\n  const referenceDeps = propsList.map((key) => key == null ? void 0 : key.reference);\n  const floatingDeps = propsList.map((key) => key == null ? void 0 : key.floating);\n  const itemDeps = propsList.map((key) => key == null ? void 0 : key.item);\n  const getReferenceProps = q$3(\n    (userProps) => mergeProps(userProps, propsList, \"reference\"),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    referenceDeps\n  );\n  const getFloatingProps = q$3(\n    (userProps) => mergeProps(userProps, propsList, \"floating\"),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    floatingDeps\n  );\n  const getItemProps = q$3(\n    (userProps) => mergeProps(userProps, propsList, \"item\"),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    itemDeps\n  );\n  return T$5(() => ({\n    getReferenceProps,\n    getFloatingProps,\n    getItemProps\n  }), [getReferenceProps, getFloatingProps, getItemProps]);\n}\nfunction getArgsWithCustomFloatingHeight(state, height) {\n  return {\n    ...state,\n    rects: {\n      ...state.rects,\n      floating: {\n        ...state.rects.floating,\n        height\n      }\n    }\n  };\n}\nconst inner = (props) => ({\n  name: \"inner\",\n  options: props,\n  async fn(state) {\n    const {\n      listRef,\n      overflowRef,\n      onFallbackChange,\n      offset: innerOffset = 0,\n      index: index2 = 0,\n      minItemsVisible = 4,\n      referenceOverflowThreshold = 0,\n      scrollRef,\n      ...detectOverflowOptions\n    } = evaluate(props, state);\n    const {\n      rects,\n      elements: {\n        floating\n      }\n    } = state;\n    const item = listRef.current[index2];\n    const scrollEl = (scrollRef == null ? void 0 : scrollRef.current) || floating;\n    const clientTop = floating.clientTop || scrollEl.clientTop;\n    const floatingIsBordered = floating.clientTop !== 0;\n    const scrollElIsBordered = scrollEl.clientTop !== 0;\n    const floatingIsScrollEl = floating === scrollEl;\n    if (true) {\n      if (!state.placement.startsWith(\"bottom\")) {\n        warn('`placement` side must be \"bottom\" when using the `inner`', \"middleware.\");\n      }\n    }\n    if (!item) {\n      return {};\n    }\n    const nextArgs = {\n      ...state,\n      ...await offset(-item.offsetTop - floating.clientTop - rects.reference.height / 2 - item.offsetHeight / 2 - innerOffset).fn(state)\n    };\n    const overflow = await detectOverflow(getArgsWithCustomFloatingHeight(nextArgs, scrollEl.scrollHeight + clientTop + floating.clientTop), detectOverflowOptions);\n    const refOverflow = await detectOverflow(nextArgs, {\n      ...detectOverflowOptions,\n      elementContext: \"reference\"\n    });\n    const diffY = max(0, overflow.top);\n    const nextY = nextArgs.y + diffY;\n    const isScrollable = scrollEl.scrollHeight > scrollEl.clientHeight;\n    const rounder = isScrollable ? (v2) => v2 : round;\n    const maxHeight = rounder(max(0, scrollEl.scrollHeight + (floatingIsBordered && floatingIsScrollEl || scrollElIsBordered ? clientTop * 2 : 0) - diffY - max(0, overflow.bottom)));\n    scrollEl.style.maxHeight = maxHeight + \"px\";\n    scrollEl.scrollTop = diffY;\n    if (onFallbackChange) {\n      const shouldFallback = scrollEl.offsetHeight < item.offsetHeight * min(minItemsVisible, listRef.current.length) - 1 || refOverflow.top >= -referenceOverflowThreshold || refOverflow.bottom >= -referenceOverflowThreshold;\n      En(() => onFallbackChange(shouldFallback));\n    }\n    if (overflowRef) {\n      overflowRef.current = await detectOverflow(getArgsWithCustomFloatingHeight({\n        ...nextArgs,\n        y: nextY\n      }, scrollEl.offsetHeight + clientTop + floating.clientTop), detectOverflowOptions);\n    }\n    return {\n      y: nextY\n    };\n  }\n});\nfunction useInnerOffset(context, props) {\n  const {\n    open,\n    elements\n  } = context;\n  const {\n    enabled = true,\n    overflowRef,\n    scrollRef,\n    onChange: unstable_onChange\n  } = props;\n  const onChange = useEffectEvent(unstable_onChange);\n  const controlledScrollingRef = A$3(false);\n  const prevScrollTopRef = A$3(null);\n  const initialOverflowRef = A$3(null);\n  y$6(() => {\n    if (!enabled) return;\n    function onWheel(e2) {\n      if (e2.ctrlKey || !el || overflowRef.current == null) {\n        return;\n      }\n      const dY = e2.deltaY;\n      const isAtTop = overflowRef.current.top >= -0.5;\n      const isAtBottom = overflowRef.current.bottom >= -0.5;\n      const remainingScroll = el.scrollHeight - el.clientHeight;\n      const sign = dY < 0 ? -1 : 1;\n      const method = dY < 0 ? \"max\" : \"min\";\n      if (el.scrollHeight <= el.clientHeight) {\n        return;\n      }\n      if (!isAtTop && dY > 0 || !isAtBottom && dY < 0) {\n        e2.preventDefault();\n        En(() => {\n          onChange((d2) => d2 + Math[method](dY, remainingScroll * sign));\n        });\n      } else if (/firefox/i.test(getUserAgent())) {\n        el.scrollTop += dY;\n      }\n    }\n    const el = (scrollRef == null ? void 0 : scrollRef.current) || elements.floating;\n    if (open && el) {\n      el.addEventListener(\"wheel\", onWheel);\n      requestAnimationFrame(() => {\n        prevScrollTopRef.current = el.scrollTop;\n        if (overflowRef.current != null) {\n          initialOverflowRef.current = {\n            ...overflowRef.current\n          };\n        }\n      });\n      return () => {\n        prevScrollTopRef.current = null;\n        initialOverflowRef.current = null;\n        el.removeEventListener(\"wheel\", onWheel);\n      };\n    }\n  }, [enabled, open, elements.floating, overflowRef, scrollRef, onChange]);\n  const floating = T$5(() => ({\n    onKeyDown() {\n      controlledScrollingRef.current = true;\n    },\n    onWheel() {\n      controlledScrollingRef.current = false;\n    },\n    onPointerMove() {\n      controlledScrollingRef.current = false;\n    },\n    onScroll() {\n      const el = (scrollRef == null ? void 0 : scrollRef.current) || elements.floating;\n      if (!overflowRef.current || !el || !controlledScrollingRef.current) {\n        return;\n      }\n      if (prevScrollTopRef.current !== null) {\n        const scrollDiff = el.scrollTop - prevScrollTopRef.current;\n        if (overflowRef.current.bottom < -0.5 && scrollDiff < -1 || overflowRef.current.top < -0.5 && scrollDiff > 1) {\n          En(() => onChange((d2) => d2 + scrollDiff));\n        }\n      }\n      requestAnimationFrame(() => {\n        prevScrollTopRef.current = el.scrollTop;\n      });\n    }\n  }), [elements.floating, onChange, overflowRef, scrollRef]);\n  return T$5(() => enabled ? {\n    floating\n  } : {}, [enabled, floating]);\n}\nlet y$2 = K$3({ styles: void 0, setReference: () => {\n}, setFloating: () => {\n}, getReferenceProps: () => ({}), getFloatingProps: () => ({}), slot: {} });\ny$2.displayName = \"FloatingContext\";\nlet H$1 = K$3(null);\nH$1.displayName = \"PlacementContext\";\nfunction xe(e2) {\n  return T$5(() => e2 ? typeof e2 == \"string\" ? { to: e2 } : e2 : null, [e2]);\n}\nfunction ye() {\n  return x$4(y$2).setReference;\n}\nfunction Fe() {\n  return x$4(y$2).getReferenceProps;\n}\nfunction be() {\n  let { getFloatingProps: e2, slot: t2 } = x$4(y$2);\n  return q$3((...n2) => Object.assign({}, e2(...n2), { \"data-anchor\": t2.anchor }), [e2, t2]);\n}\nfunction Re(e2 = null) {\n  e2 === false && (e2 = null), typeof e2 == \"string\" && (e2 = { to: e2 });\n  let t2 = x$4(H$1), n2 = T$5(() => e2, [JSON.stringify(e2, (r2, o3) => {\n    var u2;\n    return (u2 = o3 == null ? void 0 : o3.outerHTML) != null ? u2 : o3;\n  })]);\n  n$3(() => {\n    t2 == null || t2(n2 != null ? n2 : null);\n  }, [t2, n2]);\n  let l2 = x$4(y$2);\n  return T$5(() => [l2.setFloating, e2 ? l2.styles : {}], [l2.setFloating, e2, l2.styles]);\n}\nlet q$1 = 4;\nfunction Me({ children: e2, enabled: t2 = true }) {\n  let [n2, l2] = d$4(null), [r2, o3] = d$4(0), u2 = A$3(null), [f2, s2] = d$4(null);\n  pe(f2);\n  let i2 = t2 && n2 !== null && f2 !== null, { to: F2 = \"bottom\", gap: E2 = 0, offset: v2 = 0, padding: c2 = 0, inner: P2 } = ce(n2, f2), [a3, p2 = \"center\"] = F2.split(\" \");\n  n$3(() => {\n    i2 && o3(0);\n  }, [i2]);\n  let { refs: b2, floatingStyles: w2, context: g2 } = useFloating({ open: i2, placement: a3 === \"selection\" ? p2 === \"center\" ? \"bottom\" : `bottom-${p2}` : p2 === \"center\" ? `${a3}` : `${a3}-${p2}`, strategy: \"absolute\", transform: false, middleware: [offset({ mainAxis: a3 === \"selection\" ? 0 : E2, crossAxis: v2 }), shift({ padding: c2 }), a3 !== \"selection\" && flip({ padding: c2 }), a3 === \"selection\" && P2 ? inner({ ...P2, padding: c2, overflowRef: u2, offset: r2, minItemsVisible: q$1, referenceOverflowThreshold: c2, onFallbackChange(h2) {\n    var O2, W2;\n    if (!h2) return;\n    let d2 = g2.elements.floating;\n    if (!d2) return;\n    let T2 = parseFloat(getComputedStyle(d2).scrollPaddingBottom) || 0, $2 = Math.min(q$1, d2.childElementCount), L2 = 0, N2 = 0;\n    for (let m2 of (W2 = (O2 = g2.elements.floating) == null ? void 0 : O2.childNodes) != null ? W2 : []) if (m2 instanceof HTMLElement) {\n      let x2 = m2.offsetTop, k2 = x2 + m2.clientHeight + T2, S2 = d2.scrollTop, U2 = S2 + d2.clientHeight;\n      if (x2 >= S2 && k2 <= U2) $2--;\n      else {\n        N2 = Math.max(0, Math.min(k2, U2) - Math.max(x2, S2)), L2 = m2.clientHeight;\n        break;\n      }\n    }\n    $2 >= 1 && o3((m2) => {\n      let x2 = L2 * $2 - N2 + T2;\n      return m2 >= x2 ? m2 : x2;\n    });\n  } }) : null, size({ padding: c2, apply({ availableWidth: h2, availableHeight: d2, elements: T2 }) {\n    Object.assign(T2.floating.style, { overflow: \"auto\", maxWidth: `${h2}px`, maxHeight: `min(var(--anchor-max-height, 100vh), ${d2}px)` });\n  } })].filter(Boolean), whileElementsMounted: autoUpdate }), [I2 = a3, B2 = p2] = g2.placement.split(\"-\");\n  a3 === \"selection\" && (I2 = \"selection\");\n  let G2 = T$5(() => ({ anchor: [I2, B2].filter(Boolean).join(\" \") }), [I2, B2]), K2 = useInnerOffset(g2, { overflowRef: u2, onChange: o3 }), { getReferenceProps: Q2, getFloatingProps: X2 } = useInteractions([K2]), Y2 = o$4((h2) => {\n    s2(h2), b2.setFloating(h2);\n  });\n  return _$4(H$1.Provider, { value: l2 }, _$4(y$2.Provider, { value: { setFloating: Y2, setReference: b2.setReference, styles: w2, getReferenceProps: Q2, getFloatingProps: X2, slot: G2 } }, e2));\n}\nfunction pe(e2) {\n  n$3(() => {\n    if (!e2) return;\n    let t2 = new MutationObserver(() => {\n      let n2 = window.getComputedStyle(e2).maxHeight, l2 = parseFloat(n2);\n      if (isNaN(l2)) return;\n      let r2 = parseInt(n2);\n      isNaN(r2) || l2 !== r2 && (e2.style.maxHeight = `${Math.ceil(l2)}px`);\n    });\n    return t2.observe(e2, { attributes: true, attributeFilter: [\"style\"] }), () => {\n      t2.disconnect();\n    };\n  }, [e2]);\n}\nfunction ce(e2, t2) {\n  var o3, u2, f2;\n  let n2 = V((o3 = e2 == null ? void 0 : e2.gap) != null ? o3 : \"var(--anchor-gap, 0)\", t2), l2 = V((u2 = e2 == null ? void 0 : e2.offset) != null ? u2 : \"var(--anchor-offset, 0)\", t2), r2 = V((f2 = e2 == null ? void 0 : e2.padding) != null ? f2 : \"var(--anchor-padding, 0)\", t2);\n  return { ...e2, gap: n2, offset: l2, padding: r2 };\n}\nfunction V(e2, t2, n2 = void 0) {\n  let l2 = p$2(), r2 = o$4((s2, i2) => {\n    if (s2 == null) return [n2, null];\n    if (typeof s2 == \"number\") return [s2, null];\n    if (typeof s2 == \"string\") {\n      if (!i2) return [n2, null];\n      let F2 = J$2(s2, i2);\n      return [F2, (E2) => {\n        let v2 = D(s2);\n        {\n          let c2 = v2.map((P2) => window.getComputedStyle(i2).getPropertyValue(P2));\n          l2.requestAnimationFrame(function P2() {\n            l2.nextFrame(P2);\n            let a3 = false;\n            for (let [b2, w2] of v2.entries()) {\n              let g2 = window.getComputedStyle(i2).getPropertyValue(w2);\n              if (c2[b2] !== g2) {\n                c2[b2] = g2, a3 = true;\n                break;\n              }\n            }\n            if (!a3) return;\n            let p2 = J$2(s2, i2);\n            F2 !== p2 && (E2(p2), F2 = p2);\n          });\n        }\n        return l2.dispose;\n      }];\n    }\n    return [n2, null];\n  }), o3 = T$5(() => r2(e2, t2)[0], [e2, t2]), [u2 = o3, f2] = d$4();\n  return n$3(() => {\n    let [s2, i2] = r2(e2, t2);\n    if (f2(s2), !!i2) return i2(f2);\n  }, [e2, t2]), u2;\n}\nfunction D(e2) {\n  let t2 = /var\\((.*)\\)/.exec(e2);\n  if (t2) {\n    let n2 = t2[1].indexOf(\",\");\n    if (n2 === -1) return [t2[1]];\n    let l2 = t2[1].slice(0, n2).trim(), r2 = t2[1].slice(n2 + 1).trim();\n    return r2 ? [l2, ...D(r2)] : [l2];\n  }\n  return [];\n}\nfunction J$2(e2, t2) {\n  let n2 = document.createElement(\"div\");\n  t2.appendChild(n2), n2.style.setProperty(\"margin-top\", \"0px\", \"important\"), n2.style.setProperty(\"margin-top\", e2, \"important\");\n  let l2 = parseFloat(window.getComputedStyle(n2).marginTop) || 0;\n  return t2.removeChild(n2), l2;\n}\nlet n = K$3(null);\nn.displayName = \"OpenClosedContext\";\nvar i$2 = ((e2) => (e2[e2.Open = 1] = \"Open\", e2[e2.Closed = 2] = \"Closed\", e2[e2.Closing = 4] = \"Closing\", e2[e2.Opening = 8] = \"Opening\", e2))(i$2 || {});\nfunction u$2() {\n  return x$4(n);\n}\nfunction c$3({ value: o3, children: t2 }) {\n  return Rn.createElement(n.Provider, { value: o3 }, t2);\n}\nvar withSelector = { exports: {} };\nvar useSyncExternalStoreWithSelector_production = {};\n/**\n * @license React\n * use-sync-external-store-with-selector.production.js\n *\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nvar hasRequiredUseSyncExternalStoreWithSelector_production;\nfunction requireUseSyncExternalStoreWithSelector_production() {\n  if (hasRequiredUseSyncExternalStoreWithSelector_production) return useSyncExternalStoreWithSelector_production;\n  hasRequiredUseSyncExternalStoreWithSelector_production = 1;\n  var React = t$4;\n  function is(x2, y2) {\n    return x2 === y2 && (0 !== x2 || 1 / x2 === 1 / y2) || x2 !== x2 && y2 !== y2;\n  }\n  var objectIs = \"function\" === typeof Object.is ? Object.is : is, useSyncExternalStore = React.useSyncExternalStore, useRef = React.useRef, useEffect = React.useEffect, useMemo = React.useMemo, useDebugValue = React.useDebugValue;\n  useSyncExternalStoreWithSelector_production.useSyncExternalStoreWithSelector = function(subscribe, getSnapshot, getServerSnapshot, selector, isEqual) {\n    var instRef = useRef(null);\n    if (null === instRef.current) {\n      var inst = { hasValue: false, value: null };\n      instRef.current = inst;\n    } else inst = instRef.current;\n    instRef = useMemo(\n      function() {\n        function memoizedSelector(nextSnapshot) {\n          if (!hasMemo) {\n            hasMemo = true;\n            memoizedSnapshot = nextSnapshot;\n            nextSnapshot = selector(nextSnapshot);\n            if (void 0 !== isEqual && inst.hasValue) {\n              var currentSelection = inst.value;\n              if (isEqual(currentSelection, nextSnapshot))\n                return memoizedSelection = currentSelection;\n            }\n            return memoizedSelection = nextSnapshot;\n          }\n          currentSelection = memoizedSelection;\n          if (objectIs(memoizedSnapshot, nextSnapshot)) return currentSelection;\n          var nextSelection = selector(nextSnapshot);\n          if (void 0 !== isEqual && isEqual(currentSelection, nextSelection))\n            return memoizedSnapshot = nextSnapshot, currentSelection;\n          memoizedSnapshot = nextSnapshot;\n          return memoizedSelection = nextSelection;\n        }\n        var hasMemo = false, memoizedSnapshot, memoizedSelection, maybeGetServerSnapshot = void 0 === getServerSnapshot ? null : getServerSnapshot;\n        return [\n          function() {\n            return memoizedSelector(getSnapshot());\n          },\n          null === maybeGetServerSnapshot ? void 0 : function() {\n            return memoizedSelector(maybeGetServerSnapshot());\n          }\n        ];\n      },\n      [getSnapshot, getServerSnapshot, selector, isEqual]\n    );\n    var value = useSyncExternalStore(subscribe, instRef[0], instRef[1]);\n    useEffect(\n      function() {\n        inst.hasValue = true;\n        inst.value = value;\n      },\n      [value]\n    );\n    useDebugValue(value);\n    return value;\n  };\n  return useSyncExternalStoreWithSelector_production;\n}\nvar useSyncExternalStoreWithSelector_development = {};\n/**\n * @license React\n * use-sync-external-store-with-selector.development.js\n *\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nvar hasRequiredUseSyncExternalStoreWithSelector_development;\nfunction requireUseSyncExternalStoreWithSelector_development() {\n  if (hasRequiredUseSyncExternalStoreWithSelector_development) return useSyncExternalStoreWithSelector_development;\n  hasRequiredUseSyncExternalStoreWithSelector_development = 1;\n   true && function() {\n    function is(x2, y2) {\n      return x2 === y2 && (0 !== x2 || 1 / x2 === 1 / y2) || x2 !== x2 && y2 !== y2;\n    }\n    \"undefined\" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ && \"function\" === typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart && __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(Error());\n    var React = t$4, objectIs = \"function\" === typeof Object.is ? Object.is : is, useSyncExternalStore = React.useSyncExternalStore, useRef = React.useRef, useEffect = React.useEffect, useMemo = React.useMemo, useDebugValue = React.useDebugValue;\n    useSyncExternalStoreWithSelector_development.useSyncExternalStoreWithSelector = function(subscribe, getSnapshot, getServerSnapshot, selector, isEqual) {\n      var instRef = useRef(null);\n      if (null === instRef.current) {\n        var inst = { hasValue: false, value: null };\n        instRef.current = inst;\n      } else inst = instRef.current;\n      instRef = useMemo(\n        function() {\n          function memoizedSelector(nextSnapshot) {\n            if (!hasMemo) {\n              hasMemo = true;\n              memoizedSnapshot = nextSnapshot;\n              nextSnapshot = selector(nextSnapshot);\n              if (void 0 !== isEqual && inst.hasValue) {\n                var currentSelection = inst.value;\n                if (isEqual(currentSelection, nextSnapshot))\n                  return memoizedSelection = currentSelection;\n              }\n              return memoizedSelection = nextSnapshot;\n            }\n            currentSelection = memoizedSelection;\n            if (objectIs(memoizedSnapshot, nextSnapshot))\n              return currentSelection;\n            var nextSelection = selector(nextSnapshot);\n            if (void 0 !== isEqual && isEqual(currentSelection, nextSelection))\n              return memoizedSnapshot = nextSnapshot, currentSelection;\n            memoizedSnapshot = nextSnapshot;\n            return memoizedSelection = nextSelection;\n          }\n          var hasMemo = false, memoizedSnapshot, memoizedSelection, maybeGetServerSnapshot = void 0 === getServerSnapshot ? null : getServerSnapshot;\n          return [\n            function() {\n              return memoizedSelector(getSnapshot());\n            },\n            null === maybeGetServerSnapshot ? void 0 : function() {\n              return memoizedSelector(maybeGetServerSnapshot());\n            }\n          ];\n        },\n        [getSnapshot, getServerSnapshot, selector, isEqual]\n      );\n      var value = useSyncExternalStore(subscribe, instRef[0], instRef[1]);\n      useEffect(\n        function() {\n          inst.hasValue = true;\n          inst.value = value;\n        },\n        [value]\n      );\n      useDebugValue(value);\n      return value;\n    };\n    \"undefined\" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ && \"function\" === typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop && __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(Error());\n  }();\n  return useSyncExternalStoreWithSelector_development;\n}\nvar hasRequiredWithSelector;\nfunction requireWithSelector() {\n  if (hasRequiredWithSelector) return withSelector.exports;\n  hasRequiredWithSelector = 1;\n  if (false) {} else {\n    withSelector.exports = requireUseSyncExternalStoreWithSelector_development();\n  }\n  return withSelector.exports;\n}\nvar withSelectorExports = requireWithSelector();\nvar f$1 = (t2, e2, r2) => {\n  if (!e2.has(t2)) throw TypeError(\"Cannot \" + r2);\n};\nvar a$3 = (t2, e2, r2) => (f$1(t2, e2, \"read from private field\"), r2 ? r2.call(t2) : e2.get(t2)), l$2 = (t2, e2, r2) => {\n  if (e2.has(t2)) throw TypeError(\"Cannot add the same private member more than once\");\n  e2 instanceof WeakSet ? e2.add(t2) : e2.set(t2, r2);\n}, c$2 = (t2, e2, r2, n2) => (f$1(t2, e2, \"write to private field\"), e2.set(t2, r2), r2);\nvar i$1, s$4, o$1;\nclass m {\n  constructor(e2) {\n    l$2(this, i$1, {});\n    l$2(this, s$4, new a$7(() => /* @__PURE__ */ new Set()));\n    l$2(this, o$1, /* @__PURE__ */ new Set());\n    c$2(this, i$1, e2);\n  }\n  get state() {\n    return a$3(this, i$1);\n  }\n  subscribe(e2, r2) {\n    let n2 = { selector: e2, callback: r2, current: e2(a$3(this, i$1)) };\n    return a$3(this, o$1).add(n2), () => {\n      a$3(this, o$1).delete(n2);\n    };\n  }\n  on(e2, r2) {\n    return a$3(this, s$4).get(e2).add(r2), () => {\n      a$3(this, s$4).get(e2).delete(r2);\n    };\n  }\n  send(e2) {\n    c$2(this, i$1, this.reduce(a$3(this, i$1), e2));\n    for (let r2 of a$3(this, o$1)) {\n      let n2 = r2.selector(a$3(this, i$1));\n      h$1(r2.current, n2) || (r2.current = n2, r2.callback(n2));\n    }\n    for (let r2 of a$3(this, s$4).get(e2.type)) r2(a$3(this, i$1), e2);\n  }\n}\ni$1 = /* @__PURE__ */ new WeakMap(), s$4 = /* @__PURE__ */ new WeakMap(), o$1 = /* @__PURE__ */ new WeakMap();\nfunction h$1(t2, e2) {\n  return Object.is(t2, e2) ? true : typeof t2 != \"object\" || t2 === null || typeof e2 != \"object\" || e2 === null ? false : Array.isArray(t2) && Array.isArray(e2) ? t2.length !== e2.length ? false : u$1(t2[Symbol.iterator](), e2[Symbol.iterator]()) : t2 instanceof Map && e2 instanceof Map || t2 instanceof Set && e2 instanceof Set ? t2.size !== e2.size ? false : u$1(t2.entries(), e2.entries()) : S$2(t2) && S$2(e2) ? u$1(Object.entries(t2)[Symbol.iterator](), Object.entries(e2)[Symbol.iterator]()) : false;\n}\nfunction u$1(t2, e2) {\n  do {\n    let r2 = t2.next(), n2 = e2.next();\n    if (r2.done && n2.done) return true;\n    if (r2.done || n2.done || !Object.is(r2.value, n2.value)) return false;\n  } while (true);\n}\nfunction S$2(t2) {\n  if (Object.prototype.toString.call(t2) !== \"[object Object]\") return false;\n  let e2 = Object.getPrototypeOf(t2);\n  return e2 === null || Object.getPrototypeOf(e2) === null;\n}\nfunction g$1(t2) {\n  let [e2, r2] = t2(), n2 = o$5();\n  return (...b2) => {\n    e2(...b2), n2.dispose(), n2.microTask(r2);\n  };\n}\nfunction S$1(e2, n2, r2 = h$1) {\n  return withSelectorExports.useSyncExternalStoreWithSelector(o$4((i2) => e2.subscribe(s$3, i2)), o$4(() => e2.state), o$4(() => e2.state), o$4(n2), r2);\n}\nfunction s$3(e2) {\n  return e2;\n}\nfunction u(l2) {\n  throw new Error(\"Unexpected object: \" + l2);\n}\nvar c$1 = ((i2) => (i2[i2.First = 0] = \"First\", i2[i2.Previous = 1] = \"Previous\", i2[i2.Next = 2] = \"Next\", i2[i2.Last = 3] = \"Last\", i2[i2.Specific = 4] = \"Specific\", i2[i2.Nothing = 5] = \"Nothing\", i2))(c$1 || {});\nfunction f(l2, n2) {\n  let t2 = n2.resolveItems();\n  if (t2.length <= 0) return null;\n  let r2 = n2.resolveActiveIndex(), s2 = r2 != null ? r2 : -1;\n  switch (l2.focus) {\n    case 0: {\n      for (let e2 = 0; e2 < t2.length; ++e2) if (!n2.resolveDisabled(t2[e2], e2, t2)) return e2;\n      return r2;\n    }\n    case 1: {\n      s2 === -1 && (s2 = t2.length);\n      for (let e2 = s2 - 1; e2 >= 0; --e2) if (!n2.resolveDisabled(t2[e2], e2, t2)) return e2;\n      return r2;\n    }\n    case 2: {\n      for (let e2 = s2 + 1; e2 < t2.length; ++e2) if (!n2.resolveDisabled(t2[e2], e2, t2)) return e2;\n      return r2;\n    }\n    case 3: {\n      for (let e2 = t2.length - 1; e2 >= 0; --e2) if (!n2.resolveDisabled(t2[e2], e2, t2)) return e2;\n      return r2;\n    }\n    case 4: {\n      for (let e2 = 0; e2 < t2.length; ++e2) if (n2.resolveId(t2[e2], e2, t2) === l2.id) return e2;\n      return r2;\n    }\n    case 5:\n      return null;\n    default:\n      u(l2);\n  }\n}\nfunction c(t2) {\n  let r2 = o$4(t2), e2 = A$3(false);\n  y$6(() => (e2.current = false, () => {\n    e2.current = true, t$3(() => {\n      e2.current && r2();\n    });\n  }), [r2]);\n}\nfunction s$2() {\n  let r2 = typeof document == \"undefined\";\n  return \"useSyncExternalStore\" in t$4 ? ((o3) => o3.useSyncExternalStore)(t$4)(() => () => {\n  }, () => false, () => !r2) : false;\n}\nfunction l$1() {\n  let r2 = s$2(), [e2, n2] = d$4(s$7.isHandoffComplete);\n  return e2 && s$7.isHandoffComplete === false && n2(false), y$6(() => {\n    e2 !== true && n2(true);\n  }, [e2]), y$6(() => s$7.handoff(), []), r2 ? false : e2;\n}\nlet e = K$3(false);\nfunction a$2() {\n  return x$4(e);\n}\nfunction j(t2) {\n  let o3 = a$2(), n2 = x$4(b$1), [r2, u2] = d$4(() => {\n    var s2, a3;\n    if (!o3 && n2 !== null) return (s2 = n2.current) != null ? s2 : null;\n    if (s$7.isServer) return null;\n    let e2 = t2 == null ? void 0 : t2.getElementById(\"stagewise-toolbar-portal-root\");\n    if (e2) return e2;\n    if (t2 === null) return null;\n    let l2 = t2.createElement(\"div\");\n    return l2.setAttribute(\"id\", \"stagewise-toolbar-portal-root\"), l2.style.pointerEvents = \"auto\", ((a3 = t2.querySelector(\"stagewise-companion-anchor\")) != null ? a3 : t2.body).appendChild(l2);\n  });\n  return y$6(() => {\n    var l2;\n    if (r2 === null) return;\n    const e2 = (l2 = t2 == null ? void 0 : t2.querySelector(\"stagewise-companion-anchor\")) != null ? l2 : t2 == null ? void 0 : t2.body;\n    e2 != null && e2.contains(r2) || e2 == null || e2.appendChild(r2);\n  }, [r2, t2]), y$6(() => {\n    o3 || n2 !== null && u2(n2.current);\n  }, [n2, u2, o3]), r2;\n}\nlet M$1 = k$3, I = K$1(function(o3, n2) {\n  let { ownerDocument: r2 = null, ...u2 } = o3, e2 = A$3(null), l2 = y$5(T$3((i2) => {\n    e2.current = i2;\n  }), n2), R2 = n$1(e2), s2 = r2 != null ? r2 : R2, a3 = j(s2), [p2] = d$4(() => {\n    var i2;\n    return s$7.isServer ? null : (i2 = s2 == null ? void 0 : s2.createElement(\"div\")) != null ? i2 : null;\n  }), f2 = x$4(y$1), H2 = l$1();\n  n$3(() => {\n    !a3 || !p2 || a3.contains(p2) || (p2.setAttribute(\"data-headlessui-portal\", \"\"), a3.appendChild(p2));\n  }, [a3, p2]), n$3(() => {\n    if (p2 && f2) return f2.register(p2);\n  }, [f2, p2]), c(() => {\n    var i2;\n    !a3 || !p2 || (p2 instanceof Node && a3.contains(p2) && a3.removeChild(p2), a3.childNodes.length <= 0 && ((i2 = a3.parentElement) == null || i2.removeChild(a3)));\n  });\n  let h2 = L$2();\n  return H2 ? !a3 || !p2 ? null : $$1(h2({ ourProps: { ref: l2 }, theirProps: u2, slot: {}, defaultTag: M$1, name: \"Portal\" }), p2) : null;\n});\nfunction q(t2, o3) {\n  let n2 = y$5(o3), { enabled: r2 = true, ownerDocument: u2, ...e2 } = t2, l2 = L$2();\n  return r2 ? Rn.createElement(I, { ...e2, ownerDocument: u2, ref: n2 }) : l2({ ourProps: { ref: n2 }, theirProps: e2, slot: {}, defaultTag: M$1, name: \"Portal\" });\n}\nlet J$1 = k$3, b$1 = K$3(null);\nfunction X(t2, o3) {\n  let { target: n2, ...r2 } = t2, e2 = { ref: y$5(o3) }, l2 = L$2();\n  return Rn.createElement(b$1.Provider, { value: n2 }, l2({ ourProps: e2, theirProps: r2, defaultTag: J$1, name: \"Popover.Group\" }));\n}\nlet y$1 = K$3(null);\nlet k = K$1(q), B = K$1(X), oe = Object.assign(k, { Group: B });\nfunction s$1(n2, t2) {\n  let e2 = A$3({ left: 0, top: 0 });\n  if (n$3(() => {\n    if (!t2) return;\n    let r2 = t2.getBoundingClientRect();\n    r2 && (e2.current = r2);\n  }, [n2, t2]), t2 == null || !n2 || t2 === document.activeElement) return false;\n  let o3 = t2.getBoundingClientRect();\n  return o3.top !== e2.current.top || o3.left !== e2.current.left;\n}\nlet a$1 = /([\\u2700-\\u27BF]|[\\uE000-\\uF8FF]|\\uD83C[\\uDC00-\\uDFFF]|\\uD83D[\\uDC00-\\uDFFF]|[\\u2011-\\u26FF]|\\uD83E[\\uDD10-\\uDDFF])/g;\nfunction o2(e2) {\n  var r2, i2;\n  let n2 = (r2 = e2.innerText) != null ? r2 : \"\", t2 = e2.cloneNode(true);\n  if (!(t2 instanceof HTMLElement)) return n2;\n  let u2 = false;\n  for (let f2 of t2.querySelectorAll('[hidden],[aria-hidden],[role=\"img\"]')) f2.remove(), u2 = true;\n  let l2 = u2 ? (i2 = t2.innerText) != null ? i2 : \"\" : n2;\n  return a$1.test(l2) && (l2 = l2.replace(a$1, \"\")), l2;\n}\nfunction g(e2) {\n  let n2 = e2.getAttribute(\"aria-label\");\n  if (typeof n2 == \"string\") return n2.trim();\n  let t2 = e2.getAttribute(\"aria-labelledby\");\n  if (t2) {\n    let u2 = t2.split(\" \").map((l2) => {\n      let r2 = document.getElementById(l2);\n      if (r2) {\n        let i2 = r2.getAttribute(\"aria-label\");\n        return typeof i2 == \"string\" ? i2.trim() : o2(r2).trim();\n      }\n      return null;\n    }).filter(Boolean);\n    if (u2.length > 0) return u2.join(\", \");\n  }\n  return o2(e2).trim();\n}\nfunction s(c2) {\n  let t2 = A$3(\"\"), r2 = A$3(\"\");\n  return o$4(() => {\n    let e2 = c2.current;\n    if (!e2) return \"\";\n    let u2 = e2.innerText;\n    if (t2.current === u2) return r2.current;\n    let n2 = g(e2).trim().toLowerCase();\n    return t2.current = u2, r2.current = n2, n2;\n  });\n}\nvar h = Object.defineProperty;\nvar y = (e2, n2, t2) => n2 in e2 ? h(e2, n2, { enumerable: true, configurable: true, writable: true, value: t2 }) : e2[n2] = t2;\nvar v = (e2, n2, t2) => (y(e2, typeof n2 != \"symbol\" ? n2 + \"\" : n2, t2), t2);\nvar M = ((t2) => (t2[t2.Open = 0] = \"Open\", t2[t2.Closed = 1] = \"Closed\", t2))(M || {}), T = ((t2) => (t2[t2.Pointer = 0] = \"Pointer\", t2[t2.Other = 1] = \"Other\", t2))(T || {}), b = ((i2) => (i2[i2.OpenMenu = 0] = \"OpenMenu\", i2[i2.CloseMenu = 1] = \"CloseMenu\", i2[i2.GoToItem = 2] = \"GoToItem\", i2[i2.Search = 3] = \"Search\", i2[i2.ClearSearch = 4] = \"ClearSearch\", i2[i2.RegisterItems = 5] = \"RegisterItems\", i2[i2.UnregisterItems = 6] = \"UnregisterItems\", i2[i2.SetButtonElement = 7] = \"SetButtonElement\", i2[i2.SetItemsElement = 8] = \"SetItemsElement\", i2[i2.SortItems = 9] = \"SortItems\", i2))(b || {});\nfunction S(e2, n2 = (t2) => t2) {\n  let t2 = e2.activeItemIndex !== null ? e2.items[e2.activeItemIndex] : null, r2 = _(n2(e2.items.slice()), (u2) => u2.dataRef.current.domRef.current), l2 = t2 ? r2.indexOf(t2) : null;\n  return l2 === -1 && (l2 = null), { items: r2, activeItemIndex: l2 };\n}\nlet F = { [1](e2) {\n  return e2.menuState === 1 ? e2 : { ...e2, activeItemIndex: null, pendingFocus: { focus: c$1.Nothing }, menuState: 1 };\n}, [0](e2, n2) {\n  return e2.menuState === 0 ? e2 : { ...e2, __demoMode: false, pendingFocus: n2.focus, menuState: 0 };\n}, [2]: (e2, n2) => {\n  var u2, m2, d2, a3, I2;\n  if (e2.menuState === 1) return e2;\n  let t2 = { ...e2, searchQuery: \"\", activationTrigger: (u2 = n2.trigger) != null ? u2 : 1, __demoMode: false };\n  if (n2.focus === c$1.Nothing) return { ...t2, activeItemIndex: null };\n  if (n2.focus === c$1.Specific) return { ...t2, activeItemIndex: e2.items.findIndex((i2) => i2.id === n2.id) };\n  if (n2.focus === c$1.Previous) {\n    let i2 = e2.activeItemIndex;\n    if (i2 !== null) {\n      let g2 = e2.items[i2].dataRef.current.domRef, o3 = f(n2, { resolveItems: () => e2.items, resolveActiveIndex: () => e2.activeItemIndex, resolveId: (s2) => s2.id, resolveDisabled: (s2) => s2.dataRef.current.disabled });\n      if (o3 !== null) {\n        let s2 = e2.items[o3].dataRef.current.domRef;\n        if (((m2 = g2.current) == null ? void 0 : m2.previousElementSibling) === s2.current || ((d2 = s2.current) == null ? void 0 : d2.previousElementSibling) === null) return { ...t2, activeItemIndex: o3 };\n      }\n    }\n  } else if (n2.focus === c$1.Next) {\n    let i2 = e2.activeItemIndex;\n    if (i2 !== null) {\n      let g2 = e2.items[i2].dataRef.current.domRef, o3 = f(n2, { resolveItems: () => e2.items, resolveActiveIndex: () => e2.activeItemIndex, resolveId: (s2) => s2.id, resolveDisabled: (s2) => s2.dataRef.current.disabled });\n      if (o3 !== null) {\n        let s2 = e2.items[o3].dataRef.current.domRef;\n        if (((a3 = g2.current) == null ? void 0 : a3.nextElementSibling) === s2.current || ((I2 = s2.current) == null ? void 0 : I2.nextElementSibling) === null) return { ...t2, activeItemIndex: o3 };\n      }\n    }\n  }\n  let r2 = S(e2), l2 = f(n2, { resolveItems: () => r2.items, resolveActiveIndex: () => r2.activeItemIndex, resolveId: (i2) => i2.id, resolveDisabled: (i2) => i2.dataRef.current.disabled });\n  return { ...t2, ...r2, activeItemIndex: l2 };\n}, [3]: (e2, n2) => {\n  let r2 = e2.searchQuery !== \"\" ? 0 : 1, l2 = e2.searchQuery + n2.value.toLowerCase(), m2 = (e2.activeItemIndex !== null ? e2.items.slice(e2.activeItemIndex + r2).concat(e2.items.slice(0, e2.activeItemIndex + r2)) : e2.items).find((a3) => {\n    var I2;\n    return ((I2 = a3.dataRef.current.textValue) == null ? void 0 : I2.startsWith(l2)) && !a3.dataRef.current.disabled;\n  }), d2 = m2 ? e2.items.indexOf(m2) : -1;\n  return d2 === -1 || d2 === e2.activeItemIndex ? { ...e2, searchQuery: l2 } : { ...e2, searchQuery: l2, activeItemIndex: d2, activationTrigger: 1 };\n}, [4](e2) {\n  return e2.searchQuery === \"\" ? e2 : { ...e2, searchQuery: \"\", searchActiveItemIndex: null };\n}, [5]: (e2, n2) => {\n  let t2 = e2.items.concat(n2.items.map((l2) => l2)), r2 = e2.activeItemIndex;\n  return e2.pendingFocus.focus !== c$1.Nothing && (r2 = f(e2.pendingFocus, { resolveItems: () => t2, resolveActiveIndex: () => e2.activeItemIndex, resolveId: (l2) => l2.id, resolveDisabled: (l2) => l2.dataRef.current.disabled })), { ...e2, items: t2, activeItemIndex: r2, pendingFocus: { focus: c$1.Nothing }, pendingShouldSort: true };\n}, [6]: (e2, n2) => {\n  let t2 = e2.items, r2 = [], l2 = new Set(n2.items);\n  for (let [u2, m2] of t2.entries()) if (l2.has(m2.id) && (r2.push(u2), l2.delete(m2.id), l2.size === 0)) break;\n  if (r2.length > 0) {\n    t2 = t2.slice();\n    for (let u2 of r2.reverse()) t2.splice(u2, 1);\n  }\n  return { ...e2, items: t2, activationTrigger: 1 };\n}, [7]: (e2, n2) => e2.buttonElement === n2.element ? e2 : { ...e2, buttonElement: n2.element }, [8]: (e2, n2) => e2.itemsElement === n2.element ? e2 : { ...e2, itemsElement: n2.element }, [9]: (e2) => e2.pendingShouldSort ? { ...e2, ...S(e2), pendingShouldSort: false } : e2 };\nclass x extends m {\n  constructor(t2) {\n    super(t2);\n    v(this, \"actions\", { registerItem: g$1(() => {\n      let t3 = [], r2 = /* @__PURE__ */ new Set();\n      return [(l2, u2) => {\n        r2.has(u2) || (r2.add(u2), t3.push({ id: l2, dataRef: u2 }));\n      }, () => (r2.clear(), this.send({ type: 5, items: t3.splice(0) }))];\n    }), unregisterItem: g$1(() => {\n      let t3 = [];\n      return [(r2) => t3.push(r2), () => this.send({ type: 6, items: t3.splice(0) })];\n    }) });\n    v(this, \"selectors\", { activeDescendantId(t3) {\n      var u2;\n      let r2 = t3.activeItemIndex, l2 = t3.items;\n      return r2 === null || (u2 = l2[r2]) == null ? void 0 : u2.id;\n    }, isActive(t3, r2) {\n      var m2;\n      let l2 = t3.activeItemIndex, u2 = t3.items;\n      return l2 !== null ? ((m2 = u2[l2]) == null ? void 0 : m2.id) === r2 : false;\n    }, shouldScrollIntoView(t3, r2) {\n      return t3.__demoMode || t3.menuState !== 0 || t3.activationTrigger === 0 ? false : this.isActive(t3, r2);\n    } });\n    this.on(5, () => {\n      requestAnimationFrame(() => {\n        this.send({ type: 9 });\n      });\n    });\n  }\n  static new({ __demoMode: t2 = false } = {}) {\n    return new x({ __demoMode: t2, menuState: t2 ? 0 : 1, buttonElement: null, itemsElement: null, items: [], searchQuery: \"\", activeItemIndex: null, activationTrigger: 1, pendingShouldSort: false, pendingFocus: { focus: c$1.Nothing } });\n  }\n  reduce(t2, r2) {\n    return u$7(r2.type, F, t2, r2);\n  }\n}\nconst a2 = K$3(null);\nfunction l(e2) {\n  let n2 = x$4(a2);\n  if (n2 === null) {\n    let t2 = new Error(`<${e2} /> is missing a parent <Menu /> component.`);\n    throw Error.captureStackTrace && Error.captureStackTrace(t2, i), t2;\n  }\n  return n2;\n}\nfunction i({ __demoMode: e2 = false } = {}) {\n  return T$5(() => x.new({ __demoMode: e2 }), []);\n}\nlet ze = k$3;\nfunction Qe(T2, E2) {\n  let { __demoMode: i$12 = false, ...a$12 } = T2, n2 = i({ __demoMode: i$12 }), [s2, o3, P2] = S$1(n2, (p2) => [p2.menuState, p2.itemsElement, p2.buttonElement]), c2 = y$5(E2), _2 = s2 === M.Open;\n  R$1(_2, [P2, o3], (p2, F2) => {\n    var A$12;\n    n2.send({ type: b.CloseMenu }), A(F2, h$2.Loose) || (p2.preventDefault(), (A$12 = n2.state.buttonElement) == null || A$12.focus());\n  });\n  let t2 = o$4(() => {\n    n2.send({ type: b.CloseMenu });\n  }), R2 = T$5(() => ({ open: s2 === M.Open, close: t2 }), [s2, t2]), I2 = { ref: c2 }, g2 = L$2();\n  return Rn.createElement(Me, null, Rn.createElement(a2.Provider, { value: n2 }, Rn.createElement(c$3, { value: u$7(s2, { [M.Open]: i$2.Open, [M.Closed]: i$2.Closed }) }, g2({ ourProps: I2, theirProps: a$12, slot: R2, defaultTag: ze, name: \"Menu\" }))));\n}\nlet Ye = \"button\";\nfunction Ze(T$12, E2) {\n  let i2 = l(\"Menu.Button\"), a3 = g$3(), { id: n2 = `headlessui-menu-button-${a3}`, disabled: s2 = false, autoFocus: o3 = false, ...P2 } = T$12, c2 = A$3(null), _2 = Fe(), t2 = y$5(E2, c2, ye(), o$4((l2) => i2.send({ type: b.SetButtonElement, element: l2 }))), R2 = o$4((l2) => {\n    switch (l2.key) {\n      case o$3.Space:\n      case o$3.Enter:\n      case o$3.ArrowDown:\n        l2.preventDefault(), l2.stopPropagation(), i2.send({ type: b.OpenMenu, focus: { focus: c$1.First } });\n        break;\n      case o$3.ArrowUp:\n        l2.preventDefault(), l2.stopPropagation(), i2.send({ type: b.OpenMenu, focus: { focus: c$1.Last } });\n        break;\n    }\n  }), I2 = o$4((l2) => {\n    switch (l2.key) {\n      case o$3.Space:\n        l2.preventDefault();\n        break;\n    }\n  }), [g2, p2] = S$1(i2, (l2) => [l2.menuState, l2.itemsElement]), F2 = o$4((l2) => {\n    var H2;\n    if (l2.button === 0) {\n      if (r$1(l2.currentTarget)) return l2.preventDefault();\n      s2 || (g2 === M.Open ? (En(() => i2.send({ type: b.CloseMenu })), (H2 = c2.current) == null || H2.focus({ preventScroll: true })) : (l2.preventDefault(), i2.send({ type: b.OpenMenu, focus: { focus: c$1.Nothing }, trigger: T.Pointer })));\n    }\n  }), { isFocusVisible: A2, focusProps: f2 } = $f7dceffc5ad7768b$export$4e328f61c538687f({ autoFocus: o3 }), { isHovered: M$12, hoverProps: L2 } = $6179b936705e76d3$export$ae780daf29e6d456({ isDisabled: s2 }), { pressed: S2, pressProps: O2 } = w$2({ disabled: s2 }), x2 = T$5(() => ({ open: g2 === M.Open, active: S2 || g2 === M.Open, disabled: s2, hover: M$12, focus: A2, autofocus: o3 }), [g2, M$12, A2, S2, s2, o3]), U2 = _$2(_2(), { ref: t2, id: n2, type: e$1(T$12, c2.current), \"aria-haspopup\": \"menu\", \"aria-controls\": p2 == null ? void 0 : p2.id, \"aria-expanded\": g2 === M.Open, disabled: s2 || void 0, autoFocus: o3, onKeyDown: R2, onKeyUp: I2, onMouseDown: F2 }, f2, L2, O2);\n  return L$2()({ ourProps: U2, theirProps: P2, slot: x2, defaultTag: Ye, name: \"Menu.Button\" });\n}\nlet et = \"div\", tt = O$1.RenderStrategy | O$1.Static;\nfunction ot(T2, E2) {\n  let i2 = g$3(), { id: a3 = `headlessui-menu-items-${i2}`, anchor: n2, portal: s2 = false, modal: o3 = true, transition: P2 = false, ...c2 } = T2, _2 = xe(n2), t2 = l(\"Menu.Items\"), [R$12, I2] = Re(_2), g2 = be(), [p2, F2] = d$4(null), A2 = y$5(E2, _2 ? R$12 : null, o$4((e2) => t2.send({ type: b.SetItemsElement, element: e2 })), F2), [f2, M$12] = S$1(t2, (e2) => [e2.menuState, e2.buttonElement]), L2 = n$1(M$12), S2 = n$1(p2);\n  _2 && (s2 = true);\n  let O2 = u$2(), [x2, U2] = x$1(P2, p2, O2 !== null ? (O2 & i$2.Open) === i$2.Open : f2 === M.Open);\n  m$2(x2, M$12, () => {\n    t2.send({ type: b.CloseMenu });\n  });\n  let G$12 = S$1(t2, (e2) => e2.__demoMode), l$12 = G$12 ? false : o3 && f2 === M.Open;\n  f$2(l$12, S2);\n  let H2 = G$12 ? false : o3 && f2 === M.Open;\n  y$4(H2, { allowed: q$3(() => [M$12, p2], [M$12, p2]) });\n  let u2 = f2 !== M.Open, ae = s$1(u2, M$12) ? false : x2;\n  y$6(() => {\n    let e2 = p2;\n    e2 && f2 === M.Open && e2 !== (S2 == null ? void 0 : S2.activeElement) && e2.focus({ preventScroll: true });\n  }, [f2, p2, S2]), F$1(f2 === M.Open, { container: p2, accept(e2) {\n    return e2.getAttribute(\"role\") === \"menuitem\" ? NodeFilter.FILTER_REJECT : e2.hasAttribute(\"role\") ? NodeFilter.FILTER_SKIP : NodeFilter.FILTER_ACCEPT;\n  }, walk(e2) {\n    e2.setAttribute(\"role\", \"none\");\n  } });\n  let q2 = p$2(), se = o$4((e2) => {\n    var N2, z2, Q2;\n    switch (q2.dispose(), e2.key) {\n      case o$3.Space:\n        if (t2.state.searchQuery !== \"\") return e2.preventDefault(), e2.stopPropagation(), t2.send({ type: b.Search, value: e2.key });\n      case o$3.Enter:\n        if (e2.preventDefault(), e2.stopPropagation(), t2.state.activeItemIndex !== null) {\n          let { dataRef: de } = t2.state.items[t2.state.activeItemIndex];\n          (z2 = (N2 = de.current) == null ? void 0 : N2.domRef.current) == null || z2.click();\n        }\n        t2.send({ type: b.CloseMenu }), G(t2.state.buttonElement);\n        break;\n      case o$3.ArrowDown:\n        return e2.preventDefault(), e2.stopPropagation(), t2.send({ type: b.GoToItem, focus: c$1.Next });\n      case o$3.ArrowUp:\n        return e2.preventDefault(), e2.stopPropagation(), t2.send({ type: b.GoToItem, focus: c$1.Previous });\n      case o$3.Home:\n      case o$3.PageUp:\n        return e2.preventDefault(), e2.stopPropagation(), t2.send({ type: b.GoToItem, focus: c$1.First });\n      case o$3.End:\n      case o$3.PageDown:\n        return e2.preventDefault(), e2.stopPropagation(), t2.send({ type: b.GoToItem, focus: c$1.Last });\n      case o$3.Escape:\n        e2.preventDefault(), e2.stopPropagation(), En(() => t2.send({ type: b.CloseMenu })), (Q2 = t2.state.buttonElement) == null || Q2.focus({ preventScroll: true });\n        break;\n      case o$3.Tab:\n        e2.preventDefault(), e2.stopPropagation(), En(() => t2.send({ type: b.CloseMenu })), j$2(t2.state.buttonElement, e2.shiftKey ? F$2.Previous : F$2.Next);\n        break;\n      default:\n        e2.key.length === 1 && (t2.send({ type: b.Search, value: e2.key }), q2.setTimeout(() => t2.send({ type: b.ClearSearch }), 350));\n        break;\n    }\n  }), le = o$4((e2) => {\n    switch (e2.key) {\n      case o$3.Space:\n        e2.preventDefault();\n        break;\n    }\n  }), pe2 = T$5(() => ({ open: f2 === M.Open }), [f2]), ie = _$2(_2 ? g2() : {}, { \"aria-activedescendant\": S$1(t2, t2.selectors.activeDescendantId), \"aria-labelledby\": S$1(t2, (e2) => {\n    var N2;\n    return (N2 = e2.buttonElement) == null ? void 0 : N2.id;\n  }), id: a3, onKeyDown: se, onKeyUp: le, role: \"menu\", tabIndex: f2 === M.Open ? 0 : void 0, ref: A2, style: { ...c2.style, ...I2, \"--button-width\": d$2(M$12, true).width }, ...R(U2) }), ue = L$2();\n  return Rn.createElement(oe, { enabled: s2 ? T2.static || x2 : false, ownerDocument: L2 }, ue({ ourProps: ie, theirProps: c2, slot: pe2, defaultTag: et, features: tt, visible: ae, name: \"Menu.Items\" }));\n}\nlet nt = k$3;\nfunction rt(T$12, E2) {\n  let i2 = g$3(), { id: a3 = `headlessui-menu-item-${i2}`, disabled: n2 = false, ...s$12 } = T$12, o3 = l(\"Menu.Item\"), P2 = S$1(o3, (u2) => o3.selectors.isActive(u2, a3)), c2 = A$3(null), _2 = y$5(E2, c2), t2 = S$1(o3, (u2) => o3.selectors.shouldScrollIntoView(u2, a3));\n  n$3(() => {\n    if (t2) return o$5().requestAnimationFrame(() => {\n      var u2, J2;\n      (J2 = (u2 = c2.current) == null ? void 0 : u2.scrollIntoView) == null || J2.call(u2, { block: \"nearest\" });\n    });\n  }, [t2, c2]);\n  let R2 = s(c2), I2 = A$3({ disabled: n2, domRef: c2, get textValue() {\n    return R2();\n  } });\n  n$3(() => {\n    I2.current.disabled = n2;\n  }, [I2, n2]), n$3(() => (o3.actions.registerItem(a3, I2), () => o3.actions.unregisterItem(a3)), [I2, a3]);\n  let g2 = o$4(() => {\n    o3.send({ type: b.CloseMenu });\n  }), p2 = o$4((u2) => {\n    if (n2) return u2.preventDefault();\n    o3.send({ type: b.CloseMenu }), G(o3.state.buttonElement);\n  }), F2 = o$4(() => {\n    if (n2) return o3.send({ type: b.GoToItem, focus: c$1.Nothing });\n    o3.send({ type: b.GoToItem, focus: c$1.Specific, id: a3 });\n  }), A2 = u$3(), f2 = o$4((u2) => {\n    A2.update(u2), !n2 && (P2 || o3.send({ type: b.GoToItem, focus: c$1.Specific, id: a3, trigger: T.Pointer }));\n  }), M2 = o$4((u2) => {\n    A2.wasMoved(u2) && (n2 || P2 || o3.send({ type: b.GoToItem, focus: c$1.Specific, id: a3, trigger: T.Pointer }));\n  }), L2 = o$4((u2) => {\n    A2.wasMoved(u2) && (n2 || P2 && o3.send({ type: b.GoToItem, focus: c$1.Nothing }));\n  }), [S2, O2] = K(), [x2, U2] = w$1(), G$12 = T$5(() => ({ active: P2, focus: P2, disabled: n2, close: g2 }), [P2, n2, g2]), l$12 = { id: a3, ref: _2, role: \"menuitem\", tabIndex: n2 === true ? void 0 : -1, \"aria-disabled\": n2 === true ? true : void 0, \"aria-labelledby\": S2, \"aria-describedby\": x2, disabled: void 0, onClick: p2, onFocus: F2, onPointerEnter: f2, onMouseEnter: f2, onPointerMove: M2, onMouseMove: M2, onPointerLeave: L2, onMouseLeave: L2 }, H2 = L$2();\n  return Rn.createElement(O2, null, Rn.createElement(U2, null, H2({ ourProps: l$12, theirProps: s$12, slot: G$12, defaultTag: nt, name: \"Menu.Item\" })));\n}\nlet at = \"div\";\nfunction st(T2, E2) {\n  let [i2, a3] = K(), n2 = T2, s2 = { ref: E2, \"aria-labelledby\": i2, role: \"group\" }, o3 = L$2();\n  return Rn.createElement(a3, null, o3({ ourProps: s2, theirProps: n2, slot: {}, defaultTag: at, name: \"Menu.Section\" }));\n}\nlet lt = \"header\";\nfunction pt(T2, E2) {\n  let i2 = g$3(), { id: a3 = `headlessui-menu-heading-${i2}`, ...n2 } = T2, s2 = P$1();\n  n$3(() => s2.register(a3), [a3, s2.register]);\n  let o3 = { id: a3, ref: E2, role: \"presentation\", ...s2.props };\n  return L$2()({ ourProps: o3, theirProps: n2, slot: {}, defaultTag: lt, name: \"Menu.Heading\" });\n}\nlet it = \"div\";\nfunction ut(T2, E2) {\n  let i2 = T2, a3 = { ref: E2, role: \"separator\" };\n  return L$2()({ ourProps: a3, theirProps: i2, slot: {}, defaultTag: it, name: \"Menu.Separator\" });\n}\nlet dt = K$1(Qe), mt = K$1(Ze), Tt = K$1(ot), ft = K$1(rt), ct = K$1(st), yt = K$1(pt), Et = K$1(ut), to = Object.assign(dt, { Button: mt, Items: Tt, Item: ft, Section: ct, Heading: yt, Separator: Et });\nlet L = \"textarea\";\nfunction H(s2, l2) {\n  let i2 = g$3(), d2 = u$6(), n2 = a$9(), { id: p2 = d2 || `headlessui-textarea-${i2}`, disabled: e2 = n2 || false, autoFocus: r2 = false, invalid: a3 = false, ...T2 } = s2, f2 = I$2(), m2 = U$1(), { isFocused: o3, focusProps: u2 } = $f7dceffc5ad7768b$export$4e328f61c538687f({ autoFocus: r2 }), { isHovered: t2, hoverProps: b2 } = $6179b936705e76d3$export$ae780daf29e6d456({ isDisabled: e2 }), y2 = _$2({ ref: l2, id: p2, \"aria-labelledby\": f2, \"aria-describedby\": m2, \"aria-invalid\": a3 ? \"true\" : void 0, disabled: e2 || void 0, autoFocus: r2 }, u2, b2), x2 = T$5(() => ({ disabled: e2, invalid: a3, hover: t2, focus: o3, autofocus: r2 }), [e2, a3, t2, o3, r2]);\n  return L$2()({ ourProps: y2, theirProps: T2, slot: x2, defaultTag: L, name: \"Textarea\" });\n}\nlet J = K$1(H);\n/**\n * @license lucide-react v0.503.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */\nconst toKebabCase = (string) => string.replace(/([a-z0-9])([A-Z])/g, \"$1-$2\").toLowerCase();\nconst toCamelCase = (string) => string.replace(\n  /^([A-Z])|[\\s-_]+(\\w)/g,\n  (match, p1, p2) => p2 ? p2.toUpperCase() : p1.toLowerCase()\n);\nconst toPascalCase = (string) => {\n  const camelCase = toCamelCase(string);\n  return camelCase.charAt(0).toUpperCase() + camelCase.slice(1);\n};\nconst mergeClasses = (...classes) => classes.filter((className, index2, array) => {\n  return Boolean(className) && className.trim() !== \"\" && array.indexOf(className) === index2;\n}).join(\" \").trim();\nconst hasA11yProp = (props) => {\n  for (const prop in props) {\n    if (prop.startsWith(\"aria-\") || prop === \"role\" || prop === \"title\") {\n      return true;\n    }\n  }\n};\n/**\n * @license lucide-react v0.503.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */\nvar defaultAttributes = {\n  xmlns: \"http://www.w3.org/2000/svg\",\n  width: 24,\n  height: 24,\n  viewBox: \"0 0 24 24\",\n  fill: \"none\",\n  stroke: \"currentColor\",\n  strokeWidth: 2,\n  strokeLinecap: \"round\",\n  strokeLinejoin: \"round\"\n};\n/**\n * @license lucide-react v0.503.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */\nconst Icon = D$1(\n  ({\n    color = \"currentColor\",\n    size: size2 = 24,\n    strokeWidth = 2,\n    absoluteStrokeWidth,\n    className = \"\",\n    children,\n    iconNode,\n    ...rest\n  }, ref) => {\n    return _$4(\n      \"svg\",\n      {\n        ref,\n        ...defaultAttributes,\n        width: size2,\n        height: size2,\n        stroke: color,\n        strokeWidth: absoluteStrokeWidth ? Number(strokeWidth) * 24 / Number(size2) : strokeWidth,\n        className: mergeClasses(\"lucide\", className),\n        ...!children && !hasA11yProp(rest) && { \"aria-hidden\": \"true\" },\n        ...rest\n      },\n      [\n        ...iconNode.map(([tag, attrs]) => _$4(tag, attrs)),\n        ...Array.isArray(children) ? children : [children]\n      ]\n    );\n  }\n);\n/**\n * @license lucide-react v0.503.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */\nconst createLucideIcon = (iconName, iconNode) => {\n  const Component = D$1(\n    ({ className, ...props }, ref) => _$4(Icon, {\n      ref,\n      iconNode,\n      className: mergeClasses(\n        `lucide-${toKebabCase(toPascalCase(iconName))}`,\n        `lucide-${iconName}`,\n        className\n      ),\n      ...props\n    })\n  );\n  Component.displayName = toPascalCase(iconName);\n  return Component;\n};\n/**\n * @license lucide-react v0.503.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */\nconst __iconNode$6 = [[\"path\", { d: \"m6 9 6 6 6-6\", key: \"qrunsl\" }]];\nconst ChevronDown = createLucideIcon(\"chevron-down\", __iconNode$6);\n/**\n * @license lucide-react v0.503.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */\nconst __iconNode$5 = [[\"path\", { d: \"m18 15-6-6-6 6\", key: \"153udz\" }]];\nconst ChevronUp = createLucideIcon(\"chevron-up\", __iconNode$5);\n/**\n * @license lucide-react v0.503.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */\nconst __iconNode$4 = [\n  [\"circle\", { cx: \"12\", cy: \"12\", r: \"1\", key: \"41hilf\" }],\n  [\"circle\", { cx: \"19\", cy: \"12\", r: \"1\", key: \"1wjl8i\" }],\n  [\"circle\", { cx: \"5\", cy: \"12\", r: \"1\", key: \"1pcz8c\" }]\n];\nconst Ellipsis = createLucideIcon(\"ellipsis\", __iconNode$4);\n/**\n * @license lucide-react v0.503.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */\nconst __iconNode$3 = [\n  [\"polyline\", { points: \"4 14 10 14 10 20\", key: \"11kfnr\" }],\n  [\"polyline\", { points: \"20 10 14 10 14 4\", key: \"rlmsce\" }],\n  [\"line\", { x1: \"14\", x2: \"21\", y1: \"10\", y2: \"3\", key: \"o5lafz\" }],\n  [\"line\", { x1: \"3\", x2: \"10\", y1: \"21\", y2: \"14\", key: \"1atl0r\" }]\n];\nconst Minimize2 = createLucideIcon(\"minimize-2\", __iconNode$3);\n/**\n * @license lucide-react v0.503.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */\nconst __iconNode$2 = [\n  [\"path\", { d: \"M5 12h14\", key: \"1ays0h\" }],\n  [\"path\", { d: \"M12 5v14\", key: \"s699le\" }]\n];\nconst Plus = createLucideIcon(\"plus\", __iconNode$2);\n/**\n * @license lucide-react v0.503.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */\nconst __iconNode$1 = [\n  [\n    \"path\",\n    {\n      d: \"M14.536 21.686a.5.5 0 0 0 .937-.024l6.5-19a.496.496 0 0 0-.635-.635l-19 6.5a.5.5 0 0 0-.024.937l7.93 3.18a2 2 0 0 1 1.112 1.11z\",\n      key: \"1ffxy3\"\n    }\n  ],\n  [\"path\", { d: \"m21.854 2.147-10.94 10.939\", key: \"12cjpa\" }]\n];\nconst Send = createLucideIcon(\"send\", __iconNode$1);\n/**\n * @license lucide-react v0.503.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */\nconst __iconNode = [\n  [\"path\", { d: \"M3 6h18\", key: \"d0wm0j\" }],\n  [\"path\", { d: \"M19 6v14c0 1-1 2-2 2H7c-1 0-2-1-2-2V6\", key: \"4alrt4\" }],\n  [\"path\", { d: \"M8 6V4c0-1 1-2 2-2h4c1 0 2 1 2 2v2\", key: \"v07s0e\" }],\n  [\"line\", { x1: \"10\", x2: \"10\", y1: \"11\", y2: \"17\", key: \"1uufr5\" }],\n  [\"line\", { x1: \"14\", x2: \"14\", y1: \"11\", y2: \"17\", key: \"xtxkd\" }]\n];\nconst Trash2 = createLucideIcon(\"trash-2\", __iconNode);\nconst ChatArea = M$3(() => {\n  const { chatAreaState } = useChatState();\n  if (chatAreaState === \"hidden\") return null;\n  return /* @__PURE__ */ u$9(ChatAreaBox, { children: [\n    /* @__PURE__ */ u$9(ChatAreaResizeBar, {}),\n    chatAreaState === \"compact\" && /* @__PURE__ */ u$9(ChatAreaCompact, {}),\n    chatAreaState === \"expanded\" && /* @__PURE__ */ u$9(ChatAreaExpanded, {})\n  ] });\n});\nconst ChatAreaBox = M$3(({ children }) => /* @__PURE__ */ u$9(\"div\", { className: \"h-auto w-full overflow-x-hidden\", children }));\nconst ChatAreaResizeBar = M$3(() => {\n  const { chatAreaState, setChatAreaState, stopPromptCreation } = useChatState();\n  const handleResizeBarClick = q$3(() => {\n    setChatAreaState(chatAreaState === \"compact\" ? \"expanded\" : \"compact\");\n  }, [chatAreaState, setChatAreaState]);\n  const handleCloseChatArea = q$3(() => {\n    stopPromptCreation();\n    setChatAreaState(\"hidden\");\n  }, [setChatAreaState, stopPromptCreation]);\n  return /* @__PURE__ */ u$9(\"div\", { className: \"flex w-full flex-row items-center justify-center rounded-t-3xl px-3 py-1\", children: [\n    /* @__PURE__ */ u$9(\n      H$3,\n      {\n        className: \"size-5 bg-transparent text-muted-foreground/30 transition-colors duration-100 hover:text-muted-foreground\",\n        onClick: handleResizeBarClick,\n        children: chatAreaState === \"compact\" ? /* @__PURE__ */ u$9(ChevronUp, { className: \"size-5\" }) : /* @__PURE__ */ u$9(ChevronDown, { className: \"size-5\" })\n      }\n    ),\n    /* @__PURE__ */ u$9(\n      H$3,\n      {\n        className: \"absolute right-2 flex h-fit w-fit flex-row items-center gap-1 bg-transparent p-1 text-xs text-zinc-950 opacity-50 transition-all duration-100 hover:opacity-100\",\n        onClick: handleCloseChatArea,\n        children: [\n          \"Close menu\",\n          /* @__PURE__ */ u$9(\"div\", { className: \"rounded-md bg-zinc-600 px-0.5 py-0 text-xs text-zinc-50\", children: \"esc\" })\n        ]\n      }\n    )\n  ] });\n});\nconst ChatAreaCompact = M$3(() => /* @__PURE__ */ u$9(\"div\", { className: \"flex w-full flex-col gap-1 p-3\", children: /* @__PURE__ */ u$9(\"span\", { className: \"text-sm text-zinc-950/50\", children: \"This is the compact chat area... Showing just the last response from the assistant.\" }) }));\nconst ChatAreaExpanded = M$3(() => {\n  const { chats, currentChatId, setCurrentChat, createChat } = useChatState();\n  const currentChat = chats.find((chat) => chat.id === currentChatId);\n  const hasNewChat = chats.some((chat) => chat.id === \"new_chat\");\n  const handleCreateChat = q$3(() => {\n    createChat();\n  }, [createChat]);\n  const handleSetCurrentChat = q$3(\n    (chatId) => {\n      setCurrentChat(chatId);\n    },\n    [setCurrentChat]\n  );\n  return /* @__PURE__ */ u$9(\"div\", { className: \"flex max-h-[50vh] w-full flex-col gap-3 p-3 pb-0\", children: [\n    /* @__PURE__ */ u$9(\"div\", { className: \"flex flex-1 flex-col gap-2 overflow-y-auto p-1\", children: currentChat == null ? void 0 : currentChat.messages.map((message) => /* @__PURE__ */ u$9(\n      \"div\",\n      {\n        className: `flex ${message.sender === \"assistant\" ? \"justify-start\" : \"justify-end\"}`,\n        children: /* @__PURE__ */ u$9(\n          \"div\",\n          {\n            className: `max-w-[80%] rounded-xl px-2 py-1 text-sm ${message.sender === \"assistant\" ? \"bg-zinc-950/5 text-zinc-950\" : \"bg-blue-600 text-white\"}`,\n            children: message.content\n          }\n        )\n      },\n      message.id\n    )) }),\n    /* @__PURE__ */ u$9(\"div\", { className: \"flex flex-row items-center justify-start gap-2 overflow-x-auto overflow-y-visible border-border/10 border-t pt-2 pb-2\", children: [\n      !hasNewChat && /* @__PURE__ */ u$9(\n        H$3,\n        {\n          className: \"h-6 flex-shrink-0 rounded-full bg-zinc-950/5 px-2 font-semibold text-foreground text-xs\",\n          onClick: handleCreateChat,\n          children: /* @__PURE__ */ u$9(Plus, { className: \"size-3\" })\n        }\n      ),\n      chats.map((chat) => /* @__PURE__ */ u$9(\n        H$3,\n        {\n          className: cn(\n            \"h-5 max-w-48 flex-shrink-0 overflow-hidden truncate rounded-full bg-zinc-950/5 px-2 text-muted-foreground text-xs\",\n            chat.id === currentChatId && \"bg-white/60 text-zinc-950 shadow-blue-600/50 shadow-sm\"\n          ),\n          onClick: () => handleSetCurrentChat(chat.id),\n          children: chat.title || \"New chat\"\n        },\n        chat.id\n      ))\n    ] })\n  ] });\n});\nvar LIBVERSION = \"2.0.3\", UA_MAX_LENGTH = 500, USER_AGENT = \"user-agent\", EMPTY = \"\", UNKNOWN = \"?\", FUNC_TYPE = \"function\", UNDEF_TYPE = \"undefined\", OBJ_TYPE = \"object\", STR_TYPE = \"string\", UA_BROWSER = \"browser\", UA_CPU = \"cpu\", UA_DEVICE = \"device\", UA_ENGINE = \"engine\", UA_OS = \"os\", UA_RESULT = \"result\", NAME = \"name\", TYPE = \"type\", VENDOR = \"vendor\", VERSION = \"version\", ARCHITECTURE = \"architecture\", MAJOR = \"major\", MODEL = \"model\", CONSOLE = \"console\", MOBILE = \"mobile\", TABLET = \"tablet\", SMARTTV = \"smarttv\", WEARABLE = \"wearable\", XR = \"xr\", EMBEDDED = \"embedded\", INAPP = \"inapp\", BRANDS = \"brands\", FORMFACTORS = \"formFactors\", FULLVERLIST = \"fullVersionList\", PLATFORM = \"platform\", PLATFORMVER = \"platformVersion\", BITNESS = \"bitness\", CH_HEADER = \"sec-ch-ua\", CH_HEADER_FULL_VER_LIST = CH_HEADER + \"-full-version-list\", CH_HEADER_ARCH = CH_HEADER + \"-arch\", CH_HEADER_BITNESS = CH_HEADER + \"-\" + BITNESS, CH_HEADER_FORM_FACTORS = CH_HEADER + \"-form-factors\", CH_HEADER_MOBILE = CH_HEADER + \"-\" + MOBILE, CH_HEADER_MODEL = CH_HEADER + \"-\" + MODEL, CH_HEADER_PLATFORM = CH_HEADER + \"-\" + PLATFORM, CH_HEADER_PLATFORM_VER = CH_HEADER_PLATFORM + \"-version\", CH_ALL_VALUES = [BRANDS, FULLVERLIST, MOBILE, MODEL, PLATFORM, PLATFORMVER, ARCHITECTURE, FORMFACTORS, BITNESS], AMAZON = \"Amazon\", APPLE = \"Apple\", ASUS = \"ASUS\", BLACKBERRY = \"BlackBerry\", GOOGLE = \"Google\", HUAWEI = \"Huawei\", LENOVO = \"Lenovo\", HONOR = \"Honor\", LG = \"LG\", MICROSOFT = \"Microsoft\", MOTOROLA = \"Motorola\", NVIDIA = \"Nvidia\", ONEPLUS = \"OnePlus\", OPPO = \"OPPO\", SAMSUNG = \"Samsung\", SHARP = \"Sharp\", SONY = \"Sony\", XIAOMI = \"Xiaomi\", ZEBRA = \"Zebra\", CHROME = \"Chrome\", CHROMIUM = \"Chromium\", CHROMECAST = \"Chromecast\", EDGE = \"Edge\", FIREFOX = \"Firefox\", OPERA = \"Opera\", FACEBOOK = \"Facebook\", SOGOU = \"Sogou\", PREFIX_MOBILE = \"Mobile \", SUFFIX_BROWSER = \" Browser\", WINDOWS = \"Windows\";\nvar isWindow = typeof window !== UNDEF_TYPE, NAVIGATOR = isWindow && window.navigator ? window.navigator : void 0, NAVIGATOR_UADATA = NAVIGATOR && NAVIGATOR.userAgentData ? NAVIGATOR.userAgentData : void 0;\nvar extend = function(defaultRgx, extensions) {\n  var mergedRgx = {};\n  var extraRgx = extensions;\n  if (!isExtensions(extensions)) {\n    extraRgx = {};\n    for (var i2 in extensions) {\n      for (var j2 in extensions[i2]) {\n        extraRgx[j2] = extensions[i2][j2].concat(extraRgx[j2] ? extraRgx[j2] : []);\n      }\n    }\n  }\n  for (var k2 in defaultRgx) {\n    mergedRgx[k2] = extraRgx[k2] && extraRgx[k2].length % 2 === 0 ? extraRgx[k2].concat(defaultRgx[k2]) : defaultRgx[k2];\n  }\n  return mergedRgx;\n}, enumerize = function(arr) {\n  var enums = {};\n  for (var i2 = 0; i2 < arr.length; i2++) {\n    enums[arr[i2].toUpperCase()] = arr[i2];\n  }\n  return enums;\n}, has = function(str1, str2) {\n  if (typeof str1 === OBJ_TYPE && str1.length > 0) {\n    for (var i2 in str1) {\n      if (lowerize(str1[i2]) == lowerize(str2)) return true;\n    }\n    return false;\n  }\n  return isString(str1) ? lowerize(str2).indexOf(lowerize(str1)) !== -1 : false;\n}, isExtensions = function(obj, deep) {\n  for (var prop in obj) {\n    return /^(browser|cpu|device|engine|os)$/.test(prop) || (deep ? isExtensions(obj[prop]) : false);\n  }\n}, isString = function(val) {\n  return typeof val === STR_TYPE;\n}, itemListToArray = function(header) {\n  if (!header) return void 0;\n  var arr = [];\n  var tokens = strip(/\\\\?\\\"/g, header).split(\",\");\n  for (var i2 = 0; i2 < tokens.length; i2++) {\n    if (tokens[i2].indexOf(\";\") > -1) {\n      var token = trim(tokens[i2]).split(\";v=\");\n      arr[i2] = { brand: token[0], version: token[1] };\n    } else {\n      arr[i2] = trim(tokens[i2]);\n    }\n  }\n  return arr;\n}, lowerize = function(str) {\n  return isString(str) ? str.toLowerCase() : str;\n}, majorize = function(version) {\n  return isString(version) ? strip(/[^\\d\\.]/g, version).split(\".\")[0] : void 0;\n}, setProps = function(arr) {\n  for (var i2 in arr) {\n    var propName = arr[i2];\n    if (typeof propName == OBJ_TYPE && propName.length == 2) {\n      this[propName[0]] = propName[1];\n    } else {\n      this[propName] = void 0;\n    }\n  }\n  return this;\n}, strip = function(pattern, str) {\n  return isString(str) ? str.replace(pattern, EMPTY) : str;\n}, stripQuotes = function(str) {\n  return strip(/\\\\?\\\"/g, str);\n}, trim = function(str, len) {\n  if (isString(str)) {\n    str = strip(/^\\s\\s*/, str);\n    return typeof len === UNDEF_TYPE ? str : str.substring(0, UA_MAX_LENGTH);\n  }\n};\nvar rgxMapper = function(ua, arrays) {\n  if (!ua || !arrays) return;\n  var i2 = 0, j2, k2, p2, q2, matches, match;\n  while (i2 < arrays.length && !matches) {\n    var regex = arrays[i2], props = arrays[i2 + 1];\n    j2 = k2 = 0;\n    while (j2 < regex.length && !matches) {\n      if (!regex[j2]) {\n        break;\n      }\n      matches = regex[j2++].exec(ua);\n      if (!!matches) {\n        for (p2 = 0; p2 < props.length; p2++) {\n          match = matches[++k2];\n          q2 = props[p2];\n          if (typeof q2 === OBJ_TYPE && q2.length > 0) {\n            if (q2.length === 2) {\n              if (typeof q2[1] == FUNC_TYPE) {\n                this[q2[0]] = q2[1].call(this, match);\n              } else {\n                this[q2[0]] = q2[1];\n              }\n            } else if (q2.length === 3) {\n              if (typeof q2[1] === FUNC_TYPE && !(q2[1].exec && q2[1].test)) {\n                this[q2[0]] = match ? q2[1].call(this, match, q2[2]) : void 0;\n              } else {\n                this[q2[0]] = match ? match.replace(q2[1], q2[2]) : void 0;\n              }\n            } else if (q2.length === 4) {\n              this[q2[0]] = match ? q2[3].call(this, match.replace(q2[1], q2[2])) : void 0;\n            }\n          } else {\n            this[q2] = match ? match : void 0;\n          }\n        }\n      }\n    }\n    i2 += 2;\n  }\n}, strMapper = function(str, map) {\n  for (var i2 in map) {\n    if (typeof map[i2] === OBJ_TYPE && map[i2].length > 0) {\n      for (var j2 = 0; j2 < map[i2].length; j2++) {\n        if (has(map[i2][j2], str)) {\n          return i2 === UNKNOWN ? void 0 : i2;\n        }\n      }\n    } else if (has(map[i2], str)) {\n      return i2 === UNKNOWN ? void 0 : i2;\n    }\n  }\n  return map.hasOwnProperty(\"*\") ? map[\"*\"] : str;\n};\nvar windowsVersionMap = {\n  \"ME\": \"4.90\",\n  \"NT 3.11\": \"NT3.51\",\n  \"NT 4.0\": \"NT4.0\",\n  \"2000\": \"NT 5.0\",\n  \"XP\": [\"NT 5.1\", \"NT 5.2\"],\n  \"Vista\": \"NT 6.0\",\n  \"7\": \"NT 6.1\",\n  \"8\": \"NT 6.2\",\n  \"8.1\": \"NT 6.3\",\n  \"10\": [\"NT 6.4\", \"NT 10.0\"],\n  \"RT\": \"ARM\"\n}, formFactorsMap = {\n  \"embedded\": \"Automotive\",\n  \"mobile\": \"Mobile\",\n  \"tablet\": [\"Tablet\", \"EInk\"],\n  \"smarttv\": \"TV\",\n  \"wearable\": \"Watch\",\n  \"xr\": [\"VR\", \"XR\"],\n  \"?\": [\"Desktop\", \"Unknown\"],\n  \"*\": void 0\n};\nvar defaultRegexes = {\n  browser: [\n    [\n      // Most common regardless engine\n      /\\b(?:crmo|crios)\\/([\\w\\.]+)/i\n      // Chrome for Android/iOS\n    ],\n    [VERSION, [NAME, PREFIX_MOBILE + \"Chrome\"]],\n    [\n      /edg(?:e|ios|a)?\\/([\\w\\.]+)/i\n      // Microsoft Edge\n    ],\n    [VERSION, [NAME, \"Edge\"]],\n    [\n      // Presto based\n      /(opera mini)\\/([-\\w\\.]+)/i,\n      // Opera Mini\n      /(opera [mobiletab]{3,6})\\b.+version\\/([-\\w\\.]+)/i,\n      // Opera Mobi/Tablet\n      /(opera)(?:.+version\\/|[\\/ ]+)([\\w\\.]+)/i\n      // Opera\n    ],\n    [NAME, VERSION],\n    [\n      /opios[\\/ ]+([\\w\\.]+)/i\n      // Opera mini on iphone >= 8.0\n    ],\n    [VERSION, [NAME, OPERA + \" Mini\"]],\n    [\n      /\\bop(?:rg)?x\\/([\\w\\.]+)/i\n      // Opera GX\n    ],\n    [VERSION, [NAME, OPERA + \" GX\"]],\n    [\n      /\\bopr\\/([\\w\\.]+)/i\n      // Opera Webkit\n    ],\n    [VERSION, [NAME, OPERA]],\n    [\n      // Mixed\n      /\\bb[ai]*d(?:uhd|[ub]*[aekoprswx]{5,6})[\\/ ]?([\\w\\.]+)/i\n      // Baidu\n    ],\n    [VERSION, [NAME, \"Baidu\"]],\n    [\n      /\\b(?:mxbrowser|mxios|myie2)\\/?([-\\w\\.]*)\\b/i\n      // Maxthon\n    ],\n    [VERSION, [NAME, \"Maxthon\"]],\n    [\n      /(kindle)\\/([\\w\\.]+)/i,\n      // Kindle\n      /(lunascape|maxthon|netfront|jasmine|blazer|sleipnir)[\\/ ]?([\\w\\.]*)/i,\n      // Lunascape/Maxthon/Netfront/Jasmine/Blazer/Sleipnir\n      // Trident based\n      /(avant|iemobile|slim(?:browser|boat|jet))[\\/ ]?([\\d\\.]*)/i,\n      // Avant/IEMobile/SlimBrowser/SlimBoat/Slimjet\n      /(?:ms|\\()(ie) ([\\w\\.]+)/i,\n      // Internet Explorer\n      // Blink/Webkit/KHTML based                                         // Flock/RockMelt/Midori/Epiphany/Silk/Skyfire/Bolt/Iron/Iridium/PhantomJS/Bowser/QupZilla/Falkon/LG Browser/Otter/qutebrowser/Dooble\n      /(flock|rockmelt|midori|epiphany|silk|skyfire|ovibrowser|bolt|iron|vivaldi|iridium|phantomjs|bowser|qupzilla|falkon|rekonq|puffin|brave|whale(?!.+naver)|qqbrowserlite|duckduckgo|klar|helio|(?=comodo_)?dragon|otter|dooble|(?:lg |qute)browser)\\/([-\\w\\.]+)/i,\n      // Rekonq/Puffin/Brave/Whale/QQBrowserLite/QQ//Vivaldi/DuckDuckGo/Klar/Helio/Dragon\n      /(heytap|ovi|115|surf)browser\\/([\\d\\.]+)/i,\n      // HeyTap/Ovi/115/Surf\n      /(ecosia|weibo)(?:__| \\w+@)([\\d\\.]+)/i\n      // Ecosia/Weibo\n    ],\n    [NAME, VERSION],\n    [\n      /quark(?:pc)?\\/([-\\w\\.]+)/i\n      // Quark\n    ],\n    [VERSION, [NAME, \"Quark\"]],\n    [\n      /\\bddg\\/([\\w\\.]+)/i\n      // DuckDuckGo\n    ],\n    [VERSION, [NAME, \"DuckDuckGo\"]],\n    [\n      /(?:\\buc? ?browser|(?:juc.+)ucweb)[\\/ ]?([\\w\\.]+)/i\n      // UCBrowser\n    ],\n    [VERSION, [NAME, \"UCBrowser\"]],\n    [\n      /microm.+\\bqbcore\\/([\\w\\.]+)/i,\n      // WeChat Desktop for Windows Built-in Browser\n      /\\bqbcore\\/([\\w\\.]+).+microm/i,\n      /micromessenger\\/([\\w\\.]+)/i\n      // WeChat\n    ],\n    [VERSION, [NAME, \"WeChat\"]],\n    [\n      /konqueror\\/([\\w\\.]+)/i\n      // Konqueror\n    ],\n    [VERSION, [NAME, \"Konqueror\"]],\n    [\n      /trident.+rv[: ]([\\w\\.]{1,9})\\b.+like gecko/i\n      // IE11\n    ],\n    [VERSION, [NAME, \"IE\"]],\n    [\n      /ya(?:search)?browser\\/([\\w\\.]+)/i\n      // Yandex\n    ],\n    [VERSION, [NAME, \"Yandex\"]],\n    [\n      /slbrowser\\/([\\w\\.]+)/i\n      // Smart Lenovo Browser\n    ],\n    [VERSION, [NAME, \"Smart \" + LENOVO + SUFFIX_BROWSER]],\n    [\n      /(avast|avg)\\/([\\w\\.]+)/i\n      // Avast/AVG Secure Browser\n    ],\n    [[NAME, /(.+)/, \"$1 Secure\" + SUFFIX_BROWSER], VERSION],\n    [\n      /\\bfocus\\/([\\w\\.]+)/i\n      // Firefox Focus\n    ],\n    [VERSION, [NAME, FIREFOX + \" Focus\"]],\n    [\n      /\\bopt\\/([\\w\\.]+)/i\n      // Opera Touch\n    ],\n    [VERSION, [NAME, OPERA + \" Touch\"]],\n    [\n      /coc_coc\\w+\\/([\\w\\.]+)/i\n      // Coc Coc Browser\n    ],\n    [VERSION, [NAME, \"Coc Coc\"]],\n    [\n      /dolfin\\/([\\w\\.]+)/i\n      // Dolphin\n    ],\n    [VERSION, [NAME, \"Dolphin\"]],\n    [\n      /coast\\/([\\w\\.]+)/i\n      // Opera Coast\n    ],\n    [VERSION, [NAME, OPERA + \" Coast\"]],\n    [\n      /miuibrowser\\/([\\w\\.]+)/i\n      // MIUI Browser\n    ],\n    [VERSION, [NAME, \"MIUI\" + SUFFIX_BROWSER]],\n    [\n      /fxios\\/([\\w\\.-]+)/i\n      // Firefox for iOS\n    ],\n    [VERSION, [NAME, PREFIX_MOBILE + FIREFOX]],\n    [\n      /\\bqihoobrowser\\/?([\\w\\.]*)/i\n      // 360\n    ],\n    [VERSION, [NAME, \"360\"]],\n    [\n      /\\b(qq)\\/([\\w\\.]+)/i\n      // QQ\n    ],\n    [[NAME, /(.+)/, \"$1Browser\"], VERSION],\n    [\n      /(oculus|sailfish|huawei|vivo|pico)browser\\/([\\w\\.]+)/i\n    ],\n    [[NAME, /(.+)/, \"$1\" + SUFFIX_BROWSER], VERSION],\n    [\n      // Oculus/Sailfish/HuaweiBrowser/VivoBrowser/PicoBrowser\n      /samsungbrowser\\/([\\w\\.]+)/i\n      // Samsung Internet\n    ],\n    [VERSION, [NAME, SAMSUNG + \" Internet\"]],\n    [\n      /metasr[\\/ ]?([\\d\\.]+)/i\n      // Sogou Explorer\n    ],\n    [VERSION, [NAME, SOGOU + \" Explorer\"]],\n    [\n      /(sogou)mo\\w+\\/([\\d\\.]+)/i\n      // Sogou Mobile\n    ],\n    [[NAME, SOGOU + \" Mobile\"], VERSION],\n    [\n      /(electron)\\/([\\w\\.]+) safari/i,\n      // Electron-based App\n      /(tesla)(?: qtcarbrowser|\\/(20\\d\\d\\.[-\\w\\.]+))/i,\n      // Tesla\n      /m?(qqbrowser|2345(?=browser|chrome|explorer))\\w*[\\/ ]?v?([\\w\\.]+)/i\n      // QQ/2345\n    ],\n    [NAME, VERSION],\n    [\n      /(lbbrowser|rekonq)/i\n      // LieBao Browser/Rekonq\n    ],\n    [NAME],\n    [\n      /ome\\/([\\w\\.]+) \\w* ?(iron) saf/i,\n      // Iron\n      /ome\\/([\\w\\.]+).+qihu (360)[es]e/i\n      // 360\n    ],\n    [VERSION, NAME],\n    [\n      // WebView\n      /((?:fban\\/fbios|fb_iab\\/fb4a)(?!.+fbav)|;fbav\\/([\\w\\.]+);)/i\n      // Facebook App for iOS & Android\n    ],\n    [[NAME, FACEBOOK], VERSION, [TYPE, INAPP]],\n    [\n      /(Klarna)\\/([\\w\\.]+)/i,\n      // Klarna Shopping Browser for iOS & Android\n      /(kakao(?:talk|story))[\\/ ]([\\w\\.]+)/i,\n      // Kakao App\n      /(naver)\\(.*?(\\d+\\.[\\w\\.]+).*\\)/i,\n      // Naver InApp\n      /(daum)apps[\\/ ]([\\w\\.]+)/i,\n      // Daum App\n      /safari (line)\\/([\\w\\.]+)/i,\n      // Line App for iOS\n      /\\b(line)\\/([\\w\\.]+)\\/iab/i,\n      // Line App for Android\n      /(alipay)client\\/([\\w\\.]+)/i,\n      // Alipay\n      /(twitter)(?:and| f.+e\\/([\\w\\.]+))/i,\n      // Twitter\n      /(instagram|snapchat)[\\/ ]([-\\w\\.]+)/i\n      // Instagram/Snapchat\n    ],\n    [NAME, VERSION, [TYPE, INAPP]],\n    [\n      /\\bgsa\\/([\\w\\.]+) .*safari\\//i\n      // Google Search Appliance on iOS\n    ],\n    [VERSION, [NAME, \"GSA\"], [TYPE, INAPP]],\n    [\n      /musical_ly(?:.+app_?version\\/|_)([\\w\\.]+)/i\n      // TikTok\n    ],\n    [VERSION, [NAME, \"TikTok\"], [TYPE, INAPP]],\n    [\n      /\\[(linkedin)app\\]/i\n      // LinkedIn App for iOS & Android\n    ],\n    [NAME, [TYPE, INAPP]],\n    [\n      /(chromium)[\\/ ]([-\\w\\.]+)/i\n      // Chromium\n    ],\n    [NAME, VERSION],\n    [\n      /headlesschrome(?:\\/([\\w\\.]+)| )/i\n      // Chrome Headless\n    ],\n    [VERSION, [NAME, CHROME + \" Headless\"]],\n    [\n      / wv\\).+(chrome)\\/([\\w\\.]+)/i\n      // Chrome WebView\n    ],\n    [[NAME, CHROME + \" WebView\"], VERSION],\n    [\n      /droid.+ version\\/([\\w\\.]+)\\b.+(?:mobile safari|safari)/i\n      // Android Browser\n    ],\n    [VERSION, [NAME, \"Android\" + SUFFIX_BROWSER]],\n    [\n      /chrome\\/([\\w\\.]+) mobile/i\n      // Chrome Mobile\n    ],\n    [VERSION, [NAME, PREFIX_MOBILE + \"Chrome\"]],\n    [\n      /(chrome|omniweb|arora|[tizenoka]{5} ?browser)\\/v?([\\w\\.]+)/i\n      // Chrome/OmniWeb/Arora/Tizen/Nokia\n    ],\n    [NAME, VERSION],\n    [\n      /version\\/([\\w\\.\\,]+) .*mobile(?:\\/\\w+ | ?)safari/i\n      // Safari Mobile\n    ],\n    [VERSION, [NAME, PREFIX_MOBILE + \"Safari\"]],\n    [\n      /iphone .*mobile(?:\\/\\w+ | ?)safari/i\n    ],\n    [[NAME, PREFIX_MOBILE + \"Safari\"]],\n    [\n      /version\\/([\\w\\.\\,]+) .*(safari)/i\n      // Safari\n    ],\n    [VERSION, NAME],\n    [\n      /webkit.+?(mobile ?safari|safari)(\\/[\\w\\.]+)/i\n      // Safari < 3.0\n    ],\n    [NAME, [VERSION, \"1\"]],\n    [\n      /(webkit|khtml)\\/([\\w\\.]+)/i\n    ],\n    [NAME, VERSION],\n    [\n      // Gecko based\n      /(?:mobile|tablet);.*(firefox)\\/([\\w\\.-]+)/i\n      // Firefox Mobile\n    ],\n    [[NAME, PREFIX_MOBILE + FIREFOX], VERSION],\n    [\n      /(navigator|netscape\\d?)\\/([-\\w\\.]+)/i\n      // Netscape\n    ],\n    [[NAME, \"Netscape\"], VERSION],\n    [\n      /(wolvic|librewolf)\\/([\\w\\.]+)/i\n      // Wolvic/LibreWolf\n    ],\n    [NAME, VERSION],\n    [\n      /mobile vr; rv:([\\w\\.]+)\\).+firefox/i\n      // Firefox Reality\n    ],\n    [VERSION, [NAME, FIREFOX + \" Reality\"]],\n    [\n      /ekiohf.+(flow)\\/([\\w\\.]+)/i,\n      // Flow\n      /(swiftfox)/i,\n      // Swiftfox\n      /(icedragon|iceweasel|camino|chimera|fennec|maemo browser|minimo|conkeror)[\\/ ]?([\\w\\.\\+]+)/i,\n      // IceDragon/Iceweasel/Camino/Chimera/Fennec/Maemo/Minimo/Conkeror\n      /(seamonkey|k-meleon|icecat|iceape|firebird|phoenix|palemoon|basilisk|waterfox)\\/([-\\w\\.]+)$/i,\n      // Firefox/SeaMonkey/K-Meleon/IceCat/IceApe/Firebird/Phoenix\n      /(firefox)\\/([\\w\\.]+)/i,\n      // Other Firefox-based\n      /(mozilla)\\/([\\w\\.]+) .+rv\\:.+gecko\\/\\d+/i,\n      // Mozilla\n      // Other\n      /(amaya|dillo|doris|icab|ladybird|lynx|mosaic|netsurf|obigo|polaris|w3m|(?:go|ice|up)[\\. ]?browser)[-\\/ ]?v?([\\w\\.]+)/i,\n      // Polaris/Lynx/Dillo/iCab/Doris/Amaya/w3m/NetSurf/Obigo/Mosaic/Go/ICE/UP.Browser/Ladybird\n      /\\b(links) \\(([\\w\\.]+)/i\n      // Links\n    ],\n    [NAME, [VERSION, /_/g, \".\"]],\n    [\n      /(cobalt)\\/([\\w\\.]+)/i\n      // Cobalt\n    ],\n    [NAME, [VERSION, /[^\\d\\.]+./, EMPTY]]\n  ],\n  cpu: [\n    [\n      /\\b((amd|x|x86[-_]?|wow|win)64)\\b/i\n      // AMD64 (x64)\n    ],\n    [[ARCHITECTURE, \"amd64\"]],\n    [\n      /(ia32(?=;))/i,\n      // IA32 (quicktime)\n      /\\b((i[346]|x)86)(pc)?\\b/i\n      // IA32 (x86)\n    ],\n    [[ARCHITECTURE, \"ia32\"]],\n    [\n      /\\b(aarch64|arm(v?[89]e?l?|_?64))\\b/i\n      // ARM64\n    ],\n    [[ARCHITECTURE, \"arm64\"]],\n    [\n      /\\b(arm(v[67])?ht?n?[fl]p?)\\b/i\n      // ARMHF\n    ],\n    [[ARCHITECTURE, \"armhf\"]],\n    [\n      // PocketPC mistakenly identified as PowerPC\n      /( (ce|mobile); ppc;|\\/[\\w\\.]+arm\\b)/i\n    ],\n    [[ARCHITECTURE, \"arm\"]],\n    [\n      /((ppc|powerpc)(64)?)( mac|;|\\))/i\n      // PowerPC\n    ],\n    [[ARCHITECTURE, /ower/, EMPTY, lowerize]],\n    [\n      / sun4\\w[;\\)]/i\n      // SPARC\n    ],\n    [[ARCHITECTURE, \"sparc\"]],\n    [\n      /\\b(avr32|ia64(?=;)|68k(?=\\))|\\barm(?=v([1-7]|[5-7]1)l?|;|eabi)|(irix|mips|sparc)(64)?\\b|pa-risc)/i\n      // IA64, 68K, ARM/64, AVR/32, IRIX/64, MIPS/64, SPARC/64, PA-RISC\n    ],\n    [[ARCHITECTURE, lowerize]]\n  ],\n  device: [\n    [\n      //////////////////////////\n      // MOBILES & TABLETS\n      /////////////////////////\n      // Samsung\n      /\\b(sch-i[89]0\\d|shw-m380s|sm-[ptx]\\w{2,4}|gt-[pn]\\d{2,4}|sgh-t8[56]9|nexus 10)/i\n    ],\n    [MODEL, [VENDOR, SAMSUNG], [TYPE, TABLET]],\n    [\n      /\\b((?:s[cgp]h|gt|sm)-(?![lr])\\w+|sc[g-]?[\\d]+a?|galaxy nexus)/i,\n      /samsung[- ]((?!sm-[lr])[-\\w]+)/i,\n      /sec-(sgh\\w+)/i\n    ],\n    [MODEL, [VENDOR, SAMSUNG], [TYPE, MOBILE]],\n    [\n      // Apple\n      /(?:\\/|\\()(ip(?:hone|od)[\\w, ]*)(?:\\/|;)/i\n      // iPod/iPhone\n    ],\n    [MODEL, [VENDOR, APPLE], [TYPE, MOBILE]],\n    [\n      /\\((ipad);[-\\w\\),; ]+apple/i,\n      // iPad\n      /applecoremedia\\/[\\w\\.]+ \\((ipad)/i,\n      /\\b(ipad)\\d\\d?,\\d\\d?[;\\]].+ios/i\n    ],\n    [MODEL, [VENDOR, APPLE], [TYPE, TABLET]],\n    [\n      /(macintosh);/i\n    ],\n    [MODEL, [VENDOR, APPLE]],\n    [\n      // Sharp\n      /\\b(sh-?[altvz]?\\d\\d[a-ekm]?)/i\n    ],\n    [MODEL, [VENDOR, SHARP], [TYPE, MOBILE]],\n    [\n      // Honor\n      /\\b((?:brt|eln|hey2?|gdi|jdn)-a?[lnw]09|(?:ag[rm]3?|jdn2|kob2)-a?[lw]0[09]hn)(?: bui|\\)|;)/i\n    ],\n    [MODEL, [VENDOR, HONOR], [TYPE, TABLET]],\n    [\n      /honor([-\\w ]+)[;\\)]/i\n    ],\n    [MODEL, [VENDOR, HONOR], [TYPE, MOBILE]],\n    [\n      // Huawei\n      /\\b((?:ag[rs][2356]?k?|bah[234]?|bg[2o]|bt[kv]|cmr|cpn|db[ry]2?|jdn2|got|kob2?k?|mon|pce|scm|sht?|[tw]gr|vrd)-[ad]?[lw][0125][09]b?|605hw|bg2-u03|(?:gem|fdr|m2|ple|t1)-[7a]0[1-4][lu]|t1-a2[13][lw]|mediapad[\\w\\. ]*(?= bui|\\)))\\b(?!.+d\\/s)/i\n    ],\n    [MODEL, [VENDOR, HUAWEI], [TYPE, TABLET]],\n    [\n      /(?:huawei)([-\\w ]+)[;\\)]/i,\n      /\\b(nexus 6p|\\w{2,4}e?-[atu]?[ln][\\dx][012359c][adn]?)\\b(?!.+d\\/s)/i\n    ],\n    [MODEL, [VENDOR, HUAWEI], [TYPE, MOBILE]],\n    [\n      // Xiaomi\n      /oid[^\\)]+; (2[\\dbc]{4}(182|283|rp\\w{2})[cgl]|m2105k81a?c)(?: bui|\\))/i,\n      /\\b((?:red)?mi[-_ ]?pad[\\w- ]*)(?: bui|\\))/i\n      // Mi Pad tablets\n    ],\n    [[MODEL, /_/g, \" \"], [VENDOR, XIAOMI], [TYPE, TABLET]],\n    [\n      /\\b(poco[\\w ]+|m2\\d{3}j\\d\\d[a-z]{2})(?: bui|\\))/i,\n      // Xiaomi POCO\n      /\\b; (\\w+) build\\/hm\\1/i,\n      // Xiaomi Hongmi 'numeric' models\n      /\\b(hm[-_ ]?note?[_ ]?(?:\\d\\w)?) bui/i,\n      // Xiaomi Hongmi\n      /\\b(redmi[\\-_ ]?(?:note|k)?[\\w_ ]+)(?: bui|\\))/i,\n      // Xiaomi Redmi\n      /oid[^\\)]+; (m?[12][0-389][01]\\w{3,6}[c-y])( bui|; wv|\\))/i,\n      // Xiaomi Redmi 'numeric' models\n      /\\b(mi[-_ ]?(?:a\\d|one|one[_ ]plus|note lte|max|cc)?[_ ]?(?:\\d?\\w?)[_ ]?(?:plus|se|lite|pro)?)(?: bui|\\))/i,\n      // Xiaomi Mi\n      / ([\\w ]+) miui\\/v?\\d/i\n    ],\n    [[MODEL, /_/g, \" \"], [VENDOR, XIAOMI], [TYPE, MOBILE]],\n    [\n      // OPPO\n      /; (\\w+) bui.+ oppo/i,\n      /\\b(cph[12]\\d{3}|p(?:af|c[al]|d\\w|e[ar])[mt]\\d0|x9007|a101op)\\b/i\n    ],\n    [MODEL, [VENDOR, OPPO], [TYPE, MOBILE]],\n    [\n      /\\b(opd2(\\d{3}a?))(?: bui|\\))/i\n    ],\n    [MODEL, [VENDOR, strMapper, { \"OnePlus\": [\"304\", \"403\", \"203\"], \"*\": OPPO }], [TYPE, TABLET]],\n    [\n      // BLU Vivo Series\n      /(vivo (5r?|6|8l?|go|one|s|x[il]?[2-4]?)[\\w\\+ ]*)(?: bui|\\))/i\n    ],\n    [MODEL, [VENDOR, \"BLU\"], [TYPE, MOBILE]],\n    [\n      // Vivo\n      /; vivo (\\w+)(?: bui|\\))/i,\n      /\\b(v[12]\\d{3}\\w?[at])(?: bui|;)/i\n    ],\n    [MODEL, [VENDOR, \"Vivo\"], [TYPE, MOBILE]],\n    [\n      // Realme\n      /\\b(rmx[1-3]\\d{3})(?: bui|;|\\))/i\n    ],\n    [MODEL, [VENDOR, \"Realme\"], [TYPE, MOBILE]],\n    [\n      // Motorola\n      /\\b(milestone|droid(?:[2-4x]| (?:bionic|x2|pro|razr))?:?( 4g)?)\\b[\\w ]+build\\//i,\n      /\\bmot(?:orola)?[- ](\\w*)/i,\n      /((?:moto(?! 360)[\\w\\(\\) ]+|xt\\d{3,4}|nexus 6)(?= bui|\\)))/i\n    ],\n    [MODEL, [VENDOR, MOTOROLA], [TYPE, MOBILE]],\n    [\n      /\\b(mz60\\d|xoom[2 ]{0,2}) build\\//i\n    ],\n    [MODEL, [VENDOR, MOTOROLA], [TYPE, TABLET]],\n    [\n      // LG\n      /((?=lg)?[vl]k\\-?\\d{3}) bui| 3\\.[-\\w; ]{10}lg?-([06cv9]{3,4})/i\n    ],\n    [MODEL, [VENDOR, LG], [TYPE, TABLET]],\n    [\n      /(lm(?:-?f100[nv]?|-[\\w\\.]+)(?= bui|\\))|nexus [45])/i,\n      /\\blg[-e;\\/ ]+(?!.*(?:browser|netcast|android tv|watch))(\\w+)/i,\n      /\\blg-?([\\d\\w]+) bui/i\n    ],\n    [MODEL, [VENDOR, LG], [TYPE, MOBILE]],\n    [\n      // Lenovo\n      /(ideatab[-\\w ]+|602lv|d-42a|a101lv|a2109a|a3500-hv|s[56]000|pb-6505[my]|tb-?x?\\d{3,4}(?:f[cu]|xu|[av])|yt\\d?-[jx]?\\d+[lfmx])( bui|;|\\)|\\/)/i,\n      /lenovo ?(b[68]0[08]0-?[hf]?|tab(?:[\\w- ]+?)|tb[\\w-]{6,7})( bui|;|\\)|\\/)/i\n    ],\n    [MODEL, [VENDOR, LENOVO], [TYPE, TABLET]],\n    [\n      // Nokia\n      /(nokia) (t[12][01])/i\n    ],\n    [VENDOR, MODEL, [TYPE, TABLET]],\n    [\n      /(?:maemo|nokia).*(n900|lumia \\d+|rm-\\d+)/i,\n      /nokia[-_ ]?(([-\\w\\. ]*))/i\n    ],\n    [[MODEL, /_/g, \" \"], [TYPE, MOBILE], [VENDOR, \"Nokia\"]],\n    [\n      // Google\n      /(pixel (c|tablet))\\b/i\n      // Google Pixel C/Tablet\n    ],\n    [MODEL, [VENDOR, GOOGLE], [TYPE, TABLET]],\n    [\n      /droid.+; (pixel[\\daxl ]{0,6})(?: bui|\\))/i\n      // Google Pixel\n    ],\n    [MODEL, [VENDOR, GOOGLE], [TYPE, MOBILE]],\n    [\n      // Sony\n      /droid.+; (a?\\d[0-2]{2}so|[c-g]\\d{4}|so[-gl]\\w+|xq-a\\w[4-7][12])(?= bui|\\).+chrome\\/(?![1-6]{0,1}\\d\\.))/i\n    ],\n    [MODEL, [VENDOR, SONY], [TYPE, MOBILE]],\n    [\n      /sony tablet [ps]/i,\n      /\\b(?:sony)?sgp\\w+(?: bui|\\))/i\n    ],\n    [[MODEL, \"Xperia Tablet\"], [VENDOR, SONY], [TYPE, TABLET]],\n    [\n      // OnePlus\n      / (kb2005|in20[12]5|be20[12][59])\\b/i,\n      /(?:one)?(?:plus)? (a\\d0\\d\\d)(?: b|\\))/i\n    ],\n    [MODEL, [VENDOR, ONEPLUS], [TYPE, MOBILE]],\n    [\n      // Amazon\n      /(alexa)webm/i,\n      /(kf[a-z]{2}wi|aeo(?!bc)\\w\\w)( bui|\\))/i,\n      // Kindle Fire without Silk / Echo Show\n      /(kf[a-z]+)( bui|\\)).+silk\\//i\n      // Kindle Fire HD\n    ],\n    [MODEL, [VENDOR, AMAZON], [TYPE, TABLET]],\n    [\n      /((?:sd|kf)[0349hijorstuw]+)( bui|\\)).+silk\\//i\n      // Fire Phone\n    ],\n    [[MODEL, /(.+)/g, \"Fire Phone $1\"], [VENDOR, AMAZON], [TYPE, MOBILE]],\n    [\n      // BlackBerry\n      /(playbook);[-\\w\\),; ]+(rim)/i\n      // BlackBerry PlayBook\n    ],\n    [MODEL, VENDOR, [TYPE, TABLET]],\n    [\n      /\\b((?:bb[a-f]|st[hv])100-\\d)/i,\n      /\\(bb10; (\\w+)/i\n      // BlackBerry 10\n    ],\n    [MODEL, [VENDOR, BLACKBERRY], [TYPE, MOBILE]],\n    [\n      // Asus\n      /(?:\\b|asus_)(transfo[prime ]{4,10} \\w+|eeepc|slider \\w+|nexus 7|padfone|p00[cj])/i\n    ],\n    [MODEL, [VENDOR, ASUS], [TYPE, TABLET]],\n    [\n      / (z[bes]6[027][012][km][ls]|zenfone \\d\\w?)\\b/i\n    ],\n    [MODEL, [VENDOR, ASUS], [TYPE, MOBILE]],\n    [\n      // HTC\n      /(nexus 9)/i\n      // HTC Nexus 9\n    ],\n    [MODEL, [VENDOR, \"HTC\"], [TYPE, TABLET]],\n    [\n      /(htc)[-;_ ]{1,2}([\\w ]+(?=\\)| bui)|\\w+)/i,\n      // HTC\n      // ZTE\n      /(zte)[- ]([\\w ]+?)(?: bui|\\/|\\))/i,\n      /(alcatel|geeksphone|nexian|panasonic(?!(?:;|\\.))|sony(?!-bra))[-_ ]?([-\\w]*)/i\n      // Alcatel/GeeksPhone/Nexian/Panasonic/Sony\n    ],\n    [VENDOR, [MODEL, /_/g, \" \"], [TYPE, MOBILE]],\n    [\n      // TCL\n      /tcl (xess p17aa)/i,\n      /droid [\\w\\.]+; ((?:8[14]9[16]|9(?:0(?:48|60|8[01])|1(?:3[27]|66)|2(?:6[69]|9[56])|466))[gqswx])(_\\w(\\w|\\w\\w))?(\\)| bui)/i\n    ],\n    [MODEL, [VENDOR, \"TCL\"], [TYPE, TABLET]],\n    [\n      /droid [\\w\\.]+; (418(?:7d|8v)|5087z|5102l|61(?:02[dh]|25[adfh]|27[ai]|56[dh]|59k|65[ah])|a509dl|t(?:43(?:0w|1[adepqu])|50(?:6d|7[adju])|6(?:09dl|10k|12b|71[efho]|76[hjk])|7(?:66[ahju]|67[hw]|7[045][bh]|71[hk]|73o|76[ho]|79w|81[hks]?|82h|90[bhsy]|99b)|810[hs]))(_\\w(\\w|\\w\\w))?(\\)| bui)/i\n    ],\n    [MODEL, [VENDOR, \"TCL\"], [TYPE, MOBILE]],\n    [\n      // itel\n      /(itel) ((\\w+))/i\n    ],\n    [[VENDOR, lowerize], MODEL, [TYPE, strMapper, { \"tablet\": [\"p10001l\", \"w7001\"], \"*\": \"mobile\" }]],\n    [\n      // Acer\n      /droid.+; ([ab][1-7]-?[0178a]\\d\\d?)/i\n    ],\n    [MODEL, [VENDOR, \"Acer\"], [TYPE, TABLET]],\n    [\n      // Meizu\n      /droid.+; (m[1-5] note) bui/i,\n      /\\bmz-([-\\w]{2,})/i\n    ],\n    [MODEL, [VENDOR, \"Meizu\"], [TYPE, MOBILE]],\n    [\n      // Ulefone\n      /; ((?:power )?armor(?:[\\w ]{0,8}))(?: bui|\\))/i\n    ],\n    [MODEL, [VENDOR, \"Ulefone\"], [TYPE, MOBILE]],\n    [\n      // Energizer\n      /; (energy ?\\w+)(?: bui|\\))/i,\n      /; energizer ([\\w ]+)(?: bui|\\))/i\n    ],\n    [MODEL, [VENDOR, \"Energizer\"], [TYPE, MOBILE]],\n    [\n      // Cat\n      /; cat (b35);/i,\n      /; (b15q?|s22 flip|s48c|s62 pro)(?: bui|\\))/i\n    ],\n    [MODEL, [VENDOR, \"Cat\"], [TYPE, MOBILE]],\n    [\n      // Smartfren\n      /((?:new )?andromax[\\w- ]+)(?: bui|\\))/i\n    ],\n    [MODEL, [VENDOR, \"Smartfren\"], [TYPE, MOBILE]],\n    [\n      // Nothing\n      /droid.+; (a(?:015|06[35]|142p?))/i\n    ],\n    [MODEL, [VENDOR, \"Nothing\"], [TYPE, MOBILE]],\n    [\n      // Archos\n      /; (x67 5g|tikeasy \\w+|ac[1789]\\d\\w+)( b|\\))/i,\n      /archos ?(5|gamepad2?|([\\w ]*[t1789]|hello) ?\\d+[\\w ]*)( b|\\))/i\n    ],\n    [MODEL, [VENDOR, \"Archos\"], [TYPE, TABLET]],\n    [\n      /archos ([\\w ]+)( b|\\))/i,\n      /; (ac[3-6]\\d\\w{2,8})( b|\\))/i\n    ],\n    [MODEL, [VENDOR, \"Archos\"], [TYPE, MOBILE]],\n    [\n      // MIXED\n      /(imo) (tab \\w+)/i,\n      // IMO\n      /(infinix) (x1101b?)/i\n      // Infinix XPad\n    ],\n    [VENDOR, MODEL, [TYPE, TABLET]],\n    [\n      /(blackberry|benq|palm(?=\\-)|sonyericsson|acer|asus(?! zenw)|dell|jolla|meizu|motorola|polytron|infinix|tecno|micromax|advan)[-_ ]?([-\\w]*)/i,\n      // BlackBerry/BenQ/Palm/Sony-Ericsson/Acer/Asus/Dell/Meizu/Motorola/Polytron/Infinix/Tecno/Micromax/Advan\n      /; (blu|hmd|imo|tcl)[_ ]([\\w\\+ ]+?)(?: bui|\\)|; r)/i,\n      // BLU/HMD/IMO/TCL\n      /(hp) ([\\w ]+\\w)/i,\n      // HP iPAQ\n      /(microsoft); (lumia[\\w ]+)/i,\n      // Microsoft Lumia\n      /(lenovo)[-_ ]?([-\\w ]+?)(?: bui|\\)|\\/)/i,\n      // Lenovo\n      /(oppo) ?([\\w ]+) bui/i\n      // OPPO\n    ],\n    [VENDOR, MODEL, [TYPE, MOBILE]],\n    [\n      /(kobo)\\s(ereader|touch)/i,\n      // Kobo\n      /(hp).+(touchpad(?!.+tablet)|tablet)/i,\n      // HP TouchPad\n      /(kindle)\\/([\\w\\.]+)/i\n      // Kindle\n    ],\n    [VENDOR, MODEL, [TYPE, TABLET]],\n    [\n      /(surface duo)/i\n      // Surface Duo\n    ],\n    [MODEL, [VENDOR, MICROSOFT], [TYPE, TABLET]],\n    [\n      /droid [\\d\\.]+; (fp\\du?)(?: b|\\))/i\n      // Fairphone\n    ],\n    [MODEL, [VENDOR, \"Fairphone\"], [TYPE, MOBILE]],\n    [\n      /((?:tegranote|shield t(?!.+d tv))[\\w- ]*?)(?: b|\\))/i\n      // Nvidia Tablets\n    ],\n    [MODEL, [VENDOR, NVIDIA], [TYPE, TABLET]],\n    [\n      /(sprint) (\\w+)/i\n      // Sprint Phones\n    ],\n    [VENDOR, MODEL, [TYPE, MOBILE]],\n    [\n      /(kin\\.[onetw]{3})/i\n      // Microsoft Kin\n    ],\n    [[MODEL, /\\./g, \" \"], [VENDOR, MICROSOFT], [TYPE, MOBILE]],\n    [\n      /droid.+; ([c6]+|et5[16]|mc[239][23]x?|vc8[03]x?)\\)/i\n      // Zebra\n    ],\n    [MODEL, [VENDOR, ZEBRA], [TYPE, TABLET]],\n    [\n      /droid.+; (ec30|ps20|tc[2-8]\\d[kx])\\)/i\n    ],\n    [MODEL, [VENDOR, ZEBRA], [TYPE, MOBILE]],\n    [\n      ///////////////////\n      // SMARTTVS\n      ///////////////////\n      /smart-tv.+(samsung)/i\n      // Samsung\n    ],\n    [VENDOR, [TYPE, SMARTTV]],\n    [\n      /hbbtv.+maple;(\\d+)/i\n    ],\n    [[MODEL, /^/, \"SmartTV\"], [VENDOR, SAMSUNG], [TYPE, SMARTTV]],\n    [\n      /tcast.+(lg)e?. ([-\\w]+)/i\n      // LG SmartTV\n    ],\n    [VENDOR, MODEL, [TYPE, SMARTTV]],\n    [\n      /(nux; netcast.+smarttv|lg (netcast\\.tv-201\\d|android tv))/i\n    ],\n    [[VENDOR, LG], [TYPE, SMARTTV]],\n    [\n      /(apple) ?tv/i\n      // Apple TV\n    ],\n    [VENDOR, [MODEL, APPLE + \" TV\"], [TYPE, SMARTTV]],\n    [\n      /crkey.*devicetype\\/chromecast/i\n      // Google Chromecast Third Generation\n    ],\n    [[MODEL, CHROMECAST + \" Third Generation\"], [VENDOR, GOOGLE], [TYPE, SMARTTV]],\n    [\n      /crkey.*devicetype\\/([^/]*)/i\n      // Google Chromecast with specific device type\n    ],\n    [[MODEL, /^/, \"Chromecast \"], [VENDOR, GOOGLE], [TYPE, SMARTTV]],\n    [\n      /fuchsia.*crkey/i\n      // Google Chromecast Nest Hub\n    ],\n    [[MODEL, CHROMECAST + \" Nest Hub\"], [VENDOR, GOOGLE], [TYPE, SMARTTV]],\n    [\n      /crkey/i\n      // Google Chromecast, Linux-based or unknown\n    ],\n    [[MODEL, CHROMECAST], [VENDOR, GOOGLE], [TYPE, SMARTTV]],\n    [\n      /(portaltv)/i\n      // Facebook Portal TV\n    ],\n    [MODEL, [VENDOR, FACEBOOK], [TYPE, SMARTTV]],\n    [\n      /droid.+aft(\\w+)( bui|\\))/i\n      // Fire TV\n    ],\n    [MODEL, [VENDOR, AMAZON], [TYPE, SMARTTV]],\n    [\n      /(shield \\w+ tv)/i\n      // Nvidia Shield TV\n    ],\n    [MODEL, [VENDOR, NVIDIA], [TYPE, SMARTTV]],\n    [\n      /\\(dtv[\\);].+(aquos)/i,\n      /(aquos-tv[\\w ]+)\\)/i\n      // Sharp\n    ],\n    [MODEL, [VENDOR, SHARP], [TYPE, SMARTTV]],\n    [\n      /(bravia[\\w ]+)( bui|\\))/i\n      // Sony\n    ],\n    [MODEL, [VENDOR, SONY], [TYPE, SMARTTV]],\n    [\n      /(mi(tv|box)-?\\w+) bui/i\n      // Xiaomi\n    ],\n    [MODEL, [VENDOR, XIAOMI], [TYPE, SMARTTV]],\n    [\n      /Hbbtv.*(technisat) (.*);/i\n      // TechniSAT\n    ],\n    [VENDOR, MODEL, [TYPE, SMARTTV]],\n    [\n      /\\b(roku)[\\dx]*[\\)\\/]((?:dvp-)?[\\d\\.]*)/i,\n      // Roku\n      /hbbtv\\/\\d+\\.\\d+\\.\\d+ +\\([\\w\\+ ]*; *([\\w\\d][^;]*);([^;]*)/i\n      // HbbTV devices\n    ],\n    [[VENDOR, trim], [MODEL, trim], [TYPE, SMARTTV]],\n    [\n      // SmartTV from Unidentified Vendors\n      /droid.+; ([\\w- ]+) (?:android tv|smart[- ]?tv)/i\n    ],\n    [MODEL, [TYPE, SMARTTV]],\n    [\n      /\\b(android tv|smart[- ]?tv|opera tv|tv; rv:)\\b/i\n    ],\n    [[TYPE, SMARTTV]],\n    [\n      ///////////////////\n      // CONSOLES\n      ///////////////////\n      /(ouya)/i,\n      // Ouya\n      /(nintendo) (\\w+)/i\n      // Nintendo\n    ],\n    [VENDOR, MODEL, [TYPE, CONSOLE]],\n    [\n      /droid.+; (shield)( bui|\\))/i\n      // Nvidia Portable\n    ],\n    [MODEL, [VENDOR, NVIDIA], [TYPE, CONSOLE]],\n    [\n      /(playstation \\w+)/i\n      // Playstation\n    ],\n    [MODEL, [VENDOR, SONY], [TYPE, CONSOLE]],\n    [\n      /\\b(xbox(?: one)?(?!; xbox))[\\); ]/i\n      // Microsoft Xbox\n    ],\n    [MODEL, [VENDOR, MICROSOFT], [TYPE, CONSOLE]],\n    [\n      ///////////////////\n      // WEARABLES\n      ///////////////////\n      /\\b(sm-[lr]\\d\\d[0156][fnuw]?s?|gear live)\\b/i\n      // Samsung Galaxy Watch\n    ],\n    [MODEL, [VENDOR, SAMSUNG], [TYPE, WEARABLE]],\n    [\n      /((pebble))app/i,\n      // Pebble\n      /(asus|google|lg|oppo) ((pixel |zen)?watch[\\w ]*)( bui|\\))/i\n      // Asus ZenWatch / LG Watch / Pixel Watch\n    ],\n    [VENDOR, MODEL, [TYPE, WEARABLE]],\n    [\n      /(ow(?:19|20)?we?[1-3]{1,3})/i\n      // Oppo Watch\n    ],\n    [MODEL, [VENDOR, OPPO], [TYPE, WEARABLE]],\n    [\n      /(watch)(?: ?os[,\\/]|\\d,\\d\\/)[\\d\\.]+/i\n      // Apple Watch\n    ],\n    [MODEL, [VENDOR, APPLE], [TYPE, WEARABLE]],\n    [\n      /(opwwe\\d{3})/i\n      // OnePlus Watch\n    ],\n    [MODEL, [VENDOR, ONEPLUS], [TYPE, WEARABLE]],\n    [\n      /(moto 360)/i\n      // Motorola 360\n    ],\n    [MODEL, [VENDOR, MOTOROLA], [TYPE, WEARABLE]],\n    [\n      /(smartwatch 3)/i\n      // Sony SmartWatch\n    ],\n    [MODEL, [VENDOR, SONY], [TYPE, WEARABLE]],\n    [\n      /(g watch r)/i\n      // LG G Watch R\n    ],\n    [MODEL, [VENDOR, LG], [TYPE, WEARABLE]],\n    [\n      /droid.+; (wt63?0{2,3})\\)/i\n    ],\n    [MODEL, [VENDOR, ZEBRA], [TYPE, WEARABLE]],\n    [\n      ///////////////////\n      // XR\n      ///////////////////\n      /droid.+; (glass) \\d/i\n      // Google Glass\n    ],\n    [MODEL, [VENDOR, GOOGLE], [TYPE, XR]],\n    [\n      /(pico) (4|neo3(?: link|pro)?)/i\n      // Pico\n    ],\n    [VENDOR, MODEL, [TYPE, XR]],\n    [\n      /(quest( \\d| pro)?s?).+vr/i\n      // Meta Quest\n    ],\n    [MODEL, [VENDOR, FACEBOOK], [TYPE, XR]],\n    [\n      ///////////////////\n      // EMBEDDED\n      ///////////////////\n      /(tesla)(?: qtcarbrowser|\\/[-\\w\\.]+)/i\n      // Tesla\n    ],\n    [VENDOR, [TYPE, EMBEDDED]],\n    [\n      /(aeobc)\\b/i\n      // Echo Dot\n    ],\n    [MODEL, [VENDOR, AMAZON], [TYPE, EMBEDDED]],\n    [\n      /(homepod).+mac os/i\n      // Apple HomePod\n    ],\n    [MODEL, [VENDOR, APPLE], [TYPE, EMBEDDED]],\n    [\n      /windows iot/i\n    ],\n    [[TYPE, EMBEDDED]],\n    [\n      ////////////////////\n      // MIXED (GENERIC)\n      ///////////////////\n      /droid .+?; ([^;]+?)(?: bui|; wv\\)|\\) applew).+?(mobile|vr|\\d) safari/i\n    ],\n    [MODEL, [TYPE, strMapper, { \"mobile\": \"Mobile\", \"xr\": \"VR\", \"*\": TABLET }]],\n    [\n      /\\b((tablet|tab)[;\\/]|focus\\/\\d(?!.+mobile))/i\n      // Unidentifiable Tablet\n    ],\n    [[TYPE, TABLET]],\n    [\n      /(phone|mobile(?:[;\\/]| [ \\w\\/\\.]*safari)|pda(?=.+windows ce))/i\n      // Unidentifiable Mobile\n    ],\n    [[TYPE, MOBILE]],\n    [\n      /droid .+?; ([\\w\\. -]+)( bui|\\))/i\n      // Generic Android Device\n    ],\n    [MODEL, [VENDOR, \"Generic\"]]\n  ],\n  engine: [\n    [\n      /windows.+ edge\\/([\\w\\.]+)/i\n      // EdgeHTML\n    ],\n    [VERSION, [NAME, EDGE + \"HTML\"]],\n    [\n      /(arkweb)\\/([\\w\\.]+)/i\n      // ArkWeb\n    ],\n    [NAME, VERSION],\n    [\n      /webkit\\/537\\.36.+chrome\\/(?!27)([\\w\\.]+)/i\n      // Blink\n    ],\n    [VERSION, [NAME, \"Blink\"]],\n    [\n      /(presto)\\/([\\w\\.]+)/i,\n      // Presto\n      /(webkit|trident|netfront|netsurf|amaya|lynx|w3m|goanna|servo)\\/([\\w\\.]+)/i,\n      // WebKit/Trident/NetFront/NetSurf/Amaya/Lynx/w3m/Goanna/Servo\n      /ekioh(flow)\\/([\\w\\.]+)/i,\n      // Flow\n      /(khtml|tasman|links)[\\/ ]\\(?([\\w\\.]+)/i,\n      // KHTML/Tasman/Links\n      /(icab)[\\/ ]([23]\\.[\\d\\.]+)/i,\n      // iCab\n      /\\b(libweb)/i\n      // LibWeb\n    ],\n    [NAME, VERSION],\n    [\n      /ladybird\\//i\n    ],\n    [[NAME, \"LibWeb\"]],\n    [\n      /rv\\:([\\w\\.]{1,9})\\b.+(gecko)/i\n      // Gecko\n    ],\n    [VERSION, NAME]\n  ],\n  os: [\n    [\n      // Windows\n      /microsoft (windows) (vista|xp)/i\n      // Windows (iTunes)\n    ],\n    [NAME, VERSION],\n    [\n      /(windows (?:phone(?: os)?|mobile|iot))[\\/ ]?([\\d\\.\\w ]*)/i\n      // Windows Phone\n    ],\n    [NAME, [VERSION, strMapper, windowsVersionMap]],\n    [\n      /windows nt 6\\.2; (arm)/i,\n      // Windows RT\n      /windows[\\/ ]([ntce\\d\\. ]+\\w)(?!.+xbox)/i,\n      /(?:win(?=3|9|n)|win 9x )([nt\\d\\.]+)/i\n    ],\n    [[VERSION, strMapper, windowsVersionMap], [NAME, WINDOWS]],\n    [\n      // iOS/macOS\n      /[adehimnop]{4,7}\\b(?:.*os ([\\w]+) like mac|; opera)/i,\n      // iOS\n      /(?:ios;fbsv\\/|iphone.+ios[\\/ ])([\\d\\.]+)/i,\n      /cfnetwork\\/.+darwin/i\n    ],\n    [[VERSION, /_/g, \".\"], [NAME, \"iOS\"]],\n    [\n      /(mac os x) ?([\\w\\. ]*)/i,\n      /(macintosh|mac_powerpc\\b)(?!.+haiku)/i\n      // Mac OS\n    ],\n    [[NAME, \"macOS\"], [VERSION, /_/g, \".\"]],\n    [\n      // Google Chromecast\n      /android ([\\d\\.]+).*crkey/i\n      // Google Chromecast, Android-based\n    ],\n    [VERSION, [NAME, CHROMECAST + \" Android\"]],\n    [\n      /fuchsia.*crkey\\/([\\d\\.]+)/i\n      // Google Chromecast, Fuchsia-based\n    ],\n    [VERSION, [NAME, CHROMECAST + \" Fuchsia\"]],\n    [\n      /crkey\\/([\\d\\.]+).*devicetype\\/smartspeaker/i\n      // Google Chromecast, Linux-based Smart Speaker\n    ],\n    [VERSION, [NAME, CHROMECAST + \" SmartSpeaker\"]],\n    [\n      /linux.*crkey\\/([\\d\\.]+)/i\n      // Google Chromecast, Legacy Linux-based\n    ],\n    [VERSION, [NAME, CHROMECAST + \" Linux\"]],\n    [\n      /crkey\\/([\\d\\.]+)/i\n      // Google Chromecast, unknown\n    ],\n    [VERSION, [NAME, CHROMECAST]],\n    [\n      // Mobile OSes\n      /droid ([\\w\\.]+)\\b.+(android[- ]x86|harmonyos)/i\n      // Android-x86/HarmonyOS\n    ],\n    [VERSION, NAME],\n    [\n      /(ubuntu) ([\\w\\.]+) like android/i\n      // Ubuntu Touch\n    ],\n    [[NAME, /(.+)/, \"$1 Touch\"], VERSION],\n    [\n      // Android/Blackberry/WebOS/QNX/Bada/RIM/KaiOS/Maemo/MeeGo/S40/Sailfish OS/OpenHarmony/Tizen\n      /(android|bada|blackberry|kaios|maemo|meego|openharmony|qnx|rim tablet os|sailfish|series40|symbian|tizen|webos)\\w*[-\\/\\.; ]?([\\d\\.]*)/i\n    ],\n    [NAME, VERSION],\n    [\n      /\\(bb(10);/i\n      // BlackBerry 10\n    ],\n    [VERSION, [NAME, BLACKBERRY]],\n    [\n      /(?:symbian ?os|symbos|s60(?=;)|series ?60)[-\\/ ]?([\\w\\.]*)/i\n      // Symbian\n    ],\n    [VERSION, [NAME, \"Symbian\"]],\n    [\n      /mozilla\\/[\\d\\.]+ \\((?:mobile|tablet|tv|mobile; [\\w ]+); rv:.+ gecko\\/([\\w\\.]+)/i\n      // Firefox OS\n    ],\n    [VERSION, [NAME, FIREFOX + \" OS\"]],\n    [\n      /web0s;.+rt(tv)/i,\n      /\\b(?:hp)?wos(?:browser)?\\/([\\w\\.]+)/i\n      // WebOS\n    ],\n    [VERSION, [NAME, \"webOS\"]],\n    [\n      /watch(?: ?os[,\\/]|\\d,\\d\\/)([\\d\\.]+)/i\n      // watchOS\n    ],\n    [VERSION, [NAME, \"watchOS\"]],\n    [\n      // Google ChromeOS\n      /(cros) [\\w]+(?:\\)| ([\\w\\.]+)\\b)/i\n      // Chromium OS\n    ],\n    [[NAME, \"Chrome OS\"], VERSION],\n    [\n      // Smart TVs\n      /panasonic;(viera)/i,\n      // Panasonic Viera\n      /(netrange)mmh/i,\n      // Netrange\n      /(nettv)\\/(\\d+\\.[\\w\\.]+)/i,\n      // NetTV\n      // Console\n      /(nintendo|playstation) (\\w+)/i,\n      // Nintendo/Playstation\n      /(xbox); +xbox ([^\\);]+)/i,\n      // Microsoft Xbox (360, One, X, S, Series X, Series S)\n      /(pico) .+os([\\w\\.]+)/i,\n      // Pico\n      // Other\n      /\\b(joli|palm)\\b ?(?:os)?\\/?([\\w\\.]*)/i,\n      // Joli/Palm\n      /(mint)[\\/\\(\\) ]?(\\w*)/i,\n      // Mint\n      /(mageia|vectorlinux)[; ]/i,\n      // Mageia/VectorLinux\n      /([kxln]?ubuntu|debian|suse|opensuse|gentoo|arch(?= linux)|slackware|fedora|mandriva|centos|pclinuxos|red ?hat|zenwalk|linpus|raspbian|plan 9|minix|risc os|contiki|deepin|manjaro|elementary os|sabayon|linspire)(?: gnu\\/linux)?(?: enterprise)?(?:[- ]linux)?(?:-gnu)?[-\\/ ]?(?!chrom|package)([-\\w\\.]*)/i,\n      // Ubuntu/Debian/SUSE/Gentoo/Arch/Slackware/Fedora/Mandriva/CentOS/PCLinuxOS/RedHat/Zenwalk/Linpus/Raspbian/Plan9/Minix/RISCOS/Contiki/Deepin/Manjaro/elementary/Sabayon/Linspire\n      /(hurd|linux)(?: arm\\w*| x86\\w*| ?)([\\w\\.]*)/i,\n      // Hurd/Linux\n      /(gnu) ?([\\w\\.]*)/i,\n      // GNU\n      /\\b([-frentopcghs]{0,5}bsd|dragonfly)[\\/ ]?(?!amd|[ix346]{1,2}86)([\\w\\.]*)/i,\n      // FreeBSD/NetBSD/OpenBSD/PC-BSD/GhostBSD/DragonFly\n      /(haiku) (\\w+)/i\n      // Haiku\n    ],\n    [NAME, VERSION],\n    [\n      /(sunos) ?([\\w\\.\\d]*)/i\n      // Solaris\n    ],\n    [[NAME, \"Solaris\"], VERSION],\n    [\n      /((?:open)?solaris)[-\\/ ]?([\\w\\.]*)/i,\n      // Solaris\n      /(aix) ((\\d)(?=\\.|\\)| )[\\w\\.])*/i,\n      // AIX\n      /\\b(beos|os\\/2|amigaos|morphos|openvms|fuchsia|hp-ux|serenityos)/i,\n      // BeOS/OS2/AmigaOS/MorphOS/OpenVMS/Fuchsia/HP-UX/SerenityOS\n      /(unix) ?([\\w\\.]*)/i\n      // UNIX\n    ],\n    [NAME, VERSION]\n  ]\n};\nvar defaultProps = function() {\n  var props = { init: {}, isIgnore: {}, isIgnoreRgx: {}, toString: {} };\n  setProps.call(props.init, [\n    [UA_BROWSER, [NAME, VERSION, MAJOR, TYPE]],\n    [UA_CPU, [ARCHITECTURE]],\n    [UA_DEVICE, [TYPE, MODEL, VENDOR]],\n    [UA_ENGINE, [NAME, VERSION]],\n    [UA_OS, [NAME, VERSION]]\n  ]);\n  setProps.call(props.isIgnore, [\n    [UA_BROWSER, [VERSION, MAJOR]],\n    [UA_ENGINE, [VERSION]],\n    [UA_OS, [VERSION]]\n  ]);\n  setProps.call(props.isIgnoreRgx, [\n    [UA_BROWSER, / ?browser$/i],\n    [UA_OS, / ?os$/i]\n  ]);\n  setProps.call(props.toString, [\n    [UA_BROWSER, [NAME, VERSION]],\n    [UA_CPU, [ARCHITECTURE]],\n    [UA_DEVICE, [VENDOR, MODEL]],\n    [UA_ENGINE, [NAME, VERSION]],\n    [UA_OS, [NAME, VERSION]]\n  ]);\n  return props;\n}();\nvar createIData = function(item, itemType) {\n  var init_props = defaultProps.init[itemType], is_ignoreProps = defaultProps.isIgnore[itemType] || 0, is_ignoreRgx = defaultProps.isIgnoreRgx[itemType] || 0, toString_props = defaultProps.toString[itemType] || 0;\n  function IData() {\n    setProps.call(this, init_props);\n  }\n  IData.prototype.getItem = function() {\n    return item;\n  };\n  IData.prototype.withClientHints = function() {\n    if (!NAVIGATOR_UADATA) {\n      return item.parseCH().get();\n    }\n    return NAVIGATOR_UADATA.getHighEntropyValues(CH_ALL_VALUES).then(function(res) {\n      return item.setCH(new UACHData(res, false)).parseCH().get();\n    });\n  };\n  IData.prototype.withFeatureCheck = function() {\n    return item.detectFeature().get();\n  };\n  if (itemType != UA_RESULT) {\n    IData.prototype.is = function(strToCheck) {\n      var is = false;\n      for (var i2 in this) {\n        if (this.hasOwnProperty(i2) && !has(is_ignoreProps, i2) && lowerize(is_ignoreRgx ? strip(is_ignoreRgx, this[i2]) : this[i2]) == lowerize(is_ignoreRgx ? strip(is_ignoreRgx, strToCheck) : strToCheck)) {\n          is = true;\n          if (strToCheck != UNDEF_TYPE) break;\n        } else if (strToCheck == UNDEF_TYPE && is) {\n          is = !is;\n          break;\n        }\n      }\n      return is;\n    };\n    IData.prototype.toString = function() {\n      var str = EMPTY;\n      for (var i2 in toString_props) {\n        if (typeof this[toString_props[i2]] !== UNDEF_TYPE) {\n          str += (str ? \" \" : EMPTY) + this[toString_props[i2]];\n        }\n      }\n      return str || UNDEF_TYPE;\n    };\n  }\n  if (!NAVIGATOR_UADATA) {\n    IData.prototype.then = function(cb) {\n      var that = this;\n      var IDataResolve = function() {\n        for (var prop in that) {\n          if (that.hasOwnProperty(prop)) {\n            this[prop] = that[prop];\n          }\n        }\n      };\n      IDataResolve.prototype = {\n        is: IData.prototype.is,\n        toString: IData.prototype.toString\n      };\n      var resolveData = new IDataResolve();\n      cb(resolveData);\n      return resolveData;\n    };\n  }\n  return new IData();\n};\nfunction UACHData(uach, isHttpUACH) {\n  uach = uach || {};\n  setProps.call(this, CH_ALL_VALUES);\n  if (isHttpUACH) {\n    setProps.call(this, [\n      [BRANDS, itemListToArray(uach[CH_HEADER])],\n      [FULLVERLIST, itemListToArray(uach[CH_HEADER_FULL_VER_LIST])],\n      [MOBILE, /\\?1/.test(uach[CH_HEADER_MOBILE])],\n      [MODEL, stripQuotes(uach[CH_HEADER_MODEL])],\n      [PLATFORM, stripQuotes(uach[CH_HEADER_PLATFORM])],\n      [PLATFORMVER, stripQuotes(uach[CH_HEADER_PLATFORM_VER])],\n      [ARCHITECTURE, stripQuotes(uach[CH_HEADER_ARCH])],\n      [FORMFACTORS, itemListToArray(uach[CH_HEADER_FORM_FACTORS])],\n      [BITNESS, stripQuotes(uach[CH_HEADER_BITNESS])]\n    ]);\n  } else {\n    for (var prop in uach) {\n      if (this.hasOwnProperty(prop) && typeof uach[prop] !== UNDEF_TYPE) this[prop] = uach[prop];\n    }\n  }\n}\nfunction UAItem(itemType, ua, rgxMap, uaCH) {\n  this.get = function(prop) {\n    if (!prop) return this.data;\n    return this.data.hasOwnProperty(prop) ? this.data[prop] : void 0;\n  };\n  this.set = function(prop, val) {\n    this.data[prop] = val;\n    return this;\n  };\n  this.setCH = function(ch) {\n    this.uaCH = ch;\n    return this;\n  };\n  this.detectFeature = function() {\n    if (NAVIGATOR && NAVIGATOR.userAgent == this.ua) {\n      switch (this.itemType) {\n        case UA_BROWSER:\n          if (NAVIGATOR.brave && typeof NAVIGATOR.brave.isBrave == FUNC_TYPE) {\n            this.set(NAME, \"Brave\");\n          }\n          break;\n        case UA_DEVICE:\n          if (!this.get(TYPE) && NAVIGATOR_UADATA && NAVIGATOR_UADATA[MOBILE]) {\n            this.set(TYPE, MOBILE);\n          }\n          if (this.get(MODEL) == \"Macintosh\" && NAVIGATOR && typeof NAVIGATOR.standalone !== UNDEF_TYPE && NAVIGATOR.maxTouchPoints && NAVIGATOR.maxTouchPoints > 2) {\n            this.set(MODEL, \"iPad\").set(TYPE, TABLET);\n          }\n          break;\n        case UA_OS:\n          if (!this.get(NAME) && NAVIGATOR_UADATA && NAVIGATOR_UADATA[PLATFORM]) {\n            this.set(NAME, NAVIGATOR_UADATA[PLATFORM]);\n          }\n          break;\n        case UA_RESULT:\n          var data = this.data;\n          var detect = function(itemType2) {\n            return data[itemType2].getItem().detectFeature().get();\n          };\n          this.set(UA_BROWSER, detect(UA_BROWSER)).set(UA_CPU, detect(UA_CPU)).set(UA_DEVICE, detect(UA_DEVICE)).set(UA_ENGINE, detect(UA_ENGINE)).set(UA_OS, detect(UA_OS));\n      }\n    }\n    return this;\n  };\n  this.parseUA = function() {\n    if (this.itemType != UA_RESULT) {\n      rgxMapper.call(this.data, this.ua, this.rgxMap);\n    }\n    if (this.itemType == UA_BROWSER) {\n      this.set(MAJOR, majorize(this.get(VERSION)));\n    }\n    return this;\n  };\n  this.parseCH = function() {\n    var uaCH2 = this.uaCH, rgxMap2 = this.rgxMap;\n    switch (this.itemType) {\n      case UA_BROWSER:\n      case UA_ENGINE:\n        var brands = uaCH2[FULLVERLIST] || uaCH2[BRANDS], prevName;\n        if (brands) {\n          for (var i2 in brands) {\n            var brandName = brands[i2].brand || brands[i2], brandVersion = brands[i2].version;\n            if (this.itemType == UA_BROWSER && !/not.a.brand/i.test(brandName) && (!prevName || /chrom/i.test(prevName) && brandName != CHROMIUM)) {\n              brandName = strMapper(brandName, {\n                \"Chrome\": \"Google Chrome\",\n                \"Edge\": \"Microsoft Edge\",\n                \"Chrome WebView\": \"Android WebView\",\n                \"Chrome Headless\": \"HeadlessChrome\",\n                \"Huawei Browser\": \"HuaweiBrowser\",\n                \"MIUI Browser\": \"Miui Browser\",\n                \"Opera Mobi\": \"OperaMobile\",\n                \"Yandex\": \"YaBrowser\"\n              });\n              this.set(NAME, brandName).set(VERSION, brandVersion).set(MAJOR, majorize(brandVersion));\n              prevName = brandName;\n            }\n            if (this.itemType == UA_ENGINE && brandName == CHROMIUM) {\n              this.set(VERSION, brandVersion);\n            }\n          }\n        }\n        break;\n      case UA_CPU:\n        var archName = uaCH2[ARCHITECTURE];\n        if (archName) {\n          if (archName && uaCH2[BITNESS] == \"64\") archName += \"64\";\n          rgxMapper.call(this.data, archName + \";\", rgxMap2);\n        }\n        break;\n      case UA_DEVICE:\n        if (uaCH2[MOBILE]) {\n          this.set(TYPE, MOBILE);\n        }\n        if (uaCH2[MODEL]) {\n          this.set(MODEL, uaCH2[MODEL]);\n          if (!this.get(TYPE) || !this.get(VENDOR)) {\n            var reParse = {};\n            rgxMapper.call(reParse, \"droid 9; \" + uaCH2[MODEL] + \")\", rgxMap2);\n            if (!this.get(TYPE) && !!reParse.type) {\n              this.set(TYPE, reParse.type);\n            }\n            if (!this.get(VENDOR) && !!reParse.vendor) {\n              this.set(VENDOR, reParse.vendor);\n            }\n          }\n        }\n        if (uaCH2[FORMFACTORS]) {\n          var ff;\n          if (typeof uaCH2[FORMFACTORS] !== \"string\") {\n            var idx = 0;\n            while (!ff && idx < uaCH2[FORMFACTORS].length) {\n              ff = strMapper(uaCH2[FORMFACTORS][idx++], formFactorsMap);\n            }\n          } else {\n            ff = strMapper(uaCH2[FORMFACTORS], formFactorsMap);\n          }\n          this.set(TYPE, ff);\n        }\n        break;\n      case UA_OS:\n        var osName = uaCH2[PLATFORM];\n        if (osName) {\n          var osVersion = uaCH2[PLATFORMVER];\n          if (osName == WINDOWS) osVersion = parseInt(majorize(osVersion), 10) >= 13 ? \"11\" : \"10\";\n          this.set(NAME, osName).set(VERSION, osVersion);\n        }\n        if (this.get(NAME) == WINDOWS && uaCH2[MODEL] == \"Xbox\") {\n          this.set(NAME, \"Xbox\").set(VERSION, void 0);\n        }\n        break;\n      case UA_RESULT:\n        var data = this.data;\n        var parse = function(itemType2) {\n          return data[itemType2].getItem().setCH(uaCH2).parseCH().get();\n        };\n        this.set(UA_BROWSER, parse(UA_BROWSER)).set(UA_CPU, parse(UA_CPU)).set(UA_DEVICE, parse(UA_DEVICE)).set(UA_ENGINE, parse(UA_ENGINE)).set(UA_OS, parse(UA_OS));\n    }\n    return this;\n  };\n  setProps.call(this, [\n    [\"itemType\", itemType],\n    [\"ua\", ua],\n    [\"uaCH\", uaCH],\n    [\"rgxMap\", rgxMap],\n    [\"data\", createIData(this, itemType)]\n  ]);\n  return this;\n}\nfunction UAParser(ua, extensions, headers) {\n  if (typeof ua === OBJ_TYPE) {\n    if (isExtensions(ua, true)) {\n      if (typeof extensions === OBJ_TYPE) {\n        headers = extensions;\n      }\n      extensions = ua;\n    } else {\n      headers = ua;\n      extensions = void 0;\n    }\n    ua = void 0;\n  } else if (typeof ua === STR_TYPE && !isExtensions(extensions, true)) {\n    headers = extensions;\n    extensions = void 0;\n  }\n  if (headers && typeof headers.append === FUNC_TYPE) {\n    var kv = {};\n    headers.forEach(function(v2, k2) {\n      kv[k2] = v2;\n    });\n    headers = kv;\n  }\n  if (!(this instanceof UAParser)) {\n    return new UAParser(ua, extensions, headers).getResult();\n  }\n  var userAgent = typeof ua === STR_TYPE ? ua : (\n    // Passed user-agent string\n    headers && headers[USER_AGENT] ? headers[USER_AGENT] : (\n      // User-Agent from passed headers\n      NAVIGATOR && NAVIGATOR.userAgent ? NAVIGATOR.userAgent : (\n        // navigator.userAgent\n        EMPTY\n      )\n    )\n  ), httpUACH = new UACHData(headers, true), regexMap = extensions ? extend(defaultRegexes, extensions) : defaultRegexes, createItemFunc = function(itemType) {\n    if (itemType == UA_RESULT) {\n      return function() {\n        return new UAItem(itemType, userAgent, regexMap, httpUACH).set(\"ua\", userAgent).set(UA_BROWSER, this.getBrowser()).set(UA_CPU, this.getCPU()).set(UA_DEVICE, this.getDevice()).set(UA_ENGINE, this.getEngine()).set(UA_OS, this.getOS()).get();\n      };\n    } else {\n      return function() {\n        return new UAItem(itemType, userAgent, regexMap[itemType], httpUACH).parseUA().get();\n      };\n    }\n  };\n  setProps.call(this, [\n    [\"getBrowser\", createItemFunc(UA_BROWSER)],\n    [\"getCPU\", createItemFunc(UA_CPU)],\n    [\"getDevice\", createItemFunc(UA_DEVICE)],\n    [\"getEngine\", createItemFunc(UA_ENGINE)],\n    [\"getOS\", createItemFunc(UA_OS)],\n    [\"getResult\", createItemFunc(UA_RESULT)],\n    [\"getUA\", function() {\n      return userAgent;\n    }],\n    [\"setUA\", function(ua2) {\n      if (isString(ua2))\n        userAgent = ua2.length > UA_MAX_LENGTH ? trim(ua2, UA_MAX_LENGTH) : ua2;\n      return this;\n    }]\n  ]).setUA(userAgent);\n  return this;\n}\nUAParser.VERSION = LIBVERSION;\nUAParser.BROWSER = enumerize([NAME, VERSION, MAJOR, TYPE]);\nUAParser.CPU = enumerize([ARCHITECTURE]);\nUAParser.DEVICE = enumerize([MODEL, VENDOR, TYPE, CONSOLE, MOBILE, SMARTTV, TABLET, WEARABLE, EMBEDDED]);\nUAParser.ENGINE = UAParser.OS = enumerize([NAME, VERSION]);\nconst useBrowserInfo = () => {\n  const browserInfo = T$5(() => {\n    {\n      const parser = new UAParser();\n      const result = parser.getResult();\n      return {\n        browser: result.browser,\n        engine: result.engine,\n        os: result.os,\n        device: result.device,\n        cpu: result.cpu\n      };\n    }\n  }, []);\n  return browserInfo;\n};\nfunction useHotkeyListenerComboText(action) {\n  const userAgent = useBrowserInfo();\n  return userAgent.os.name.toLowerCase().includes(\"mac\") ? hotkeyActionDefinitions[action].keyComboMac : hotkeyActionDefinitions[action].keyComboDefault;\n}\nfunction ChatBox() {\n  const chatState = useChatState();\n  const currentChat = T$5(\n    () => chatState.chats.find((c2) => c2.id === chatState.currentChatId),\n    [chatState.chats, chatState.currentChatId]\n  );\n  const currentInput = T$5(\n    () => (currentChat == null ? void 0 : currentChat.inputValue) || \"\",\n    [currentChat == null ? void 0 : currentChat.inputValue]\n  );\n  const showBigBox = T$5(() => {\n    return currentInput.split(\"\\n\").length > 1 || currentInput.length > 30;\n  }, [currentInput]);\n  const handleInputChange = q$3(\n    (value) => {\n      chatState.setChatInput(chatState.currentChatId, value);\n    },\n    [chatState.setChatInput, chatState.currentChatId]\n  );\n  const handleSubmit = q$3(() => {\n    if (!currentChat || !currentInput.trim()) return;\n    chatState.addMessage(currentChat.id, currentInput);\n  }, [currentChat, currentInput, chatState.addMessage]);\n  const handleKeyDown = q$3(\n    (e2) => {\n      if (e2.key === \"Enter\" && !e2.shiftKey) {\n        e2.preventDefault();\n        handleSubmit();\n      }\n    },\n    [handleSubmit]\n  );\n  const inputRef = A$3(null);\n  y$6(() => {\n    var _a, _b, _c;\n    const blurHandler = () => {\n      var _a2;\n      return (_a2 = inputRef.current) == null ? void 0 : _a2.focus();\n    };\n    if (chatState.isPromptCreationActive) {\n      (_a = inputRef.current) == null ? void 0 : _a.focus();\n      (_b = inputRef.current) == null ? void 0 : _b.addEventListener(\"blur\", blurHandler);\n    } else {\n      (_c = inputRef.current) == null ? void 0 : _c.blur();\n    }\n    return () => {\n      var _a2;\n      (_a2 = inputRef.current) == null ? void 0 : _a2.removeEventListener(\"blur\", blurHandler);\n    };\n  }, [chatState.isPromptCreationActive]);\n  const buttonClassName = T$5(\n    () => cn(\n      \"flex size-6 items-center justify-center rounded-full bg-transparent p-1 text-zinc-950 opacity-20\",\n      currentInput.length > 0 && \"bg-blue-600 text-white opacity-100\"\n    ),\n    [currentInput.length]\n  );\n  const textareaClassName = T$5(\n    () => cn(\n      \"w-full flex-1 resize-none bg-transparent text-zinc-950 placeholder:text-zinc-950/50 focus:outline-none\",\n      showBigBox ? \"h-[4.5em]\" : \"h-6\"\n    ),\n    [showBigBox]\n  );\n  const ctrlAltCText = useHotkeyListenerComboText(HotkeyActions.CTRL_ALT_C);\n  return /* @__PURE__ */ u$9(\n    \"div\",\n    {\n      className: cn(\n        \"flex h-fit w-80 flex-1 flex-row items-end gap-1 rounded-2xl border border-border/10 bg-zinc-950/5 p-1.5 pl-2 text-sm text-zinc-950 shadow-inner transition-all duration-150 placeholder:text-zinc-950/70\",\n        chatState.isPromptCreationActive && \"ring-2 ring-blue-600\"\n      ),\n      onClick: () => chatState.startPromptCreation(),\n      role: \"button\",\n      tabIndex: 0,\n      children: [\n        /* @__PURE__ */ u$9(\n          J,\n          {\n            ref: inputRef,\n            className: textareaClassName,\n            rows: showBigBox ? 4 : 1,\n            value: currentInput,\n            onChange: (e2) => handleInputChange(e2.currentTarget.value),\n            onKeyDown: handleKeyDown,\n            placeholder: chatState.isPromptCreationActive ? \"Enter prompt...\" : `What do you want to change? (${ctrlAltCText})`\n          }\n        ),\n        /* @__PURE__ */ u$9(\n          H$3,\n          {\n            className: buttonClassName,\n            disabled: currentInput.length === 0,\n            onClick: handleSubmit,\n            children: /* @__PURE__ */ u$9(Send, { className: \"size-3\" })\n          }\n        )\n      ]\n    }\n  );\n}\nconst DropdownMenu = to;\nconst DropdownMenuButton = D$1(\n  (props, ref) => {\n    return /* @__PURE__ */ u$9(mt, { as: k$3, ref, ...props });\n  }\n);\nconst DropdownMenuContent = D$1(\n  (props, ref) => {\n    return /* @__PURE__ */ u$9(\n      Tt,\n      {\n        ref,\n        anchor: \"bottom\",\n        transition: true,\n        portal: true,\n        ...props,\n        className: cn(\n          \"z-50 flex w-fit min-w-24 max-w-90 flex-col items-stretch justify-start gap-1 rounded-lg border border-border/30 border-solid bg-background/60 p-1 shadow-black/50 shadow-lg outline-none backdrop-blur-md data-focus:outline-none\",\n          props.className\n        )\n      }\n    );\n  }\n);\nconst DropdownMenuItemStyles = \"w-full flex flex-row select-none items-center justify-start gap-2 p-2 pr-6 truncate overflow-hidden rounded-md hover:bg-zinc-950/10 focus:text-zinc-900 cursor-pointer transition-color duration-150 text-sm font-normal text-foreground\";\nconst DropdownMenuButttonItem = D$1(\n  (props, ref) => {\n    return /* @__PURE__ */ u$9(ft, { ref, children: /* @__PURE__ */ u$9(\n      H$3,\n      {\n        ...props,\n        className: cn(DropdownMenuItemStyles, props.className)\n      }\n    ) });\n  }\n);\nD$1(\n  (props, ref) => {\n    return /* @__PURE__ */ u$9(ft, { ref, children: /* @__PURE__ */ u$9(\"a\", { ...props, className: cn(DropdownMenuItemStyles, props.className) }) });\n  }\n);\nfunction ToolbarItem(props) {\n  return /* @__PURE__ */ u$9(\"div\", { className: \"flex h-full shrink-0 items-center justify-center\", children: [\n    props.children,\n    props.badgeContent && /* @__PURE__ */ u$9(\n      \"div\",\n      {\n        className: cn(\n          \"bg-blue-600 text-white\",\n          props.badgeClassName,\n          \"-bottom-0.5 -right-1 pointer-events-none absolute flex h-4 w-max min-w-4 max-w-8 select-none items-center justify-center truncate rounded-full px-1 font-semibold text-xs\"\n        ),\n        children: props.badgeContent\n      }\n    ),\n    props.statusDot && /* @__PURE__ */ u$9(\n      \"div\",\n      {\n        className: cn(\n          \"bg-rose-600\",\n          props.statusDotClassName,\n          \"pointer-events-none absolute top-0 right-0 size-1.5 rounded-full\"\n        )\n      }\n    )\n  ] });\n}\nconst ToolbarButton = D$1(\n  ({\n    badgeContent,\n    badgeClassName,\n    statusDot,\n    statusDotClassName,\n    tooltipHint,\n    variant = \"default\",\n    ...props\n  }, ref) => {\n    const button = /* @__PURE__ */ u$9(\n      H$3,\n      {\n        ref,\n        ...props,\n        className: cn(\n          \"flex items-center justify-center rounded-full p-1 text-zinc-950 hover:bg-zinc-950/5\",\n          variant === \"default\" ? \"size-8\" : \"h-8 rounded-full\"\n        )\n      }\n    );\n    return /* @__PURE__ */ u$9(\n      ToolbarItem,\n      {\n        badgeContent,\n        badgeClassName,\n        statusDot,\n        statusDotClassName,\n        children: button\n      }\n    );\n  }\n);\nToolbarButton.displayName = \"ToolbarButton\";\nfunction ToolbarSection({ children }) {\n  return /* @__PURE__ */ u$9(\"div\", { className: \"fade-in slide-in-from-bottom-2 flex max-h-full max-w-sm animate-in snap-start flex-row items-center justify-between gap-2 border-x border-r-border/30 border-l-transparent px-3 first:pl-0 last:border-r-transparent last:pr-0\", children });\n}\nfunction MoreActionsButton() {\n  const minimizeCompanion = useAppState((state) => state.minimize);\n  const plugins = usePlugins();\n  const pluginTools = T$5(() => {\n    return plugins.flatMap((plugin) => plugin.actions);\n  }, [plugins]);\n  return /* @__PURE__ */ u$9(ToolbarSection, { children: /* @__PURE__ */ u$9(DropdownMenu, { children: [\n    /* @__PURE__ */ u$9(DropdownMenuButton, { children: /* @__PURE__ */ u$9(ToolbarButton, { children: /* @__PURE__ */ u$9(Ellipsis, { className: \"size-4\" }) }) }),\n    /* @__PURE__ */ u$9(DropdownMenuContent, { children: [\n      pluginTools.map((tool) => /* @__PURE__ */ u$9(DropdownMenuButttonItem, { onClick: tool.execute, children: tool.name })),\n      /* @__PURE__ */ u$9(DropdownMenuButttonItem, { onClick: minimizeCompanion, children: [\n        /* @__PURE__ */ u$9(Minimize2, { className: \"size-4\" }),\n        \"Minimize companion\"\n      ] })\n    ] })\n  ] }) });\n}\nconst DraggableContext = K$3(\n  null\n);\nconst DraggableProvider = ({\n  containerRef,\n  children,\n  snapAreas,\n  onDragStart,\n  onDragEnd\n}) => {\n  const [borderLocation, setBorderLocation] = d$4({\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0\n  });\n  const dragStartListeners = A$3(/* @__PURE__ */ new Set());\n  const dragEndListeners = A$3(/* @__PURE__ */ new Set());\n  const registerDragStart = q$3((cb) => {\n    dragStartListeners.current.add(cb);\n    return () => dragStartListeners.current.delete(cb);\n  }, []);\n  const registerDragEnd = q$3((cb) => {\n    dragEndListeners.current.add(cb);\n    return () => dragEndListeners.current.delete(cb);\n  }, []);\n  const emitDragStart = q$3(() => {\n    if (onDragStart) onDragStart();\n    dragStartListeners.current.forEach((cb) => cb());\n  }, [onDragStart]);\n  const emitDragEnd = q$3(() => {\n    if (onDragEnd) onDragEnd();\n    dragEndListeners.current.forEach((cb) => cb());\n  }, [onDragEnd]);\n  const contextValue = {\n    borderLocation,\n    snapAreas,\n    registerDragStart,\n    registerDragEnd,\n    emitDragStart,\n    emitDragEnd\n  };\n  y$6(() => {\n    if (!containerRef.current) return;\n    const updateBorderLocation = () => {\n      const rect = containerRef.current.getBoundingClientRect();\n      setBorderLocation({\n        top: rect.top,\n        left: rect.left,\n        right: rect.right,\n        bottom: rect.bottom\n      });\n    };\n    updateBorderLocation();\n    const resizeObserver = new ResizeObserver(updateBorderLocation);\n    resizeObserver.observe(containerRef.current);\n    const handleScroll = () => {\n      requestAnimationFrame(updateBorderLocation);\n    };\n    window.addEventListener(\"scroll\", handleScroll, true);\n    let parent = containerRef.current.parentElement;\n    while (parent) {\n      parent.addEventListener(\"scroll\", handleScroll);\n      parent = parent.parentElement;\n    }\n    return () => {\n      var _a;\n      resizeObserver.disconnect();\n      window.removeEventListener(\"scroll\", handleScroll, true);\n      parent = (_a = containerRef.current) == null ? void 0 : _a.parentElement;\n      while (parent) {\n        parent.removeEventListener(\"scroll\", handleScroll);\n        parent = parent.parentElement;\n      }\n    };\n  }, [containerRef]);\n  return /* @__PURE__ */ u$9(DraggableContext.Provider, { value: contextValue, children });\n};\nfunction useDraggable(config) {\n  const providerData = x$4(DraggableContext);\n  const latestProviderDataRef = A$3(providerData);\n  y$6(() => {\n    latestProviderDataRef.current = providerData;\n  }, [providerData]);\n  const movingElementRef = A$3(null);\n  const dragInitiatorRef = A$3(null);\n  const [movingElementNode, setMovingElementNode] = d$4(null);\n  const [dragInitiatorNode, setDragInitiatorNode] = d$4(null);\n  const mouseToDraggableCenterOffsetRef = A$3(null);\n  const mouseDownPosRef = A$3(null);\n  const currentMousePosRef = A$3(null);\n  const isDraggingRef = A$3(false);\n  const persistedRelativeCenterRef = A$3(config.initialRelativeCenter);\n  const [currentSnapArea, setCurrentSnapArea] = d$4(null);\n  const {\n    startThreshold = 3,\n    areaSnapThreshold = 60,\n    // px, default threshold for snapping\n    onDragStart,\n    onDragEnd,\n    initialSnapArea,\n    springStiffness = 0.3,\n    // Default spring stiffness\n    springDampness = 0.5\n    // Default spring dampness\n    // initialRelativeCenter is used to initialize persistedRelativeCenterRef\n  } = config;\n  const animatedPositionRef = A$3(null);\n  const velocityRef = A$3({ x: 0, y: 0 });\n  const hasAnimatedOnceRef = A$3(false);\n  y$6(() => {\n    if (initialSnapArea && providerData && providerData.borderLocation && providerData.snapAreas && providerData.snapAreas[initialSnapArea] && !isDraggingRef.current) {\n      const { top, left, right, bottom } = providerData.borderLocation;\n      const width = right - left;\n      const height = bottom - top;\n      const areaCenters = {\n        topLeft: { x: left, y: top },\n        topCenter: { x: left + width / 2, y: top },\n        topRight: { x: right, y: top },\n        centerLeft: { x: left, y: top + height / 2 },\n        center: { x: left + width / 2, y: top + height / 2 },\n        centerRight: { x: right, y: top + height / 2 },\n        bottomLeft: { x: left, y: bottom },\n        bottomCenter: { x: left + width / 2, y: bottom },\n        bottomRight: { x: right, y: bottom }\n      };\n      const center = areaCenters[initialSnapArea];\n      if (center && window.innerWidth > 0 && window.innerHeight > 0) {\n        const relX = (center.x - left) / (right - left);\n        const relY = (center.y - top) / (bottom - top);\n        persistedRelativeCenterRef.current = { x: relX, y: relY };\n      }\n    }\n  }, [initialSnapArea, providerData]);\n  function getSnapAreaCenters(borderLocation) {\n    const { top, left, right, bottom } = borderLocation;\n    const width = right - left;\n    const height = bottom - top;\n    return {\n      topLeft: { x: left, y: top },\n      topCenter: { x: left + width / 2, y: top },\n      topRight: { x: right, y: top },\n      centerLeft: { x: left, y: top + height / 2 },\n      center: { x: left + width / 2, y: top + height / 2 },\n      centerRight: { x: right, y: top + height / 2 },\n      bottomLeft: { x: left, y: bottom },\n      bottomCenter: { x: left + width / 2, y: bottom },\n      bottomRight: { x: right, y: bottom }\n    };\n  }\n  const updateDraggablePosition = q$3(() => {\n    var _a, _b;\n    const draggableEl = movingElementRef.current;\n    if (!draggableEl) return;\n    const draggableWidth = draggableEl.offsetWidth;\n    const draggableHeight = draggableEl.offsetHeight;\n    const offsetParent = draggableEl.offsetParent;\n    let parentViewportLeft = 0;\n    let parentViewportTop = 0;\n    let parentWidth = window.innerWidth;\n    let parentHeight = window.innerHeight;\n    if (offsetParent) {\n      const opRect = offsetParent.getBoundingClientRect();\n      parentViewportLeft = opRect.left;\n      parentViewportTop = opRect.top;\n      parentWidth = offsetParent.offsetWidth || window.innerWidth;\n      parentHeight = offsetParent.offsetHeight || window.innerHeight;\n    }\n    let targetViewportCenterX = null;\n    let targetViewportCenterY = null;\n    const currentDesiredRelativeCenter = persistedRelativeCenterRef.current;\n    let snapArea = null;\n    let snapTarget = null;\n    const provider = latestProviderDataRef.current;\n    if (isDraggingRef.current && mouseToDraggableCenterOffsetRef.current && currentMousePosRef.current && provider && provider.borderLocation && provider.snapAreas) {\n      const dragCenter = {\n        x: currentMousePosRef.current.x - mouseToDraggableCenterOffsetRef.current.x,\n        y: currentMousePosRef.current.y - mouseToDraggableCenterOffsetRef.current.y\n      };\n      const areaCenters = getSnapAreaCenters(provider.borderLocation);\n      let minDist = Number.POSITIVE_INFINITY;\n      let closestArea = null;\n      let closestCenter = null;\n      for (const area in provider.snapAreas) {\n        if (provider.snapAreas[area]) {\n          const center = areaCenters[area];\n          if (!center) continue;\n          const dist = Math.hypot(\n            center.x - dragCenter.x,\n            center.y - dragCenter.y\n          );\n          if (dist < minDist) {\n            minDist = dist;\n            closestArea = area;\n            closestCenter = center;\n          }\n        }\n      }\n      if (closestArea && closestCenter && minDist <= areaSnapThreshold) {\n        snapArea = closestArea;\n        snapTarget = closestCenter;\n      }\n    }\n    if (isDraggingRef.current && snapTarget) {\n      targetViewportCenterX = snapTarget.x;\n      targetViewportCenterY = snapTarget.y;\n      setCurrentSnapArea(snapArea);\n    } else if (isDraggingRef.current && mouseToDraggableCenterOffsetRef.current && currentMousePosRef.current) {\n      targetViewportCenterX = currentMousePosRef.current.x - mouseToDraggableCenterOffsetRef.current.x;\n      targetViewportCenterY = currentMousePosRef.current.y - mouseToDraggableCenterOffsetRef.current.y;\n      setCurrentSnapArea(null);\n    } else {\n      if (currentDesiredRelativeCenter && parentWidth > 0 && parentHeight > 0) {\n        const isTopHalf2 = currentDesiredRelativeCenter.y <= 0.5;\n        const isLeftHalf2 = currentDesiredRelativeCenter.x <= 0.5;\n        if (isLeftHalf2) {\n          const targetCenterXInParent = parentWidth * currentDesiredRelativeCenter.x;\n          targetViewportCenterX = parentViewportLeft + targetCenterXInParent;\n        } else {\n          const targetCenterXInParent = parentWidth * (1 - currentDesiredRelativeCenter.x);\n          targetViewportCenterX = parentViewportLeft + parentWidth - targetCenterXInParent;\n        }\n        if (isTopHalf2) {\n          const targetCenterYInParent = parentHeight * currentDesiredRelativeCenter.y;\n          targetViewportCenterY = parentViewportTop + targetCenterYInParent;\n        } else {\n          const targetCenterYInParent = parentHeight * (1 - currentDesiredRelativeCenter.y);\n          targetViewportCenterY = parentViewportTop + parentHeight - targetCenterYInParent;\n        }\n      } else {\n        if (!((_a = movingElementRef.current) == null ? void 0 : _a.style.left) && !((_b = movingElementRef.current) == null ? void 0 : _b.style.top)) {\n          console.warn(\n            \"useDraggable: Cannot determine position. Parent has no dimensions or initialRelativeCenter was not effectively set.\"\n          );\n        }\n        return;\n      }\n      setCurrentSnapArea(null);\n    }\n    if (targetViewportCenterX === null || targetViewportCenterY === null) {\n      return;\n    }\n    const { borderLocation } = latestProviderDataRef.current || {\n      borderLocation: void 0\n    };\n    if (borderLocation && draggableWidth > 0 && draggableHeight > 0) {\n      const providerRectWidth = borderLocation.right - borderLocation.left;\n      const providerRectHeight = borderLocation.bottom - borderLocation.top;\n      let clampedCenterX = targetViewportCenterX;\n      let clampedCenterY = targetViewportCenterY;\n      if (draggableWidth >= providerRectWidth) {\n        clampedCenterX = borderLocation.left + providerRectWidth / 2;\n      } else {\n        const minX = borderLocation.left + draggableWidth / 2;\n        const maxX = borderLocation.right - draggableWidth / 2;\n        clampedCenterX = Math.max(minX, Math.min(clampedCenterX, maxX));\n      }\n      if (draggableHeight >= providerRectHeight) {\n        clampedCenterY = borderLocation.top + providerRectHeight / 2;\n      } else {\n        const minY = borderLocation.top + draggableHeight / 2;\n        const maxY = borderLocation.bottom - draggableHeight / 2;\n        clampedCenterY = Math.max(minY, Math.min(clampedCenterY, maxY));\n      }\n      targetViewportCenterX = clampedCenterX;\n      targetViewportCenterY = clampedCenterY;\n    }\n    if (!animatedPositionRef.current) {\n      animatedPositionRef.current = {\n        x: targetViewportCenterX,\n        y: targetViewportCenterY\n      };\n      velocityRef.current = { x: 0, y: 0 };\n      const targetElementStyleX2 = targetViewportCenterX - draggableWidth / 2;\n      const targetElementStyleY2 = targetViewportCenterY - draggableHeight / 2;\n      const isTopHalf2 = currentDesiredRelativeCenter ? currentDesiredRelativeCenter.y <= 0.5 : true;\n      const isLeftHalf2 = currentDesiredRelativeCenter ? currentDesiredRelativeCenter.x <= 0.5 : true;\n      const elStyle2 = draggableEl.style;\n      elStyle2.right = \"\";\n      elStyle2.bottom = \"\";\n      elStyle2.left = \"\";\n      elStyle2.top = \"\";\n      if (isLeftHalf2) {\n        const styleLeftPx = targetElementStyleX2 - parentViewportLeft;\n        elStyle2.left = parentWidth > 0 ? `${(styleLeftPx / parentWidth * 100).toFixed(2)}%` : \"0px\";\n        elStyle2.right = \"\";\n      } else {\n        const styleRightPx = parentViewportLeft + parentWidth - (targetElementStyleX2 + draggableWidth);\n        elStyle2.right = parentWidth > 0 ? `${(styleRightPx / parentWidth * 100).toFixed(2)}%` : \"0px\";\n        elStyle2.left = \"\";\n      }\n      if (isTopHalf2) {\n        const styleTopPx = targetElementStyleY2 - parentViewportTop;\n        elStyle2.top = parentHeight > 0 ? `${(styleTopPx / parentHeight * 100).toFixed(2)}%` : \"0px\";\n        elStyle2.bottom = \"\";\n      } else {\n        const styleBottomPx = parentViewportTop + parentHeight - (targetElementStyleY2 + draggableHeight);\n        elStyle2.bottom = parentHeight > 0 ? `${(styleBottomPx / parentHeight * 100).toFixed(2)}%` : \"0px\";\n        elStyle2.top = \"\";\n      }\n      hasAnimatedOnceRef.current = true;\n      return;\n    }\n    if (!hasAnimatedOnceRef.current) {\n      hasAnimatedOnceRef.current = true;\n      return;\n    }\n    const pos = animatedPositionRef.current;\n    const vel = velocityRef.current;\n    const dx = targetViewportCenterX - pos.x;\n    const dy = targetViewportCenterY - pos.y;\n    const ax = springStiffness * dx - springDampness * vel.x;\n    const ay = springStiffness * dy - springDampness * vel.y;\n    vel.x += ax;\n    vel.y += ay;\n    pos.x += vel.x;\n    pos.y += vel.y;\n    const threshold = 0.5;\n    if (Math.abs(dx) < threshold && Math.abs(dy) < threshold && Math.abs(vel.x) < threshold && Math.abs(vel.y) < threshold) {\n      pos.x = targetViewportCenterX;\n      pos.y = targetViewportCenterY;\n      vel.x = 0;\n      vel.y = 0;\n    }\n    animatedPositionRef.current = { ...pos };\n    velocityRef.current = { ...vel };\n    const targetElementStyleX = pos.x - draggableWidth / 2;\n    const targetElementStyleY = pos.y - draggableHeight / 2;\n    const isTopHalf = currentDesiredRelativeCenter ? currentDesiredRelativeCenter.y <= 0.5 : true;\n    const isLeftHalf = currentDesiredRelativeCenter ? currentDesiredRelativeCenter.x <= 0.5 : true;\n    const elStyle = draggableEl.style;\n    elStyle.right = \"\";\n    elStyle.bottom = \"\";\n    elStyle.left = \"\";\n    elStyle.top = \"\";\n    if (isLeftHalf) {\n      const styleLeftPx = targetElementStyleX - parentViewportLeft;\n      elStyle.left = parentWidth > 0 ? `${(styleLeftPx / parentWidth * 100).toFixed(2)}%` : \"0px\";\n      elStyle.right = \"\";\n    } else {\n      const styleRightPx = parentViewportLeft + parentWidth - (targetElementStyleX + draggableWidth);\n      elStyle.right = parentWidth > 0 ? `${(styleRightPx / parentWidth * 100).toFixed(2)}%` : \"0px\";\n      elStyle.left = \"\";\n    }\n    if (isTopHalf) {\n      const styleTopPx = targetElementStyleY - parentViewportTop;\n      elStyle.top = parentHeight > 0 ? `${(styleTopPx / parentHeight * 100).toFixed(2)}%` : \"0px\";\n      elStyle.bottom = \"\";\n    } else {\n      const styleBottomPx = parentViewportTop + parentHeight - (targetElementStyleY + draggableHeight);\n      elStyle.bottom = parentHeight > 0 ? `${(styleBottomPx / parentHeight * 100).toFixed(2)}%` : \"0px\";\n      elStyle.top = \"\";\n    }\n    if (Math.abs(pos.x - targetViewportCenterX) > threshold || Math.abs(pos.y - targetViewportCenterY) > threshold || Math.abs(vel.x) > threshold || Math.abs(vel.y) > threshold || isDraggingRef.current) {\n      requestAnimationFrame(updateDraggablePosition);\n    }\n  }, [areaSnapThreshold, springStiffness, springDampness]);\n  const mouseUpHandler = q$3(\n    (e2) => {\n      var _a;\n      if (isDraggingRef.current) {\n        if (onDragEnd) onDragEnd();\n        if ((_a = latestProviderDataRef.current) == null ? void 0 : _a.emitDragEnd) {\n          latestProviderDataRef.current.emitDragEnd();\n        }\n        const draggableEl = movingElementRef.current;\n        const provider = latestProviderDataRef.current;\n        if (draggableEl && provider && provider.borderLocation) {\n          const draggableWidth = draggableEl.offsetWidth;\n          const draggableHeight = draggableEl.offsetHeight;\n          const offsetParent = draggableEl.offsetParent;\n          let parentViewportLeft = 0;\n          let parentViewportTop = 0;\n          let parentWidth = window.innerWidth;\n          let parentHeight = window.innerHeight;\n          if (offsetParent) {\n            const opRect = offsetParent.getBoundingClientRect();\n            parentViewportLeft = opRect.left;\n            parentViewportTop = opRect.top;\n            parentWidth = offsetParent.offsetWidth || window.innerWidth;\n            parentHeight = offsetParent.offsetHeight || window.innerHeight;\n          }\n          let releasedCenterX = 0;\n          let releasedCenterY = 0;\n          if (currentMousePosRef.current && mouseToDraggableCenterOffsetRef.current) {\n            releasedCenterX = currentMousePosRef.current.x - mouseToDraggableCenterOffsetRef.current.x;\n            releasedCenterY = currentMousePosRef.current.y - mouseToDraggableCenterOffsetRef.current.y;\n          } else {\n            if (animatedPositionRef.current) {\n              releasedCenterX = animatedPositionRef.current.x;\n              releasedCenterY = animatedPositionRef.current.y;\n            }\n          }\n          const borderLocation = provider.borderLocation;\n          const minX = borderLocation.left + draggableWidth / 2;\n          const maxX = borderLocation.right - draggableWidth / 2;\n          const minY = borderLocation.top + draggableHeight / 2;\n          const maxY = borderLocation.bottom - draggableHeight / 2;\n          releasedCenterX = Math.max(minX, Math.min(releasedCenterX, maxX));\n          releasedCenterY = Math.max(minY, Math.min(releasedCenterY, maxY));\n          const areaCenters = getSnapAreaCenters(borderLocation);\n          let minDist = Number.POSITIVE_INFINITY;\n          let closestArea = null;\n          let closestCenter = null;\n          for (const area in provider.snapAreas) {\n            if (provider.snapAreas[area]) {\n              const center = areaCenters[area];\n              if (!center) continue;\n              const dist = Math.hypot(\n                center.x - releasedCenterX,\n                center.y - releasedCenterY\n              );\n              if (dist < minDist) {\n                minDist = dist;\n                closestArea = area;\n                closestCenter = center;\n              }\n            }\n          }\n          if (closestArea && closestCenter && minDist <= areaSnapThreshold) {\n            setCurrentSnapArea(closestArea);\n            const relX = (closestCenter.x - parentViewportLeft) / parentWidth;\n            const relY = (closestCenter.y - parentViewportTop) / parentHeight;\n            persistedRelativeCenterRef.current = { x: relX, y: relY };\n          } else {\n            setCurrentSnapArea(null);\n            const relX = (releasedCenterX - parentViewportLeft) / parentWidth;\n            const relY = (releasedCenterY - parentViewportTop) / parentHeight;\n            persistedRelativeCenterRef.current = { x: relX, y: relY };\n          }\n        }\n      }\n      mouseDownPosRef.current = null;\n      isDraggingRef.current = false;\n      console.log(\"Stop moving\");\n      window.removeEventListener(\"mousemove\", mouseMoveHandler, {\n        capture: true\n      });\n      window.removeEventListener(\"mouseup\", mouseUpHandler, {\n        capture: true\n      });\n      if (movingElementRef.current) {\n        movingElementRef.current.style.userSelect = \"\";\n      }\n      document.body.style.userSelect = \"\";\n      document.body.style.cursor = \"\";\n    },\n    [onDragEnd, areaSnapThreshold]\n  );\n  const mouseMoveHandler = q$3(\n    (e2) => {\n      var _a;\n      if (!mouseDownPosRef.current) return;\n      const distance = Math.hypot(\n        e2.clientX - mouseDownPosRef.current.x,\n        e2.clientY - mouseDownPosRef.current.y\n      );\n      if (distance > startThreshold && !isDraggingRef.current) {\n        isDraggingRef.current = true;\n        if (movingElementRef.current) {\n          movingElementRef.current.style.userSelect = \"none\";\n        }\n        document.body.style.userSelect = \"none\";\n        document.body.style.cursor = \"grabbing\";\n        if (onDragStart) onDragStart();\n        if ((_a = latestProviderDataRef.current) == null ? void 0 : _a.emitDragStart) {\n          latestProviderDataRef.current.emitDragStart();\n        }\n        requestAnimationFrame(updateDraggablePosition);\n        console.log(\"Start dragging\");\n      }\n      currentMousePosRef.current = { x: e2.clientX, y: e2.clientY };\n    },\n    [startThreshold, onDragStart, updateDraggablePosition]\n  );\n  const mouseDownHandler = q$3(\n    (e2) => {\n      console.log(\"Mouse down on draggable/handle area\");\n      if (e2.button !== 0) {\n        return;\n      }\n      const handleNode = dragInitiatorRef.current;\n      const draggableItemNode = movingElementRef.current;\n      if (handleNode) {\n        if (!handleNode.contains(e2.target) && e2.target !== handleNode) {\n          console.log(\n            \"Mousedown was not on the handle element or its children. Current target:\",\n            e2.target,\n            \"Expected handle:\",\n            handleNode,\n            \"Ignoring drag start.\"\n          );\n          return;\n        }\n      } else if (draggableItemNode) {\n        if (!draggableItemNode.contains(e2.target) && e2.target !== draggableItemNode) {\n          console.log(\n            \"Mousedown was not on the draggable item or its children (no handle specified). Current target:\",\n            e2.target,\n            \"Expected draggable item:\",\n            draggableItemNode,\n            \"Ignoring drag start.\"\n          );\n          return;\n        }\n      } else {\n        console.error(\n          \"Draggable element or handle ref not set in mouseDownHandler\"\n        );\n        return;\n      }\n      console.log(\"Valid drag target. Proceeding with drag setup.\");\n      mouseDownPosRef.current = { x: e2.clientX, y: e2.clientY };\n      if (!movingElementRef.current) {\n        console.error(\"Draggable element ref not set in mouseDownHandler\");\n        return;\n      }\n      const rect = movingElementRef.current.getBoundingClientRect();\n      const currentDraggableCenterX = rect.left + rect.width / 2;\n      const currentDraggableCenterY = rect.top + rect.height / 2;\n      mouseToDraggableCenterOffsetRef.current = {\n        x: e2.clientX - currentDraggableCenterX,\n        y: e2.clientY - currentDraggableCenterY\n      };\n      window.addEventListener(\"mousemove\", mouseMoveHandler, {\n        capture: true\n      });\n      window.addEventListener(\"mouseup\", mouseUpHandler, {\n        capture: true\n      });\n    },\n    [mouseMoveHandler, mouseUpHandler]\n  );\n  y$6(() => {\n    const elementToListenOn = dragInitiatorNode || movingElementNode;\n    if (elementToListenOn) {\n      elementToListenOn.addEventListener(\"mousedown\", mouseDownHandler);\n    }\n    return () => {\n      if (elementToListenOn) {\n        elementToListenOn.removeEventListener(\"mousedown\", mouseDownHandler);\n      }\n      if (isDraggingRef.current) {\n        if (onDragEnd) {\n          onDragEnd();\n        }\n        isDraggingRef.current = false;\n        if (movingElementNode) {\n          movingElementNode.style.userSelect = \"\";\n        }\n        document.body.style.userSelect = \"\";\n        document.body.style.cursor = \"\";\n        window.removeEventListener(\"mousemove\", mouseMoveHandler, {\n          capture: true\n        });\n        window.removeEventListener(\"mouseup\", mouseUpHandler, {\n          capture: true\n        });\n      }\n    };\n  }, [\n    movingElementNode,\n    dragInitiatorNode,\n    mouseDownHandler,\n    onDragEnd,\n    mouseMoveHandler,\n    mouseUpHandler\n  ]);\n  y$6(() => {\n    if (movingElementNode && persistedRelativeCenterRef.current && !isDraggingRef.current) {\n      requestAnimationFrame(updateDraggablePosition);\n    }\n  }, [\n    movingElementNode,\n    providerData,\n    // Triggers on container resize/scroll via DraggableProvider\n    persistedRelativeCenterRef,\n    // Triggers if the persistedRelativeCenterRef changes\n    updateDraggablePosition\n    // Stable callback\n  ]);\n  const draggableRefCallback = q$3((node) => {\n    setMovingElementNode(node);\n    movingElementRef.current = node;\n  }, []);\n  const handleRefCallback = q$3((node) => {\n    setDragInitiatorNode(node);\n    dragInitiatorRef.current = node;\n  }, []);\n  return {\n    draggableRef: draggableRefCallback,\n    handleRef: handleRefCallback,\n    position: {\n      snapArea: currentSnapArea,\n      isTopHalf: persistedRelativeCenterRef.current ? persistedRelativeCenterRef.current.y <= 0.5 : true,\n      isLeftHalf: persistedRelativeCenterRef.current ? persistedRelativeCenterRef.current.x <= 0.5 : true\n    }\n  };\n}\nfunction ToolbarDraggableBox() {\n  const provider = x$4(DraggableContext);\n  const borderLocation = provider == null ? void 0 : provider.borderLocation;\n  const isReady = !!borderLocation && borderLocation.right - borderLocation.left > 0 && borderLocation.bottom - borderLocation.top > 0;\n  const draggable = useDraggable({\n    startThreshold: 10,\n    initialSnapArea: \"bottomCenter\"\n  });\n  if (!isReady) return null;\n  return /* @__PURE__ */ u$9(\n    \"div\",\n    {\n      ref: draggable.draggableRef,\n      className: \"pointer-events-auto absolute p-0.5\",\n      children: /* @__PURE__ */ u$9(\"div\", { className: \"pointer-events-auto flex w-96 max-w-[80vw] flex-col items-start justify-center rounded-3xl border border-border/30 border-solid bg-zinc-50/80 p-0 shadow-lg backdrop-blur-lg transition-colors\", children: [\n        /* @__PURE__ */ u$9(ChatArea, {}),\n        /* @__PURE__ */ u$9(\n          \"div\",\n          {\n            ref: draggable.handleRef,\n            className: \"flex w-full flex-row items-center justify-center rounded-3xl border-border/30 border-t bg-background/40 p-1.5 shadow-lg transition-colors first:border-none\",\n            children: [\n              /* @__PURE__ */ u$9(ChatBox, {}),\n              /* @__PURE__ */ u$9(MoreActionsButton, {})\n            ]\n          }\n        )\n      ] })\n    }\n  );\n}\nfunction ToolbarArea() {\n  const containerRef = A$3(null);\n  return /* @__PURE__ */ u$9(\"div\", { className: \"absolute size-full\", children: /* @__PURE__ */ u$9(\"div\", { className: \"absolute inset-4\", ref: containerRef, children: /* @__PURE__ */ u$9(\n    DraggableProvider,\n    {\n      containerRef,\n      snapAreas: {\n        topLeft: true,\n        topCenter: true,\n        topRight: true,\n        centerLeft: true,\n        center: true,\n        centerRight: true,\n        bottomLeft: true,\n        bottomCenter: true,\n        bottomRight: true\n      },\n      children: /* @__PURE__ */ u$9(ToolbarDraggableBox, {})\n    }\n  ) }) });\n}\nconst Logo = ({\n  color = \"default\",\n  loading = false,\n  loadingSpeed = \"slow\",\n  ...props\n}) => {\n  const colorStyle = {\n    default: \"fill-stagewise-700 stroke-none\",\n    black: \"fill-zinc-950 stroke-none\",\n    white: \"fill-white stroke-none\",\n    gray: \"fill-zinc-500/50 stroke-none\",\n    current: \"fill-current stroke-none\",\n    gradient: \"fill-white stroke-black/30 stroke-1\"\n  };\n  return /* @__PURE__ */ u$9(\n    \"div\",\n    {\n      className: `relative ${color === \"gradient\" ? \"overflow-hidden rounded-full\" : \"overflow-visible\"} ${props.className || \"\"} ${loading ? \"drop-shadow-xl\" : \"\"} aspect-square`,\n      children: [\n        color === \"gradient\" && /* @__PURE__ */ u$9(\"div\", { className: \"absolute inset-0\", children: [\n          /* @__PURE__ */ u$9(\"div\", { className: \"absolute inset-0 size-full bg-gradient-to-tr from-indigo-700 via-blue-500 to-teal-500\" }),\n          /* @__PURE__ */ u$9(\"div\", { className: \"absolute top-1/2 left-1/2 size-9/12 bg-[radial-gradient(circle,rgba(219,39,119,0.2)_0%,rgba(219,39,119,0)_100%)]\" }),\n          /* @__PURE__ */ u$9(\"div\", { className: \"absolute right-1/2 bottom-1/2 size-full bg-[radial-gradient(circle,rgba(219,39,119,0.2)_0%,rgba(219,39,119,0)_100%)]\" }),\n          /* @__PURE__ */ u$9(\"div\", { className: \"absolute top-0 left-[-10%] size-[120%] bg-[radial-gradient(circle,rgba(255,255,255,0)_60%,rgba(255,255,255,0.2)_70%)]\" }),\n          /* @__PURE__ */ u$9(\"div\", { className: \"absolute top-[-20%] left-0 h-[120%] w-full bg-[radial-gradient(circle,rgba(55,48,163,0)_55%,rgba(55,48,163,0.35)_73%)]\" })\n        ] }),\n        /* @__PURE__ */ u$9(\n          \"svg\",\n          {\n            className: `absolute overflow-visible ${color === \"gradient\" ? \"top-[25%] left-[25%] h-[50%] w-[50%] drop-shadow-indigo-950 drop-shadow-xs\" : \"top-0 left-0 h-full w-full\"}`,\n            viewBox: \"0 0 2048 2048\",\n            children: [\n              /* @__PURE__ */ u$9(\"title\", { children: \"stagewise\" }),\n              /* @__PURE__ */ u$9(\n                \"ellipse\",\n                {\n                  className: colorStyle[color] + (loading ? \" animate-pulse\" : \"\"),\n                  id: \"path3\",\n                  ry: \"624\",\n                  rx: \"624\",\n                  cy: \"1024\",\n                  cx: \"1024\"\n                }\n              )\n            ]\n          }\n        ),\n        /* @__PURE__ */ u$9(\n          \"svg\",\n          {\n            className: `absolute overflow-visible ${color === \"gradient\" ? \"top-[25%] left-[25%] h-[50%] w-[50%]\" : \"top-0 left-0 h-full w-full\"}`,\n            viewBox: \"0 0 2048 2048\",\n            children: /* @__PURE__ */ u$9(\n              \"path\",\n              {\n                id: \"path4\",\n                className: `origin-center ${colorStyle[color]}${loading ? loadingSpeed === \"fast\" ? \" animate-spin-fast\" : \" animate-spin-slow\" : \"\"}`,\n                d: \"M 1024 0 A 1024 1024 0 0 0 0 1024 A 1024 1024 0 0 0 1024 2048 L 1736 2048 L 1848 2048 C 1958.7998 2048 2048 1958.7998 2048 1848 L 2048 1736 L 2048 1024 A 1024 1024 0 0 0 1024 0 z M 1024.9414 200 A 824 824 0 0 1 1848.9414 1024 A 824 824 0 0 1 1024.9414 1848 A 824 824 0 0 1 200.94141 1024 A 824 824 0 0 1 1024.9414 200 z \"\n              }\n            )\n          }\n        )\n      ]\n    }\n  );\n};\nfunction ExpandButton() {\n  const expand = useAppState((state) => state.expand);\n  return /* @__PURE__ */ u$9(\n    \"button\",\n    {\n      type: \"button\",\n      onClick: () => expand(),\n      className: \"pointer-events-auto absolute bottom-3 left-3 size-12 rounded-full bg-transparent opacity-80 shadow-sm transition-all duration-500 hover:opacity-100 hover:shadow-lg\",\n      children: /* @__PURE__ */ u$9(Logo, { color: \"gradient\" })\n    }\n  );\n}\nfunction ElementSelector(props) {\n  const lastHoveredElement = A$3(null);\n  const handleMouseMove = q$3(\n    (event) => {\n      const target = event.target;\n      if (target.closest(\".companion\")) return;\n      const refElement = getElementAtPoint(event.clientX, event.clientY);\n      if (props.ignoreList.includes(refElement)) return;\n      if (lastHoveredElement.current !== refElement) {\n        lastHoveredElement.current = refElement;\n        props.onElementHovered(refElement);\n      }\n    },\n    [props]\n  );\n  const handleMouseLeave = q$3(() => {\n    lastHoveredElement.current = null;\n    props.onElementUnhovered();\n  }, [props]);\n  const handleMouseClick = q$3(() => {\n    if (!lastHoveredElement.current) return;\n    if (props.ignoreList.includes(lastHoveredElement.current)) return;\n    props.onElementSelected(lastHoveredElement.current);\n  }, [props]);\n  return /* @__PURE__ */ u$9(\n    \"div\",\n    {\n      className: \"pointer-events-auto fixed inset-0 h-screen w-screen\",\n      onMouseMove: handleMouseMove,\n      onMouseLeave: handleMouseLeave,\n      onClick: handleMouseClick,\n      role: \"button\",\n      tabIndex: 0\n    }\n  );\n}\nfunction useWindowSize() {\n  const [size2, setSize] = d$4({\n    width: window.innerWidth,\n    height: window.innerHeight\n  });\n  const handleResize = q$3(\n    () => setSize({\n      width: window.innerWidth,\n      height: window.innerHeight\n    }),\n    []\n  );\n  useEventListener(\"resize\", handleResize);\n  return size2;\n}\nfunction ContextItemProposal({\n  refElement,\n  ...props\n}) {\n  const boxRef = A$3(null);\n  const windowSize = useWindowSize();\n  const updateBoxPosition = q$3(() => {\n    if (boxRef.current) {\n      if (refElement) {\n        const referenceRect = refElement.getBoundingClientRect();\n        boxRef.current.style.top = `${referenceRect.top}px`;\n        boxRef.current.style.left = `${referenceRect.left}px`;\n        boxRef.current.style.width = `${referenceRect.width}px`;\n        boxRef.current.style.height = `${referenceRect.height}px`;\n        boxRef.current.style.display = void 0;\n      } else {\n        boxRef.current.style.height = \"0px\";\n        boxRef.current.style.width = \"0px\";\n        boxRef.current.style.top = `${windowSize.height / 2}px`;\n        boxRef.current.style.left = `${windowSize.width / 2}px`;\n        boxRef.current.style.display = \"none\";\n      }\n    }\n  }, [refElement, windowSize.height, windowSize.width]);\n  useCyclicUpdate(updateBoxPosition, 30);\n  return /* @__PURE__ */ u$9(\n    \"div\",\n    {\n      ...props,\n      className: \"fixed flex items-center justify-center overflow-hidden rounded-lg border-2 border-blue-600/80 bg-blue-600/20 text-white backdrop-blur-xs transition-all duration-100\",\n      ref: boxRef,\n      children: /* @__PURE__ */ u$9(Plus, { className: \"size-6 drop-shadow-black drop-shadow-md\" })\n    }\n  );\n}\nfunction ContextItem({ refElement, ...props }) {\n  const boxRef = A$3(null);\n  const windowSize = useWindowSize();\n  const updateBoxPosition = q$3(() => {\n    if (boxRef.current) {\n      if (refElement) {\n        const referenceRect = refElement.getBoundingClientRect();\n        boxRef.current.style.top = `${referenceRect.top}px`;\n        boxRef.current.style.left = `${referenceRect.left}px`;\n        boxRef.current.style.width = `${referenceRect.width}px`;\n        boxRef.current.style.height = `${referenceRect.height}px`;\n        boxRef.current.style.display = void 0;\n      } else {\n        boxRef.current.style.height = \"0px\";\n        boxRef.current.style.width = \"0px\";\n        boxRef.current.style.top = `${windowSize.height / 2}px`;\n        boxRef.current.style.left = `${windowSize.width / 2}px`;\n        boxRef.current.style.display = \"none\";\n      }\n    }\n  }, [refElement, windowSize.height, windowSize.width]);\n  useCyclicUpdate(updateBoxPosition, 30);\n  const chatState = useChatState();\n  const handleDeleteClick = q$3(() => {\n    chatState.removeChatDomContext(chatState.currentChatId, refElement);\n  }, [chatState, refElement]);\n  return /* @__PURE__ */ u$9(\n    \"div\",\n    {\n      ...props,\n      className: \"pointer-events-auto fixed flex cursor-pointer items-center justify-center overflow-hidden rounded-lg border-2 border-green-600/80 bg-green-600/5 text-transparent transition-all duration-0 hover:border-red-600/80 hover:bg-red-600/20 hover:text-white hover:backdrop-blur-sm\",\n      ref: boxRef,\n      onClick: handleDeleteClick,\n      role: \"button\",\n      tabIndex: 0,\n      children: /* @__PURE__ */ u$9(Trash2, { className: \"size-6 drop-shadow-black drop-shadow-md\" })\n    }\n  );\n}\nfunction SelectorCanvas() {\n  const { chats, currentChatId, addChatDomContext, isPromptCreationActive } = useChatState();\n  const currentChat = T$5(\n    () => chats.find((chat) => chat.id === currentChatId),\n    [currentChatId, chats]\n  );\n  const shouldShow = isPromptCreationActive;\n  const contextElements = T$5(() => {\n    return (currentChat == null ? void 0 : currentChat.domContextElements) || [];\n  }, [currentChat]);\n  const [hoveredElement, setHoveredElement] = d$4(\n    null\n  );\n  const addElementToContext = q$3(\n    (el) => {\n      addChatDomContext(currentChatId, el);\n    },\n    [addChatDomContext, currentChatId]\n  );\n  if (!shouldShow) return null;\n  return /* @__PURE__ */ u$9(k$3, { children: [\n    hoveredElement && /* @__PURE__ */ u$9(ContextItemProposal, { refElement: hoveredElement }),\n    /* @__PURE__ */ u$9(\n      ElementSelector,\n      {\n        ignoreList: contextElements,\n        onElementHovered: setHoveredElement,\n        onElementSelected: addElementToContext,\n        onElementUnhovered: () => setHoveredElement(null)\n      }\n    ),\n    contextElements.map((el) => /* @__PURE__ */ u$9(ContextItem, { refElement: el }))\n  ] });\n}\nfunction DesktopLayout() {\n  const minimized = useAppState((state) => state.minimized);\n  return /* @__PURE__ */ u$9(\"div\", { className: cn(\"fixed inset-0 h-screen w-screen\"), children: [\n    /* @__PURE__ */ u$9(SelectorCanvas, {}),\n    !minimized && /* @__PURE__ */ u$9(ToolbarArea, {}),\n    minimized && /* @__PURE__ */ u$9(ExpandButton, {})\n  ] });\n}\nfunction ClickBlocker(props) {\n  return /* @__PURE__ */ u$9(\n    \"div\",\n    {\n      className: cn(\n        typeof props.enable === \"undefined\" || props.enable ? \"pointer-events-auto\" : \"pointer-events-none\",\n        props.className\n      ),\n      onClick: props.onClick,\n      role: \"button\",\n      tabIndex: 0\n    }\n  );\n}\nfunction FocusLock() {\n  const focusInCompanion = A$3(false);\n  y$6(() => {\n    const originalFocus = HTMLElement.prototype.focus;\n    HTMLElement.prototype.focus = function(...args) {\n      const shadowRoot = this.getRootNode();\n      const isInCompanion = shadowRoot instanceof ShadowRoot && shadowRoot.host instanceof HTMLElement && shadowRoot.host.nodeName === \"STAGEWISE-COMPANION-ANCHOR\";\n      if (!isInCompanion && focusInCompanion.current) {\n        return;\n      }\n      originalFocus.apply(this, args);\n    };\n    return () => {\n      HTMLElement.prototype.focus = originalFocus;\n    };\n  }, []);\n  useEventListener(\n    \"focusin\",\n    (event) => {\n      if (event.target.localName === companionAnchorTagName) {\n        focusInCompanion.current = true;\n      }\n    },\n    { capture: true }\n  );\n  useEventListener(\n    \"focusout\",\n    (event) => {\n      if (event.target.localName === companionAnchorTagName) {\n        focusInCompanion.current = false;\n      }\n    },\n    { capture: true }\n  );\n  return null;\n}\nfunction VisibilityManager({ children }) {\n  return children;\n}\nfunction App(config) {\n  const isMainAppBlocked = useAppState((state) => state.isMainAppBlocked);\n  return /* @__PURE__ */ u$9(k$3, { children: [\n    /* @__PURE__ */ u$9(FocusLock, {}),\n    /* @__PURE__ */ u$9(\n      ClickBlocker,\n      {\n        className: \"fixed inset-0 h-screen w-screen\",\n        enable: isMainAppBlocked\n      }\n    ),\n    /* @__PURE__ */ u$9(ContextProviders, { config, children: [\n      /* @__PURE__ */ u$9(HotkeyListener, {}),\n      /* @__PURE__ */ u$9(VisibilityManager, { children: /* @__PURE__ */ u$9(DesktopLayout, {}) })\n    ] })\n  ] });\n}\nfunction initToolbar(config) {\n  if (!document.body)\n    throw new Error(\"stagewise companion cannot find document.body\");\n  if (document.body.querySelector(companionAnchorTagName)) {\n    console.warn(\n      \"A stagewise companion anchor already exists. Aborting this instance.\"\n    );\n    throw new Error(\"A stagewise companion anchor already exists.\");\n  }\n  const shadowDomAnchor = document.createElement(companionAnchorTagName);\n  shadowDomAnchor.style.position = \"fixed\";\n  shadowDomAnchor.style.top = \"0px\";\n  shadowDomAnchor.style.left = \"0px\";\n  shadowDomAnchor.style.right = \"0px\";\n  shadowDomAnchor.style.bottom = \"0px\";\n  shadowDomAnchor.style.pointerEvents = \"none\";\n  shadowDomAnchor.style.zIndex = \"2147483647\";\n  const eventBlocker = (ev) => {\n    ev.stopPropagation();\n  };\n  shadowDomAnchor.onclick = eventBlocker;\n  shadowDomAnchor.onmousedown = eventBlocker;\n  shadowDomAnchor.onmouseup = eventBlocker;\n  shadowDomAnchor.onmousemove = eventBlocker;\n  shadowDomAnchor.ondblclick = eventBlocker;\n  shadowDomAnchor.oncontextmenu = eventBlocker;\n  shadowDomAnchor.onwheel = eventBlocker;\n  shadowDomAnchor.onfocus = eventBlocker;\n  shadowDomAnchor.onblur = eventBlocker;\n  document.body.appendChild(shadowDomAnchor);\n  const fontLinkNode = document.createElement(\"link\");\n  fontLinkNode.rel = \"stylesheet\";\n  fontLinkNode.href = `https://rsms.me/inter/inter.css`;\n  document.head.appendChild(fontLinkNode);\n  const styleNode = document.createElement(\"style\");\n  styleNode.append(document.createTextNode(appStyle));\n  document.head.appendChild(styleNode);\n  E$3(_$4(App, config), shadowDomAnchor);\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@stagewise/toolbar/dist/index.js\n"));

/***/ })

}]);